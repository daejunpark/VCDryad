axiom $arch_ptr_size == 8;

axiom $arch_spec_ptr_start == $max.u8;

const unique ^$##thread_id: $ctype;

axiom $def_math_type(^$##thread_id);

type $##thread_id;

const unique ^$##club: $ctype;

axiom $def_math_type(^$##club);

type $##club;

const unique ^s_node: $ctype;

axiom $is_span_sequential(^s_node);

axiom $def_struct_type(^s_node, 16, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^s_node) } $inv2(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^s_node) } $inv2_without_lemmas(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^s_node)) } $in(q, $composite_extent(s, p, ^s_node)) == (q == p));

const unique s_node.key: $field;

axiom $def_phys_field(^s_node, s_node.key, ^^i4, false, 0);

const unique s_node.next: $field;

axiom $def_phys_field(^s_node, s_node.next, $ptr_to(^s_node), false, 8);

function F#glob_reach() : $oset;

const unique cf#glob_reach: $pure_function;

axiom $function_arg_type(cf#glob_reach, 0, ^$#oset);

procedure glob_reach() returns ($result: $oset);
  free ensures $result == F#glob_reach();
  free ensures $call_transition(old($s), $s);



const unique ^$#_purecall_handler#1: $ctype;

axiom $def_fnptr_type(^$#_purecall_handler#1);

type $#_purecall_handler#1;

const unique ^$#_invalid_parameter_handler#2: $ctype;

axiom $def_fnptr_type(^$#_invalid_parameter_handler#2);

type $#_invalid_parameter_handler#2;

const unique ^$#g_slist_sort_merge.c..36263#3: $ctype;

axiom $def_fnptr_type(^$#g_slist_sort_merge.c..36263#3);

type $#g_slist_sort_merge.c..36263#3;

const unique ^$#_PtFuncCompare#4: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#4);

type $#_PtFuncCompare#4;

const unique ^$#_PtFuncCompare#5: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#5);

type $#_PtFuncCompare#5;

const unique ^$#_PtFuncCompare#6: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#6);

type $#_PtFuncCompare#6;

const unique ^$#_PtFuncCompare#7: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#7);

type $#_PtFuncCompare#7;

const unique ^$#_onexit_t#8: $ctype;

axiom $def_fnptr_type(^$#_onexit_t#8);

type $#_onexit_t#8;

function F##int_max(SP#x: int, SP#y: int) : int;

const unique cf##int_max: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_max(SP#x, SP#y) } $in_range_i4(F##int_max(SP#x, SP#y)));

axiom $function_arg_type(cf##int_max, 0, ^^i4);

axiom $function_arg_type(cf##int_max, 1, ^^i4);

axiom $function_arg_type(cf##int_max, 2, ^^i4);

procedure #int_max(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_max(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F##int_min(SP#x: int, SP#y: int) : int;

const unique cf##int_min: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_min(SP#x, SP#y) } $in_range_i4(F##int_min(SP#x, SP#y)));

axiom $function_arg_type(cf##int_min, 0, ^^i4);

axiom $function_arg_type(cf##int_min, 1, ^^i4);

axiom $function_arg_type(cf##int_min, 2, ^^i4);

procedure #int_min(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_min(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F#sll(#s: $state, SP#hd: $ptr) : bool;

const unique cf#sll: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll(#s, SP#hd) } 1 < $decreases_level ==> $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll(#s, SP#hd));

axiom $function_arg_type(cf#sll, 0, ^^bool);

axiom $function_arg_type(cf#sll, 1, $ptr_to(^s_node));

procedure sll(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  free ensures $result == F#sll($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#srtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#srtl(#s, SP#hd)));

axiom $function_arg_type(cf#srtl, 0, ^^bool);

axiom $function_arg_type(cf#srtl, 1, $ptr_to(^s_node));

procedure srtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#srtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#rsrtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#rsrtl(#s, SP#hd)));

axiom $function_arg_type(cf#rsrtl, 0, ^^bool);

axiom $function_arg_type(cf#rsrtl, 1, $ptr_to(^s_node));

procedure rsrtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#rsrtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#sll_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#sll_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_reach, 1, $ptr_to(^s_node));

procedure sll_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#sll_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#srtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#srtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_reach, 1, $ptr_to(^s_node));

procedure srtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#srtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#rsrtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#rsrtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#rsrtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#rsrtl_reach, 1, $ptr_to(^s_node));

procedure rsrtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#rsrtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_keys(#s: $state, SP#hd: $ptr) : $intset;

const unique cf#sll_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_keys(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_keys(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_keys(#s, SP#hd) == $intset_empty()));

axiom $function_arg_type(cf#sll_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_keys, 1, $ptr_to(^s_node));

procedure sll_keys(SP#hd: $ptr) returns ($result: $intset);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $intset_empty();
  free ensures $result == F#sll_keys($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_min_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_min_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_min_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_min_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_min_key, 1, $ptr_to(^s_node));

procedure sll_min_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_min_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_max_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_max_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_max_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_max_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_max_key, 1, $ptr_to(^s_node));

procedure sll_max_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_max_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_list_len_next(#s: $state, SP#x: $ptr) : int;

const unique cf#sll_list_len_next: $pure_function;

axiom (forall #s: $state, SP#x: $ptr :: { F#sll_list_len_next(#s, SP#x) } 1 < $decreases_level ==> $in_range_nat(F#sll_list_len_next(#s, SP#x)) && ($non_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) > 0) && ($is_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) == 0));

axiom $function_arg_type(cf#sll_list_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_list_len_next, 1, $ptr_to(^s_node));

procedure sll_list_len_next(SP#x: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $non_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result > 0;
  ensures $is_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result == 0;
  free ensures $result == F#sll_list_len_next($s, SP#x);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#sll_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg(#s, SP#hd, SP#tl) == F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg(#s, SP#hd, SP#tl)) && (F#sll_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && F#sll(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1)));

axiom $function_arg_type(cf#sll_lseg, 0, ^^bool);

axiom $function_arg_type(cf#sll_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg, 2, $ptr_to(^s_node));

procedure sll_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#sll($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1);
  free ensures $result == F#sll_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#srtl_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, SP#hd, SP#tl) == F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && (F#srtl_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && F#srtl(#s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key(#s, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))));

axiom $function_arg_type(cf#srtl_lseg, 0, ^^bool);

axiom $function_arg_type(cf#srtl_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg, 2, $ptr_to(^s_node));

procedure srtl_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#srtl($s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key($s, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  free ensures $result == F#srtl_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#sll_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_reach, 2, $ptr_to(^s_node));

procedure sll_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#sll_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#srtl_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#srtl_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg_reach, 2, $ptr_to(^s_node));

procedure srtl_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#srtl_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_keys(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $intset;

const unique cf#sll_lseg_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_keys(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == $intset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_lseg_keys(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_lseg_keys, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_keys, 2, $ptr_to(^s_node));

procedure sll_lseg_keys(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $intset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $intset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  free ensures $result == F#sll_lseg_keys($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_min_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_min_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_min_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_min_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_min_key, 2, $ptr_to(^s_node));

procedure sll_lseg_min_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_min_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_max_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_max_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_max_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_max_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_max_key, 2, $ptr_to(^s_node));

procedure sll_lseg_max_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_max_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_len_next(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_len_next: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_len_next(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_nat(F#sll_lseg_len_next(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == 0) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) > 0));

axiom $function_arg_type(cf#sll_lseg_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_lseg_len_next, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_len_next, 2, $ptr_to(^s_node));

procedure sll_lseg_len_next(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == 0;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $result > 0;
  free ensures $result == F#sll_lseg_len_next($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



procedure g_slist_sort_merge(P#l1: $ptr, P#l2: $ptr) returns ($result: $ptr);
  requires F#srtl($s, $phys_ptr_cast(P#l1, ^s_node));
  requires F#srtl($s, $phys_ptr_cast(P#l2, ^s_node));
  requires $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(P#l1, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(P#l2, ^s_node)));
  modifies $s, $cev_pc;
  ensures F#srtl($s, $phys_ptr_cast($result, ^s_node));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



implementation g_slist_sort_merge(P#l1: $ptr, P#l2: $ptr) returns ($result: $ptr)
{
  var stmtexpr1#21: $state;
  var _dryad_S7#7: $state;
  var stmtexpr0#20: $state;
  var _dryad_S6#6: $state;
  var stmtexpr1#19: $state;
  var _dryad_S7#5: $state;
  var stmtexpr0#18: $state;
  var _dryad_S6#4: $state;
  var stmtexpr2#17: $state;
  var _dryad_S7#3: $state;
  var stmtexpr1#16: $state;
  var _dryad_S6#2: $state;
  var stmtexpr0#15: $ptr;
  var SL#l3: $ptr;
  var stmtexpr2#14: $ptr;
  var SL#l24: $ptr;
  var stmtexpr1#13: $state;
  var _dryad_S7#1: $state;
  var stmtexpr0#12: $state;
  var _dryad_S6#0: $state;
  var stmtexpr2#11: $ptr;
  var SL#l14: $ptr;
  var stmtexpr1#10: $state;
  var SL#_dryad_S7: $state;
  var stmtexpr0#9: $state;
  var SL#_dryad_S6: $state;
  var ite#1: bool;
  var loopState#0: $state;
  var stmtexpr9#31: $ptr;
  var SL#list2: $ptr;
  var stmtexpr8#30: $state;
  var SL#_dryad_S5: $state;
  var stmtexpr7#29: $state;
  var SL#_dryad_S4: $state;
  var stmtexpr6#28: $state;
  var SL#_dryad_S3: $state;
  var stmtexpr5#27: $state;
  var SL#_dryad_S2: $state;
  var stmtexpr4#26: $state;
  var SL#_dryad_S1: $state;
  var stmtexpr3#25: $oset;
  var stmtexpr2#24: $state;
  var SL#_dryad_S0: $state;
  var res_sll_reach#8: $oset;
  var res_sll_reach#7: $oset;
  var res_sll_keys#6: $intset;
  var res_sll_keys#5: $intset;
  var SL#k1: $intset;
  var SL#k2: $intset;
  var SL#init_sll_keys: $intset;
  var SL#INIT_REACH: $oset;
  var L#list: $ptr;
  var L#l: $ptr;
  var L#list_next: $ptr;
  var stmtexpr1#23: $oset;
  var stmtexpr0#22: $oset;
  var res_srtl_reach#4: $oset;
  var res_srtl_reach#3: $oset;
  var SL#_dryad_G1: $oset;
  var SL#_dryad_G0: $oset;
  var local.l1: $ptr;
  var local.l2: $ptr;
  var #wrTime$3^3.3: int;
  var #stackframe: int;

// INV:PTR: P#l1, P#l2, L#list, L#l, L#list_next, local.l1, local.l2
// INV:INT:
// INV:LST: srtl

  anon9:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$3^3.3, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$3^3.3 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$3^3.3, (lambda #p: $ptr :: false));
    // assume true
    // assume true
    // assume @decreases_level_is(2147483647); 
    assume 2147483647 == $decreases_level;
    // struct s_node* local.l2; 
    // local.l2 := l2; 
    local.l2 := $phys_ptr_cast(P#l2, ^s_node);
    // struct s_node* local.l1; 
    // local.l1 := l1; 
    local.l1 := $phys_ptr_cast(P#l1, ^s_node);
    // assume ==(-2147483648, unchecked-(unchecked-(0, 2147483647), 1)); 
    assume -2147483648 == $unchk_sub(^^i4, $unchk_sub(^^i4, 0, 2147483647), 1);
    // assume true
    //  --- Dryad annotated function --- 
    // _math \oset _dryad_G0; 
    // _math \oset _dryad_G1; 
    // _math \oset res_srtl_reach#3; 
    // res_srtl_reach#3 := srtl_reach(local.l1); 
    call res_srtl_reach#3 := srtl_reach($phys_ptr_cast(local.l1, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset res_srtl_reach#4; 
    // res_srtl_reach#4 := srtl_reach(local.l2); 
    call res_srtl_reach#4 := srtl_reach($phys_ptr_cast(local.l2, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _dryad_G0 := @_vcc_oset_union(res_srtl_reach#3, res_srtl_reach#4); 
    SL#_dryad_G0 := $oset_union(res_srtl_reach#3, res_srtl_reach#4);
    // _math \oset stmtexpr0#22; 
    // stmtexpr0#22 := _dryad_G0; 
    stmtexpr0#22 := SL#_dryad_G0;
    // _dryad_G1 := _dryad_G0; 
    SL#_dryad_G1 := SL#_dryad_G0;
    // _math \oset stmtexpr1#23; 
    // stmtexpr1#23 := _dryad_G1; 
    stmtexpr1#23 := SL#_dryad_G1;
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // struct s_node* list_next; 
    // struct s_node* l; 
    // struct s_node* list; 
    // _math \oset INIT_REACH; 
    // _math \intset init_sll_keys; 
    // _math \intset k2; 
    // _math \intset k1; 
    // k1 := sll_keys(local.l1); 
    call SL#k1 := sll_keys($phys_ptr_cast(local.l1, ^s_node));
    assume $full_stop_ext(#tok$3^10.23, $s);
    // k2 := sll_keys(local.l2); 
    call SL#k2 := sll_keys($phys_ptr_cast(local.l2, ^s_node));
    assume $full_stop_ext(#tok$3^11.23, $s);
    // _math \intset res_sll_keys#5; 
    // res_sll_keys#5 := sll_keys(local.l1); 
    call res_sll_keys#5 := sll_keys($phys_ptr_cast(local.l1, ^s_node));
    assume $full_stop_ext(#tok$3^12.48, $s);
    // _math \intset res_sll_keys#6; 
    // res_sll_keys#6 := sll_keys(local.l2); 
    call res_sll_keys#6 := sll_keys($phys_ptr_cast(local.l2, ^s_node));
    assume $full_stop_ext(#tok$3^12.62, $s);
    // init_sll_keys := @_vcc_intset_union(res_sll_keys#5, res_sll_keys#6); 
    SL#init_sll_keys := $intset_union(res_sll_keys#5, res_sll_keys#6);
    // _math \oset res_sll_reach#7; 
    // res_sll_reach#7 := sll_reach(local.l1); 
    call res_sll_reach#7 := sll_reach($phys_ptr_cast(local.l1, ^s_node));
    assume $full_stop_ext(#tok$3^13.41, $s);
    // _math \oset res_sll_reach#8; 
    // res_sll_reach#8 := sll_reach(local.l2); 
    call res_sll_reach#8 := sll_reach($phys_ptr_cast(local.l2, ^s_node));
    assume $full_stop_ext(#tok$3^13.56, $s);
    // INIT_REACH := @_vcc_oset_union(res_sll_reach#7, res_sll_reach#8); 
    SL#INIT_REACH := $oset_union(res_sll_reach#7, res_sll_reach#8);
    // var struct s_node* list
    // var struct s_node* l
    // assume &&(==>(@_vcc_ptr_neq_null(local.l1), &&(@_vcc_mutable(@state, local.l1), @writes_check(local.l1))), ==>(@_vcc_ptr_neq_null(local.l2), &&(@_vcc_mutable(@state, local.l2), @writes_check(local.l2)))); 
    assume ($non_null($phys_ptr_cast(local.l1, ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l1, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l1, ^s_node))) && ($non_null($phys_ptr_cast(local.l2, ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l2, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l2, ^s_node)));
    // _math \state _dryad_S0; 
    // _dryad_S0 := @_vcc_current_state(@state); 
    SL#_dryad_S0 := $current_state($s);
    // _math \state stmtexpr2#24; 
    // stmtexpr2#24 := _dryad_S0; 
    stmtexpr2#24 := SL#_dryad_S0;
    // list := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
    call L#list := $alloc(^s_node);
    assume $full_stop_ext(#tok$3^18.9, $s);
    // assume !(@_vcc_oset_in(list, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
    // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(list)); 
    SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // _math \oset stmtexpr3#25; 
    // stmtexpr3#25 := _dryad_G1; 
    stmtexpr3#25 := SL#_dryad_G1;
    // assume ==(glob_reach(), _dryad_G1); 
    assume F#glob_reach() == SL#_dryad_G1;
    // _math \state _dryad_S1; 
    // _dryad_S1 := @_vcc_current_state(@state); 
    SL#_dryad_S1 := $current_state($s);
    // _math \state stmtexpr4#26; 
    // stmtexpr4#26 := _dryad_S1; 
    stmtexpr4#26 := SL#_dryad_S1;
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_keys(l)), old(_dryad_S1, sll_keys(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_list_len_next(l)), old(_dryad_S1, sll_list_len_next(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(l)))), ==(old(_dryad_S0, rsrtl(l)), old(_dryad_S1, rsrtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(l)))), ==(old(_dryad_S0, rsrtl_reach(l)), old(_dryad_S1, rsrtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll(l)), old(_dryad_S1, sll(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_reach(l)), old(_dryad_S1, sll_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_max_key(l)), old(_dryad_S1, sll_max_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(l)))), ==(old(_dryad_S0, sll_min_key(l)), old(_dryad_S1, sll_min_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(l)))), ==(old(_dryad_S0, srtl(l)), old(_dryad_S1, srtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(l)))), ==(old(_dryad_S0, srtl_reach(l)), old(_dryad_S1, srtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#l, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_keys(list_next)), old(_dryad_S1, sll_keys(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_list_len_next(list_next)), old(_dryad_S1, sll_list_len_next(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(list_next)))), ==(old(_dryad_S0, rsrtl(list_next)), old(_dryad_S1, rsrtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(list_next)))), ==(old(_dryad_S0, rsrtl_reach(list_next)), old(_dryad_S1, rsrtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll(list_next)), old(_dryad_S1, sll(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_reach(list_next)), old(_dryad_S1, sll_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_max_key(list_next)), old(_dryad_S1, sll_max_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(list_next)))), ==(old(_dryad_S0, sll_min_key(list_next)), old(_dryad_S1, sll_min_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(list_next)))), ==(old(_dryad_S0, srtl(list_next)), old(_dryad_S1, srtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(list_next)))), ==(old(_dryad_S0, srtl_reach(list_next)), old(_dryad_S1, srtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_keys(local.l2)), old(_dryad_S1, sll_keys(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_list_len_next(local.l2)), old(_dryad_S1, sll_list_len_next(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(local.l2)))), ==(old(_dryad_S0, rsrtl(local.l2)), old(_dryad_S1, rsrtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(local.l2)))), ==(old(_dryad_S0, rsrtl_reach(local.l2)), old(_dryad_S1, rsrtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll(local.l2)), old(_dryad_S1, sll(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_reach(local.l2)), old(_dryad_S1, sll_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_max_key(local.l2)), old(_dryad_S1, sll_max_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l2)))), ==(old(_dryad_S0, sll_min_key(local.l2)), old(_dryad_S1, sll_min_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(local.l2)))), ==(old(_dryad_S0, srtl(local.l2)), old(_dryad_S1, srtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(local.l2)))), ==(old(_dryad_S0, srtl_reach(local.l2)), old(_dryad_S1, srtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_keys(local.l1)), old(_dryad_S1, sll_keys(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_list_len_next(local.l1)), old(_dryad_S1, sll_list_len_next(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(local.l1)))), ==(old(_dryad_S0, rsrtl(local.l1)), old(_dryad_S1, rsrtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, rsrtl_reach(local.l1)))), ==(old(_dryad_S0, rsrtl_reach(local.l1)), old(_dryad_S1, rsrtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll(local.l1)), old(_dryad_S1, sll(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_reach(local.l1)), old(_dryad_S1, sll_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_max_key(local.l1)), old(_dryad_S1, sll_max_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, sll_reach(local.l1)))), ==(old(_dryad_S0, sll_min_key(local.l1)), old(_dryad_S1, sll_min_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(local.l1)))), ==(old(_dryad_S0, srtl(local.l1)), old(_dryad_S1, srtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S0, srtl_reach(local.l1)))), ==(old(_dryad_S0, srtl_reach(local.l1)), old(_dryad_S1, srtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(local.l1, ^s_node));
    // assume @_vcc_ptr_neq_null(list); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node));
    // _math \state _dryad_S2; 
    // _dryad_S2 := @_vcc_current_state(@state); 
    SL#_dryad_S2 := $current_state($s);
    // _math \state stmtexpr5#27; 
    // stmtexpr5#27 := _dryad_S2; 
    stmtexpr5#27 := SL#_dryad_S2;
    // assert @prim_writes_check((list->key)); 
    assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#list, ^s_node), s_node.key));
    // *(list->key) := -2147483648; 
    call $write_int(s_node.key, $phys_ptr_cast(L#list, ^s_node), -2147483648);
    assume $full_stop_ext(#tok$3^26.2, $s);
    // _math \state _dryad_S3; 
    // _dryad_S3 := @_vcc_current_state(@state); 
    SL#_dryad_S3 := $current_state($s);
    // _math \state stmtexpr6#28; 
    // stmtexpr6#28 := _dryad_S3; 
    stmtexpr6#28 := SL#_dryad_S3;
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_keys(*((list->next)))), old(_dryad_S3, sll_keys(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_keys(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_list_len_next(*((list->next)))), old(_dryad_S3, sll_list_len_next(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(*((list->next)))))), ==(old(_dryad_S2, rsrtl(*((list->next)))), old(_dryad_S3, rsrtl(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#rsrtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(*((list->next)))))), ==(old(_dryad_S2, rsrtl_reach(*((list->next)))), old(_dryad_S3, rsrtl_reach(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll(*((list->next)))), old(_dryad_S3, sll(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_reach(*((list->next)))), old(_dryad_S3, sll_reach(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_max_key(*((list->next)))), old(_dryad_S3, sll_max_key(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_max_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(*((list->next)))))), ==(old(_dryad_S2, sll_min_key(*((list->next)))), old(_dryad_S3, sll_min_key(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#sll_min_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(*((list->next)))))), ==(old(_dryad_S2, srtl(*((list->next)))), old(_dryad_S3, srtl(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#srtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#srtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(*((list->next)))))), ==(old(_dryad_S2, srtl_reach(*((list->next)))), old(_dryad_S3, srtl_reach(*((list->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) == F#srtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(list)), old(_dryad_S3, sll_list_len_next(list))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(list)), old(_dryad_S3, rsrtl_reach(list))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, sll(list)), old(_dryad_S3, sll(list))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(list)), old(_dryad_S3, sll_reach(list))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(list)), old(_dryad_S3, srtl_reach(list))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(l)), old(_dryad_S3, sll_list_len_next(l))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(l)), old(_dryad_S3, rsrtl_reach(l))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, sll(l)), old(_dryad_S3, sll(l))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(l)), old(_dryad_S3, sll_reach(l))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(l)), old(_dryad_S3, srtl_reach(l))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(list_next)), old(_dryad_S3, sll_list_len_next(list_next))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(list_next)), old(_dryad_S3, rsrtl_reach(list_next))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, sll(list_next)), old(_dryad_S3, sll(list_next))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(list_next)), old(_dryad_S3, sll_reach(list_next))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(list_next)), old(_dryad_S3, srtl_reach(list_next))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(local.l2)), old(_dryad_S3, sll_list_len_next(local.l2))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(local.l2)), old(_dryad_S3, rsrtl_reach(local.l2))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, sll(local.l2)), old(_dryad_S3, sll(local.l2))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(local.l2)), old(_dryad_S3, sll_reach(local.l2))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(local.l2)), old(_dryad_S3, srtl_reach(local.l2))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(local.l1)), old(_dryad_S3, sll_list_len_next(local.l1))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(local.l1)), old(_dryad_S3, rsrtl_reach(local.l1))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==(old(_dryad_S2, sll(local.l1)), old(_dryad_S3, sll(local.l1))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(local.l1)), old(_dryad_S3, sll_reach(local.l1))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(local.l1)), old(_dryad_S3, srtl_reach(local.l1))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_keys(l)), old(_dryad_S3, sll_keys(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_list_len_next(l)), old(_dryad_S3, sll_list_len_next(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(l)))), ==(old(_dryad_S2, rsrtl(l)), old(_dryad_S3, rsrtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(l)))), ==(old(_dryad_S2, rsrtl_reach(l)), old(_dryad_S3, rsrtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll(l)), old(_dryad_S3, sll(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_reach(l)), old(_dryad_S3, sll_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_max_key(l)), old(_dryad_S3, sll_max_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_min_key(l)), old(_dryad_S3, sll_min_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(l)))), ==(old(_dryad_S2, srtl(l)), old(_dryad_S3, srtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(l)))), ==(old(_dryad_S2, srtl_reach(l)), old(_dryad_S3, srtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#l, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_keys(list_next)), old(_dryad_S3, sll_keys(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_list_len_next(list_next)), old(_dryad_S3, sll_list_len_next(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(list_next)))), ==(old(_dryad_S2, rsrtl(list_next)), old(_dryad_S3, rsrtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(list_next)))), ==(old(_dryad_S2, rsrtl_reach(list_next)), old(_dryad_S3, rsrtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll(list_next)), old(_dryad_S3, sll(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_reach(list_next)), old(_dryad_S3, sll_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_max_key(list_next)), old(_dryad_S3, sll_max_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(list_next)))), ==(old(_dryad_S2, sll_min_key(list_next)), old(_dryad_S3, sll_min_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(list_next)))), ==(old(_dryad_S2, srtl(list_next)), old(_dryad_S3, srtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(list_next)))), ==(old(_dryad_S2, srtl_reach(list_next)), old(_dryad_S3, srtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_keys(local.l2)), old(_dryad_S3, sll_keys(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_list_len_next(local.l2)), old(_dryad_S3, sll_list_len_next(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(local.l2)))), ==(old(_dryad_S2, rsrtl(local.l2)), old(_dryad_S3, rsrtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(local.l2)))), ==(old(_dryad_S2, rsrtl_reach(local.l2)), old(_dryad_S3, rsrtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll(local.l2)), old(_dryad_S3, sll(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_reach(local.l2)), old(_dryad_S3, sll_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_max_key(local.l2)), old(_dryad_S3, sll_max_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l2)))), ==(old(_dryad_S2, sll_min_key(local.l2)), old(_dryad_S3, sll_min_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(local.l2)))), ==(old(_dryad_S2, srtl(local.l2)), old(_dryad_S3, srtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(local.l2)))), ==(old(_dryad_S2, srtl_reach(local.l2)), old(_dryad_S3, srtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_keys(local.l1)), old(_dryad_S3, sll_keys(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_list_len_next(local.l1)), old(_dryad_S3, sll_list_len_next(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(local.l1)))), ==(old(_dryad_S2, rsrtl(local.l1)), old(_dryad_S3, rsrtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, rsrtl_reach(local.l1)))), ==(old(_dryad_S2, rsrtl_reach(local.l1)), old(_dryad_S3, rsrtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll(local.l1)), old(_dryad_S3, sll(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_reach(local.l1)), old(_dryad_S3, sll_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_max_key(local.l1)), old(_dryad_S3, sll_max_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, sll_reach(local.l1)))), ==(old(_dryad_S2, sll_min_key(local.l1)), old(_dryad_S3, sll_min_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(local.l1)))), ==(old(_dryad_S2, srtl(local.l1)), old(_dryad_S3, srtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S2, srtl_reach(local.l1)))), ==(old(_dryad_S2, srtl_reach(local.l1)), old(_dryad_S3, srtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, l)), ==(*((l->key)), old(_dryad_S2, *((l->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#l, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, l)), @_vcc_ptr_eq_pure(*((l->next)), old(_dryad_S2, *((l->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#l, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, list_next)), ==(*((list_next->key)), old(_dryad_S2, *((list_next->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S2, *((list_next->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l2)), ==(*((local.l2->key)), old(_dryad_S2, *((local.l2->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S2, *((local.l2->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l1)), ==(*((local.l1->key)), old(_dryad_S2, *((local.l1->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S2, *((local.l1->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // _math \state _dryad_S4; 
    // _dryad_S4 := @_vcc_current_state(@state); 
    SL#_dryad_S4 := $current_state($s);
    // _math \state stmtexpr7#29; 
    // stmtexpr7#29 := _dryad_S4; 
    stmtexpr7#29 := SL#_dryad_S4;
    // assert @prim_writes_check((list->next)); 
    assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#list, ^s_node), s_node.next));
    // *(list->next) := (struct s_node*)@null; 
    call $write_int(s_node.next, $phys_ptr_cast(L#list, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
    assume $full_stop_ext(#tok$3^27.2, $s);
    // _math \state _dryad_S5; 
    // _dryad_S5 := @_vcc_current_state(@state); 
    SL#_dryad_S5 := $current_state($s);
    // _math \state stmtexpr8#30; 
    // stmtexpr8#30 := _dryad_S5; 
    stmtexpr8#30 := SL#_dryad_S5;
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_keys(l)), old(_dryad_S5, sll_keys(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_list_len_next(l)), old(_dryad_S5, sll_list_len_next(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(l)))), ==(old(_dryad_S4, rsrtl(l)), old(_dryad_S5, rsrtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(l)))), ==(old(_dryad_S4, rsrtl_reach(l)), old(_dryad_S5, rsrtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll(l)), old(_dryad_S5, sll(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_reach(l)), old(_dryad_S5, sll_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_max_key(l)), old(_dryad_S5, sll_max_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(l)))), ==(old(_dryad_S4, sll_min_key(l)), old(_dryad_S5, sll_min_key(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(l)))), ==(old(_dryad_S4, srtl(l)), old(_dryad_S5, srtl(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(l)))), ==(old(_dryad_S4, srtl_reach(l)), old(_dryad_S5, srtl_reach(l)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#l, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_keys(list_next)), old(_dryad_S5, sll_keys(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_list_len_next(list_next)), old(_dryad_S5, sll_list_len_next(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(list_next)))), ==(old(_dryad_S4, rsrtl(list_next)), old(_dryad_S5, rsrtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(list_next)))), ==(old(_dryad_S4, rsrtl_reach(list_next)), old(_dryad_S5, rsrtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll(list_next)), old(_dryad_S5, sll(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_reach(list_next)), old(_dryad_S5, sll_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_max_key(list_next)), old(_dryad_S5, sll_max_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(list_next)))), ==(old(_dryad_S4, sll_min_key(list_next)), old(_dryad_S5, sll_min_key(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(list_next)))), ==(old(_dryad_S4, srtl(list_next)), old(_dryad_S5, srtl(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(list_next)))), ==(old(_dryad_S4, srtl_reach(list_next)), old(_dryad_S5, srtl_reach(list_next)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_keys(local.l2)), old(_dryad_S5, sll_keys(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_list_len_next(local.l2)), old(_dryad_S5, sll_list_len_next(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(local.l2)))), ==(old(_dryad_S4, rsrtl(local.l2)), old(_dryad_S5, rsrtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(local.l2)))), ==(old(_dryad_S4, rsrtl_reach(local.l2)), old(_dryad_S5, rsrtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll(local.l2)), old(_dryad_S5, sll(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_reach(local.l2)), old(_dryad_S5, sll_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_max_key(local.l2)), old(_dryad_S5, sll_max_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l2)))), ==(old(_dryad_S4, sll_min_key(local.l2)), old(_dryad_S5, sll_min_key(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(local.l2)))), ==(old(_dryad_S4, srtl(local.l2)), old(_dryad_S5, srtl(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(local.l2)))), ==(old(_dryad_S4, srtl_reach(local.l2)), old(_dryad_S5, srtl_reach(local.l2)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_keys(local.l1)), old(_dryad_S5, sll_keys(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_list_len_next(local.l1)), old(_dryad_S5, sll_list_len_next(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(local.l1)))), ==(old(_dryad_S4, rsrtl(local.l1)), old(_dryad_S5, rsrtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, rsrtl_reach(local.l1)))), ==(old(_dryad_S4, rsrtl_reach(local.l1)), old(_dryad_S5, rsrtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll(local.l1)), old(_dryad_S5, sll(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_reach(local.l1)), old(_dryad_S5, sll_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_max_key(local.l1)), old(_dryad_S5, sll_max_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, sll_reach(local.l1)))), ==(old(_dryad_S4, sll_min_key(local.l1)), old(_dryad_S5, sll_min_key(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(local.l1)))), ==(old(_dryad_S4, srtl(local.l1)), old(_dryad_S5, srtl(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(list, old(_dryad_S4, srtl_reach(local.l1)))), ==(old(_dryad_S4, srtl_reach(local.l1)), old(_dryad_S5, srtl_reach(local.l1)))); 
    assume !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, l)), ==(*((l->key)), old(_dryad_S4, *((l->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#l, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#l, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, l)), @_vcc_ptr_eq_pure(*((l->next)), old(_dryad_S4, *((l->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#l, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, list_next)), ==(*((list_next->key)), old(_dryad_S4, *((list_next->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S4, *((list_next->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l2)), ==(*((local.l2->key)), old(_dryad_S4, *((local.l2->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S4, *((local.l2->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l1)), ==(*((local.l1->key)), old(_dryad_S4, *((local.l1->key))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(list, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S4, *((local.l1->next))))); 
    assume !($phys_ptr_cast(L#list, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // l := list; 
    L#l := $phys_ptr_cast(L#list, ^s_node);
    // assert sll_lseg(list, list); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#list, ^s_node));
    // assume sll_lseg(list, list); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#list, ^s_node));
    // assert srtl_lseg(list, list); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#list, ^s_node));
    // assume srtl_lseg(list, list); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#list, ^s_node));
    // assert sll_lseg(l, l); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#l, ^s_node), $phys_ptr_cast(L#l, ^s_node));
    // assume sll_lseg(l, l); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#l, ^s_node), $phys_ptr_cast(L#l, ^s_node));
    // assert srtl_lseg(l, l); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#l, ^s_node), $phys_ptr_cast(L#l, ^s_node));
    // assume srtl_lseg(l, l); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#l, ^s_node), $phys_ptr_cast(L#l, ^s_node));
    // assert sll_lseg(list_next, list_next); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#list_next, ^s_node), $phys_ptr_cast(L#list_next, ^s_node));
    // assume sll_lseg(list_next, list_next); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#list_next, ^s_node), $phys_ptr_cast(L#list_next, ^s_node));
    // assert srtl_lseg(list_next, list_next); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#list_next, ^s_node), $phys_ptr_cast(L#list_next, ^s_node));
    // assume srtl_lseg(list_next, list_next); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#list_next, ^s_node), $phys_ptr_cast(L#list_next, ^s_node));
    // assert sll_lseg(local.l2, local.l2); 
    assert F#sll_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $phys_ptr_cast(local.l2, ^s_node));
    // assume sll_lseg(local.l2, local.l2); 
    assume F#sll_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $phys_ptr_cast(local.l2, ^s_node));
    // assert srtl_lseg(local.l2, local.l2); 
    assert F#srtl_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $phys_ptr_cast(local.l2, ^s_node));
    // assume srtl_lseg(local.l2, local.l2); 
    assume F#srtl_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $phys_ptr_cast(local.l2, ^s_node));
    // assert sll_lseg(local.l1, local.l1); 
    assert F#sll_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $phys_ptr_cast(local.l1, ^s_node));
    // assume sll_lseg(local.l1, local.l1); 
    assume F#sll_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $phys_ptr_cast(local.l1, ^s_node));
    // assert srtl_lseg(local.l1, local.l1); 
    assert F#srtl_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $phys_ptr_cast(local.l1, ^s_node));
    // assume srtl_lseg(local.l1, local.l1); 
    assume F#srtl_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), <=(-2147483648, sll_min_key(local.l1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> -2147483648 <= F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), <=(-2147483648, sll_min_key(local.l2))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> -2147483648 <= F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(l), &&(@_vcc_mutable(@state, l), @writes_check(l))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#l, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#l, ^s_node));
    // struct s_node* list2; 
    // list2 := list; 
    SL#list2 := $phys_ptr_cast(L#list, ^s_node);
    // struct s_node* stmtexpr9#31; 
    // stmtexpr9#31 := list2; 
    stmtexpr9#31 := $phys_ptr_cast(SL#list2, ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assert @reads_check_normal((list->next)); 
    assert $thread_local($s, $phys_ptr_cast(L#list, ^s_node));
    // list_next := *((list->next)); 
    L#list_next := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    loopState#0 := $s;
    assume true;
// INV:LOOPHEAD
    while (true)
// INV:BEGIN
      invariant F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
      invariant F#srtl($s, $phys_ptr_cast(local.l1, ^s_node));
      invariant F#srtl($s, $phys_ptr_cast(local.l2, ^s_node));
      invariant $oset_disjoint(F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)));
      invariant $oset_disjoint(F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)));
      invariant $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)));
      invariant !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)));
      invariant !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)));
      invariant !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)));
      invariant $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) <= $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node));
      invariant $non_null($phys_ptr_cast(L#l, ^s_node));
// INV:END
      invariant $non_null($phys_ptr_cast(L#l, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#l, ^s_node));
      invariant $non_null($phys_ptr_cast(L#l, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#l, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l1, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l1, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l2, ^s_node));
      invariant $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l2, ^s_node));
    {
      anon6:
        assume $writes_nothing(old($s), $s);
        assume $timestamp_post(loopState#0, $s);
        assume $full_stop_ext(#tok$3^33.2, $s);
        // assume @_vcc_meta_eq(old(@prestate, @state), @state); 
        assume $meta_eq(loopState#0, $s);
        // _Bool ite#1; 
        // ite#1 := &&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(local.l2)); 
        ite#1 := $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($phys_ptr_cast(local.l2, ^s_node));
        assume true;
        // if (ite#1) ...
        if (ite#1)
        {
          anon3:
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), &&(==(@_vcc_mutable(@state, l), @_vcc_mutable(@state, *((l->next)))), ==(@writes_check(l), @writes_check(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#l, ^s_node)) == $mutable($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#l, ^s_node)) == $top_writable($s, #wrTime$3^3.3, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node));
            // assert @reads_check_normal((local.l1->key)); 
            assert $thread_local($s, $phys_ptr_cast(local.l1, ^s_node));
            // assert @reads_check_normal((local.l2->key)); 
            assert $thread_local($s, $phys_ptr_cast(local.l2, ^s_node));
            assume true;
            // if (<=(*((local.l1->key)), *((local.l2->key)))) ...
            if ($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)))
            {
              anon1:
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // _math \state _dryad_S6; 
                // _dryad_S6 := @_vcc_current_state(@state); 
                SL#_dryad_S6 := $current_state($s);
                // _math \state stmtexpr0#9; 
                // stmtexpr0#9 := _dryad_S6; 
                stmtexpr0#9 := SL#_dryad_S6;
                // assert @prim_writes_check((l->next)); 
                assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
                // *(l->next) := local.l1; 
                call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast(local.l1, ^s_node)));
                assume $full_stop_ext(#tok$3^70.4, $s);
                // _math \state _dryad_S7; 
                // _dryad_S7 := @_vcc_current_state(@state); 
                SL#_dryad_S7 := $current_state($s);
                // _math \state stmtexpr1#10; 
                // stmtexpr1#10 := _dryad_S7; 
                stmtexpr1#10 := SL#_dryad_S7;
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_keys(list2)), old(_dryad_S7, sll_keys(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_list_len_next(list2)), old(_dryad_S7, sll_list_len_next(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list2)))), ==(old(_dryad_S6, rsrtl(list2)), old(_dryad_S7, rsrtl(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list2)))), ==(old(_dryad_S6, rsrtl_reach(list2)), old(_dryad_S7, rsrtl_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll(list2)), old(_dryad_S7, sll(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_reach(list2)), old(_dryad_S7, sll_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_max_key(list2)), old(_dryad_S7, sll_max_key(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list2)))), ==(old(_dryad_S6, sll_min_key(list2)), old(_dryad_S7, sll_min_key(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list2)))), ==(old(_dryad_S6, srtl(list2)), old(_dryad_S7, srtl(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list2)))), ==(old(_dryad_S6, srtl_reach(list2)), old(_dryad_S7, srtl_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_keys(list)), old(_dryad_S7, sll_keys(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_list_len_next(list)), old(_dryad_S7, sll_list_len_next(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list)))), ==(old(_dryad_S6, rsrtl(list)), old(_dryad_S7, rsrtl(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list)))), ==(old(_dryad_S6, rsrtl_reach(list)), old(_dryad_S7, rsrtl_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll(list)), old(_dryad_S7, sll(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_reach(list)), old(_dryad_S7, sll_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_max_key(list)), old(_dryad_S7, sll_max_key(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list)))), ==(old(_dryad_S6, sll_min_key(list)), old(_dryad_S7, sll_min_key(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list)))), ==(old(_dryad_S6, srtl(list)), old(_dryad_S7, srtl(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list)))), ==(old(_dryad_S6, srtl_reach(list)), old(_dryad_S7, srtl_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_keys(list_next)), old(_dryad_S7, sll_keys(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_list_len_next(list_next)), old(_dryad_S7, sll_list_len_next(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list_next)))), ==(old(_dryad_S6, rsrtl(list_next)), old(_dryad_S7, rsrtl(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(list_next)))), ==(old(_dryad_S6, rsrtl_reach(list_next)), old(_dryad_S7, rsrtl_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll(list_next)), old(_dryad_S7, sll(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_reach(list_next)), old(_dryad_S7, sll_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_max_key(list_next)), old(_dryad_S7, sll_max_key(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(list_next)))), ==(old(_dryad_S6, sll_min_key(list_next)), old(_dryad_S7, sll_min_key(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list_next)))), ==(old(_dryad_S6, srtl(list_next)), old(_dryad_S7, srtl(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(list_next)))), ==(old(_dryad_S6, srtl_reach(list_next)), old(_dryad_S7, srtl_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_keys(local.l2)), old(_dryad_S7, sll_keys(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_list_len_next(local.l2)), old(_dryad_S7, sll_list_len_next(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(local.l2)))), ==(old(_dryad_S6, rsrtl(local.l2)), old(_dryad_S7, rsrtl(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(local.l2)))), ==(old(_dryad_S6, rsrtl_reach(local.l2)), old(_dryad_S7, rsrtl_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll(local.l2)), old(_dryad_S7, sll(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_reach(local.l2)), old(_dryad_S7, sll_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_max_key(local.l2)), old(_dryad_S7, sll_max_key(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l2)))), ==(old(_dryad_S6, sll_min_key(local.l2)), old(_dryad_S7, sll_min_key(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(local.l2)))), ==(old(_dryad_S6, srtl(local.l2)), old(_dryad_S7, srtl(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(local.l2)))), ==(old(_dryad_S6, srtl_reach(local.l2)), old(_dryad_S7, srtl_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_keys(local.l1)), old(_dryad_S7, sll_keys(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_list_len_next(local.l1)), old(_dryad_S7, sll_list_len_next(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(local.l1)))), ==(old(_dryad_S6, rsrtl(local.l1)), old(_dryad_S7, rsrtl(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, rsrtl_reach(local.l1)))), ==(old(_dryad_S6, rsrtl_reach(local.l1)), old(_dryad_S7, rsrtl_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll(local.l1)), old(_dryad_S7, sll(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_reach(local.l1)), old(_dryad_S7, sll_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_max_key(local.l1)), old(_dryad_S7, sll_max_key(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(local.l1)))), ==(old(_dryad_S6, sll_min_key(local.l1)), old(_dryad_S7, sll_min_key(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(local.l1)))), ==(old(_dryad_S6, srtl(local.l1)), old(_dryad_S7, srtl(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_reach(local.l1)))), ==(old(_dryad_S6, srtl_reach(local.l1)), old(_dryad_S7, srtl_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg(list, l)), old(_dryad_S7, sll_lseg(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_reach(list, l)), old(_dryad_S7, sll_lseg_reach(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_keys(list, l)), old(_dryad_S7, sll_lseg_keys(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_len_next(list, l)), old(_dryad_S7, sll_lseg_len_next(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_max_key(list, l)), old(_dryad_S7, sll_lseg_max_key(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6, sll_lseg_min_key(list, l)), old(_dryad_S7, sll_lseg_min_key(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6, srtl_lseg(list, l)), old(_dryad_S7, srtl_lseg(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6, srtl_lseg_reach(list, l)), old(_dryad_S7, srtl_lseg_reach(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6, *((list2->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6, *((list2->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6, *((list->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6, *((list->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6, *((list_next->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6, *((list_next->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6, *((local.l2->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6, *((local.l2->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6, *((local.l1->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6, *((local.l1->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), &&(==(@_vcc_mutable(@state, local.l1), @_vcc_mutable(@state, *((local.l1->next)))), ==(@writes_check(local.l1), @writes_check(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l1, ^s_node)) == $mutable($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l1, ^s_node)) == $top_writable($s, #wrTime$3^3.3, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node));
                // struct s_node* l14; 
                // l14 := local.l1; 
                SL#l14 := $phys_ptr_cast(local.l1, ^s_node);
                // struct s_node* stmtexpr2#11; 
                // stmtexpr2#11 := l14; 
                stmtexpr2#11 := $phys_ptr_cast(SL#l14, ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(sll_lseg(local.l1, *((local.l1->next))), &&(sll_lseg(*((local.l1->next)), *((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_lseg_reach(*((local.l1->next)), *((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(sll_lseg_reach(local.l1, *((local.l1->next))), @_vcc_oset_union(sll_lseg_reach(*((local.l1->next)), *((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(sll_lseg_keys(local.l1, *((local.l1->next))), @_vcc_intset_union(sll_lseg_keys(*((local.l1->next)), *((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(sll_lseg_len_next(local.l1, *((local.l1->next))), unchecked+(sll_lseg_len_next(*((local.l1->next)), *((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), @_vcc_ptr_neq_pure(*((local.l1->next)), *((local.l1->next)))), ==(sll_lseg_max_key(local.l1, *((local.l1->next))), @\int_max(*((local.l1->key)), sll_lseg_max_key(*((local.l1->next)), *((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), @_vcc_ptr_neq_pure(*((local.l1->next)), *((local.l1->next)))), ==(sll_lseg_min_key(local.l1, *((local.l1->next))), @\int_min(*((local.l1->key)), sll_lseg_min_key(*((local.l1->next)), *((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), @_vcc_ptr_neq_pure(*((local.l1->next)), *((local.l1->next)))), ==(srtl_lseg(local.l1, *((local.l1->next))), &&(&&(srtl_lseg(*((local.l1->next)), *((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_lseg_reach(*((local.l1->next)), *((local.l1->next)))))), <=(*((local.l1->key)), sll_lseg_min_key(*((local.l1->next)), *((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_pure(local.l1, *((local.l1->next)))), ==(srtl_lseg_reach(local.l1, *((local.l1->next))), @_vcc_oset_union(srtl_lseg_reach(*((local.l1->next)), *((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $phys_ptr_cast(local.l1, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(local.l1, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assert @reads_check_normal((local.l1->next)); 
                assert $thread_local($s, $phys_ptr_cast(local.l1, ^s_node));
                // local.l1 := *((local.l1->next)); 
                local.l1 := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            }
            else
            {
              anon2:
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // _math \state _dryad_S6#0; 
                // _dryad_S6#0 := @_vcc_current_state(@state); 
                _dryad_S6#0 := $current_state($s);
                // _math \state stmtexpr0#12; 
                // stmtexpr0#12 := _dryad_S6#0; 
                stmtexpr0#12 := _dryad_S6#0;
                // assert @prim_writes_check((l->next)); 
                assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
                // *(l->next) := local.l2; 
                call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast(local.l2, ^s_node)));
                assume $full_stop_ext(#tok$3^74.4, $s);
                // _math \state _dryad_S7#1; 
                // _dryad_S7#1 := @_vcc_current_state(@state); 
                _dryad_S7#1 := $current_state($s);
                // _math \state stmtexpr1#13; 
                // stmtexpr1#13 := _dryad_S7#1; 
                stmtexpr1#13 := _dryad_S7#1;
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_keys(list2)), old(_dryad_S7#1, sll_keys(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_list_len_next(list2)), old(_dryad_S7#1, sll_list_len_next(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list2)))), ==(old(_dryad_S6#0, rsrtl(list2)), old(_dryad_S7#1, rsrtl(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list2)))), ==(old(_dryad_S6#0, rsrtl_reach(list2)), old(_dryad_S7#1, rsrtl_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll(list2)), old(_dryad_S7#1, sll(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_reach(list2)), old(_dryad_S7#1, sll_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_max_key(list2)), old(_dryad_S7#1, sll_max_key(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list2)))), ==(old(_dryad_S6#0, sll_min_key(list2)), old(_dryad_S7#1, sll_min_key(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list2)))), ==(old(_dryad_S6#0, srtl(list2)), old(_dryad_S7#1, srtl(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list2)))), ==(old(_dryad_S6#0, srtl_reach(list2)), old(_dryad_S7#1, srtl_reach(list2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_keys(list)), old(_dryad_S7#1, sll_keys(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_list_len_next(list)), old(_dryad_S7#1, sll_list_len_next(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list)))), ==(old(_dryad_S6#0, rsrtl(list)), old(_dryad_S7#1, rsrtl(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list)))), ==(old(_dryad_S6#0, rsrtl_reach(list)), old(_dryad_S7#1, rsrtl_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll(list)), old(_dryad_S7#1, sll(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_reach(list)), old(_dryad_S7#1, sll_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_max_key(list)), old(_dryad_S7#1, sll_max_key(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list)))), ==(old(_dryad_S6#0, sll_min_key(list)), old(_dryad_S7#1, sll_min_key(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list)))), ==(old(_dryad_S6#0, srtl(list)), old(_dryad_S7#1, srtl(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list)))), ==(old(_dryad_S6#0, srtl_reach(list)), old(_dryad_S7#1, srtl_reach(list)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_keys(list_next)), old(_dryad_S7#1, sll_keys(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_list_len_next(list_next)), old(_dryad_S7#1, sll_list_len_next(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list_next)))), ==(old(_dryad_S6#0, rsrtl(list_next)), old(_dryad_S7#1, rsrtl(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(list_next)))), ==(old(_dryad_S6#0, rsrtl_reach(list_next)), old(_dryad_S7#1, rsrtl_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll(list_next)), old(_dryad_S7#1, sll(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_reach(list_next)), old(_dryad_S7#1, sll_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_max_key(list_next)), old(_dryad_S7#1, sll_max_key(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(list_next)))), ==(old(_dryad_S6#0, sll_min_key(list_next)), old(_dryad_S7#1, sll_min_key(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list_next)))), ==(old(_dryad_S6#0, srtl(list_next)), old(_dryad_S7#1, srtl(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(list_next)))), ==(old(_dryad_S6#0, srtl_reach(list_next)), old(_dryad_S7#1, srtl_reach(list_next)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_keys(local.l2)), old(_dryad_S7#1, sll_keys(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_list_len_next(local.l2)), old(_dryad_S7#1, sll_list_len_next(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#0, rsrtl(local.l2)), old(_dryad_S7#1, rsrtl(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#0, rsrtl_reach(local.l2)), old(_dryad_S7#1, rsrtl_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll(local.l2)), old(_dryad_S7#1, sll(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_reach(local.l2)), old(_dryad_S7#1, sll_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_max_key(local.l2)), old(_dryad_S7#1, sll_max_key(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l2)))), ==(old(_dryad_S6#0, sll_min_key(local.l2)), old(_dryad_S7#1, sll_min_key(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(local.l2)))), ==(old(_dryad_S6#0, srtl(local.l2)), old(_dryad_S7#1, srtl(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(local.l2)))), ==(old(_dryad_S6#0, srtl_reach(local.l2)), old(_dryad_S7#1, srtl_reach(local.l2)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_keys(local.l1)), old(_dryad_S7#1, sll_keys(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_list_len_next(local.l1)), old(_dryad_S7#1, sll_list_len_next(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#0, rsrtl(local.l1)), old(_dryad_S7#1, rsrtl(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#0, rsrtl_reach(local.l1)), old(_dryad_S7#1, rsrtl_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll(local.l1)), old(_dryad_S7#1, sll(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_reach(local.l1)), old(_dryad_S7#1, sll_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_max_key(local.l1)), old(_dryad_S7#1, sll_max_key(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_reach(local.l1)))), ==(old(_dryad_S6#0, sll_min_key(local.l1)), old(_dryad_S7#1, sll_min_key(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(local.l1)))), ==(old(_dryad_S6#0, srtl(local.l1)), old(_dryad_S7#1, srtl(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_reach(local.l1)))), ==(old(_dryad_S6#0, srtl_reach(local.l1)), old(_dryad_S7#1, srtl_reach(local.l1)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(_dryad_S6#0, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(_dryad_S7#1, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg(list, l)), old(_dryad_S7#1, sll_lseg(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_reach(list, l)), old(_dryad_S7#1, sll_lseg_reach(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_keys(list, l)), old(_dryad_S7#1, sll_lseg_keys(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_len_next(list, l)), old(_dryad_S7#1, sll_lseg_len_next(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_max_key(list, l)), old(_dryad_S7#1, sll_lseg_max_key(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#0, sll_lseg_min_key(list, l)), old(_dryad_S7#1, sll_lseg_min_key(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#0, srtl_lseg(list, l)), old(_dryad_S7#1, srtl_lseg(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#0, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#0, srtl_lseg_reach(list, l)), old(_dryad_S7#1, srtl_lseg_reach(list, l)))); 
                assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#0, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#1, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6#0, *((list2->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6#0, *((list2->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6#0, *((list->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(L#list, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6#0, *((list->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6#0, *((list_next->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6#0, *((list_next->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6#0, *((local.l2->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6#0, *((local.l2->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6#0, *((local.l1->key))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(_dryad_S6#0, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6#0, *((local.l1->next))))); 
                assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#0, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
                assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
                assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
                assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
                assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), &&(==(@_vcc_mutable(@state, local.l2), @_vcc_mutable(@state, *((local.l2->next)))), ==(@writes_check(local.l2), @writes_check(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> $mutable($s, $phys_ptr_cast(local.l2, ^s_node)) == $mutable($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(local.l2, ^s_node)) == $top_writable($s, #wrTime$3^3.3, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node));
                // struct s_node* l24; 
                // l24 := local.l2; 
                SL#l24 := $phys_ptr_cast(local.l2, ^s_node);
                // struct s_node* stmtexpr2#14; 
                // stmtexpr2#14 := l24; 
                stmtexpr2#14 := $phys_ptr_cast(SL#l24, ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(sll_lseg(local.l2, *((local.l2->next))), &&(sll_lseg(*((local.l2->next)), *((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_lseg_reach(*((local.l2->next)), *((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(sll_lseg_reach(local.l2, *((local.l2->next))), @_vcc_oset_union(sll_lseg_reach(*((local.l2->next)), *((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(sll_lseg_keys(local.l2, *((local.l2->next))), @_vcc_intset_union(sll_lseg_keys(*((local.l2->next)), *((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(sll_lseg_len_next(local.l2, *((local.l2->next))), unchecked+(sll_lseg_len_next(*((local.l2->next)), *((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), @_vcc_ptr_neq_pure(*((local.l2->next)), *((local.l2->next)))), ==(sll_lseg_max_key(local.l2, *((local.l2->next))), @\int_max(*((local.l2->key)), sll_lseg_max_key(*((local.l2->next)), *((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), @_vcc_ptr_neq_pure(*((local.l2->next)), *((local.l2->next)))), ==(sll_lseg_min_key(local.l2, *((local.l2->next))), @\int_min(*((local.l2->key)), sll_lseg_min_key(*((local.l2->next)), *((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), @_vcc_ptr_neq_pure(*((local.l2->next)), *((local.l2->next)))), ==(srtl_lseg(local.l2, *((local.l2->next))), &&(&&(srtl_lseg(*((local.l2->next)), *((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_lseg_reach(*((local.l2->next)), *((local.l2->next)))))), <=(*((local.l2->key)), sll_lseg_min_key(*((local.l2->next)), *((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_pure(local.l2, *((local.l2->next)))), ==(srtl_lseg_reach(local.l2, *((local.l2->next))), @_vcc_oset_union(srtl_lseg_reach(*((local.l2->next)), *((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $phys_ptr_cast(local.l2, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(local.l2, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assert @reads_check_normal((local.l2->next)); 
                assert $thread_local($s, $phys_ptr_cast(local.l2, ^s_node));
                // local.l2 := *((local.l2->next)); 
                local.l2 := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
                assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            }

          anon4:
            // struct s_node* l3; 
            // l3 := l; 
            SL#l3 := $phys_ptr_cast(L#l, ^s_node);
            // struct s_node* stmtexpr0#15; 
            // stmtexpr0#15 := l3; 
            stmtexpr0#15 := $phys_ptr_cast(SL#l3, ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(sll_lseg(l, *((l->next))), &&(sll_lseg(*((l->next)), *((l->next))), unchecked!(@_vcc_oset_in(l, sll_lseg_reach(*((l->next)), *((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(sll_lseg_reach(l, *((l->next))), @_vcc_oset_union(sll_lseg_reach(*((l->next)), *((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(sll_lseg_keys(l, *((l->next))), @_vcc_intset_union(sll_lseg_keys(*((l->next)), *((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(sll_lseg_len_next(l, *((l->next))), unchecked+(sll_lseg_len_next(*((l->next)), *((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), @_vcc_ptr_neq_pure(*((l->next)), *((l->next)))), ==(sll_lseg_max_key(l, *((l->next))), @\int_max(*((l->key)), sll_lseg_max_key(*((l->next)), *((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), @_vcc_ptr_neq_pure(*((l->next)), *((l->next)))), ==(sll_lseg_min_key(l, *((l->next))), @\int_min(*((l->key)), sll_lseg_min_key(*((l->next)), *((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), @_vcc_ptr_neq_pure(*((l->next)), *((l->next)))), ==(srtl_lseg(l, *((l->next))), &&(&&(srtl_lseg(*((l->next)), *((l->next))), unchecked!(@_vcc_oset_in(l, srtl_lseg_reach(*((l->next)), *((l->next)))))), <=(*((l->key)), sll_lseg_min_key(*((l->next)), *((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_pure(l, *((l->next)))), ==(srtl_lseg_reach(l, *((l->next))), @_vcc_oset_union(srtl_lseg_reach(*((l->next)), *((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $phys_ptr_cast(L#l, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#l, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assert @reads_check_normal((l->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#l, ^s_node));
            // l := *((l->next)); 
            L#l := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // _math \state _dryad_S6#2; 
            // _dryad_S6#2 := @_vcc_current_state(@state); 
            _dryad_S6#2 := $current_state($s);
            // _math \state stmtexpr1#16; 
            // stmtexpr1#16 := _dryad_S6#2; 
            stmtexpr1#16 := _dryad_S6#2;
            // assert @prim_writes_check((l->next)); 
            assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
            // *(l->next) := (struct s_node*)@null; 
            call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
            assume $full_stop_ext(#tok$3^80.3, $s);
            // _math \state _dryad_S7#3; 
            // _dryad_S7#3 := @_vcc_current_state(@state); 
            _dryad_S7#3 := $current_state($s);
            // _math \state stmtexpr2#17; 
            // stmtexpr2#17 := _dryad_S7#3; 
            stmtexpr2#17 := _dryad_S7#3;
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_keys(l3)), old(_dryad_S7#3, sll_keys(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_list_len_next(l3)), old(_dryad_S7#3, sll_list_len_next(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(l3)))), ==(old(_dryad_S6#2, rsrtl(l3)), old(_dryad_S7#3, rsrtl(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(l3)))), ==(old(_dryad_S6#2, rsrtl_reach(l3)), old(_dryad_S7#3, rsrtl_reach(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll(l3)), old(_dryad_S7#3, sll(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_reach(l3)), old(_dryad_S7#3, sll_reach(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_max_key(l3)), old(_dryad_S7#3, sll_max_key(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(l3)))), ==(old(_dryad_S6#2, sll_min_key(l3)), old(_dryad_S7#3, sll_min_key(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(l3)))), ==(old(_dryad_S6#2, srtl(l3)), old(_dryad_S7#3, srtl(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(l3)))), ==(old(_dryad_S6#2, srtl_reach(l3)), old(_dryad_S7#3, srtl_reach(l3)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#l3, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_keys(list2)), old(_dryad_S7#3, sll_keys(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_list_len_next(list2)), old(_dryad_S7#3, sll_list_len_next(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list2)))), ==(old(_dryad_S6#2, rsrtl(list2)), old(_dryad_S7#3, rsrtl(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list2)))), ==(old(_dryad_S6#2, rsrtl_reach(list2)), old(_dryad_S7#3, rsrtl_reach(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll(list2)), old(_dryad_S7#3, sll(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_reach(list2)), old(_dryad_S7#3, sll_reach(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_max_key(list2)), old(_dryad_S7#3, sll_max_key(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list2)))), ==(old(_dryad_S6#2, sll_min_key(list2)), old(_dryad_S7#3, sll_min_key(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list2)))), ==(old(_dryad_S6#2, srtl(list2)), old(_dryad_S7#3, srtl(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list2)))), ==(old(_dryad_S6#2, srtl_reach(list2)), old(_dryad_S7#3, srtl_reach(list2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_keys(list)), old(_dryad_S7#3, sll_keys(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_list_len_next(list)), old(_dryad_S7#3, sll_list_len_next(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list)))), ==(old(_dryad_S6#2, rsrtl(list)), old(_dryad_S7#3, rsrtl(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list)))), ==(old(_dryad_S6#2, rsrtl_reach(list)), old(_dryad_S7#3, rsrtl_reach(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll(list)), old(_dryad_S7#3, sll(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_reach(list)), old(_dryad_S7#3, sll_reach(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_max_key(list)), old(_dryad_S7#3, sll_max_key(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list)))), ==(old(_dryad_S6#2, sll_min_key(list)), old(_dryad_S7#3, sll_min_key(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list)))), ==(old(_dryad_S6#2, srtl(list)), old(_dryad_S7#3, srtl(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list)))), ==(old(_dryad_S6#2, srtl_reach(list)), old(_dryad_S7#3, srtl_reach(list)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_keys(list_next)), old(_dryad_S7#3, sll_keys(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_list_len_next(list_next)), old(_dryad_S7#3, sll_list_len_next(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list_next)))), ==(old(_dryad_S6#2, rsrtl(list_next)), old(_dryad_S7#3, rsrtl(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(list_next)))), ==(old(_dryad_S6#2, rsrtl_reach(list_next)), old(_dryad_S7#3, rsrtl_reach(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll(list_next)), old(_dryad_S7#3, sll(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_reach(list_next)), old(_dryad_S7#3, sll_reach(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_max_key(list_next)), old(_dryad_S7#3, sll_max_key(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(list_next)))), ==(old(_dryad_S6#2, sll_min_key(list_next)), old(_dryad_S7#3, sll_min_key(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list_next)))), ==(old(_dryad_S6#2, srtl(list_next)), old(_dryad_S7#3, srtl(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(list_next)))), ==(old(_dryad_S6#2, srtl_reach(list_next)), old(_dryad_S7#3, srtl_reach(list_next)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_keys(local.l2)), old(_dryad_S7#3, sll_keys(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_list_len_next(local.l2)), old(_dryad_S7#3, sll_list_len_next(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#2, rsrtl(local.l2)), old(_dryad_S7#3, rsrtl(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#2, rsrtl_reach(local.l2)), old(_dryad_S7#3, rsrtl_reach(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll(local.l2)), old(_dryad_S7#3, sll(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_reach(local.l2)), old(_dryad_S7#3, sll_reach(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_max_key(local.l2)), old(_dryad_S7#3, sll_max_key(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l2)))), ==(old(_dryad_S6#2, sll_min_key(local.l2)), old(_dryad_S7#3, sll_min_key(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(local.l2)))), ==(old(_dryad_S6#2, srtl(local.l2)), old(_dryad_S7#3, srtl(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(local.l2)))), ==(old(_dryad_S6#2, srtl_reach(local.l2)), old(_dryad_S7#3, srtl_reach(local.l2)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_keys(local.l1)), old(_dryad_S7#3, sll_keys(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_list_len_next(local.l1)), old(_dryad_S7#3, sll_list_len_next(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#2, rsrtl(local.l1)), old(_dryad_S7#3, rsrtl(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#2, rsrtl_reach(local.l1)), old(_dryad_S7#3, rsrtl_reach(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll(local.l1)), old(_dryad_S7#3, sll(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_reach(local.l1)), old(_dryad_S7#3, sll_reach(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_max_key(local.l1)), old(_dryad_S7#3, sll_max_key(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_reach(local.l1)))), ==(old(_dryad_S6#2, sll_min_key(local.l1)), old(_dryad_S7#3, sll_min_key(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(local.l1)))), ==(old(_dryad_S6#2, srtl(local.l1)), old(_dryad_S7#3, srtl(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_reach(local.l1)))), ==(old(_dryad_S6#2, srtl_reach(local.l1)), old(_dryad_S7#3, srtl_reach(local.l1)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(_dryad_S6#2, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(_dryad_S7#3, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg(list, l)), old(_dryad_S7#3, sll_lseg(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_reach(list, l)), old(_dryad_S7#3, sll_lseg_reach(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_keys(list, l)), old(_dryad_S7#3, sll_lseg_keys(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_len_next(list, l)), old(_dryad_S7#3, sll_lseg_len_next(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_max_key(list, l)), old(_dryad_S7#3, sll_lseg_max_key(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_min_key(list, l)), old(_dryad_S7#3, sll_lseg_min_key(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#2, srtl_lseg(list, l)), old(_dryad_S7#3, srtl_lseg(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#2, srtl_lseg_reach(list, l)), old(_dryad_S7#3, srtl_lseg_reach(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg(list, l)), old(_dryad_S7#3, sll_lseg(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_reach(list, l)), old(_dryad_S7#3, sll_lseg_reach(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_keys(list, l)), old(_dryad_S7#3, sll_lseg_keys(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_len_next(list, l)), old(_dryad_S7#3, sll_lseg_len_next(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_max_key(list, l)), old(_dryad_S7#3, sll_lseg_max_key(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#2, sll_lseg_min_key(list, l)), old(_dryad_S7#3, sll_lseg_min_key(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#2, srtl_lseg(list, l)), old(_dryad_S7#3, srtl_lseg(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#2, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#2, srtl_lseg_reach(list, l)), old(_dryad_S7#3, srtl_lseg_reach(list, l)))); 
            assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#2, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#3, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, l3)), ==(*((l3->key)), old(_dryad_S6#2, *((l3->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#l3, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(SL#l3, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, l3)), @_vcc_ptr_eq_pure(*((l3->next)), old(_dryad_S6#2, *((l3->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#l3, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6#2, *((list2->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6#2, *((list2->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6#2, *((list->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(L#list, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6#2, *((list->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6#2, *((list_next->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6#2, *((list_next->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6#2, *((local.l2->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6#2, *((local.l2->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6#2, *((local.l1->key))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(_dryad_S6#2, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6#2, *((local.l1->next))))); 
            assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#2, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(sll_keys(l3), @_vcc_intset_union(sll_keys(*((l3->next))), @_vcc_intset_singleton(*((l3->key)))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(sll_list_len_next(l3), unchecked+(sll_list_len_next(*((l3->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l3), @_vcc_ptr_neq_null(*((l3->next)))), ==(rsrtl(l3), &&(&&(rsrtl(*((l3->next))), unchecked!(@_vcc_oset_in(l3, rsrtl_reach(*((l3->next)))))), >=(*((l3->key)), sll_max_key(*((l3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(rsrtl_reach(l3), @_vcc_oset_union(rsrtl_reach(*((l3->next))), @_vcc_oset_singleton(l3)))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(sll(l3), &&(sll(*((l3->next))), unchecked!(@_vcc_oset_in(l3, sll_reach(*((l3->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(sll_reach(l3), @_vcc_oset_union(sll_reach(*((l3->next))), @_vcc_oset_singleton(l3)))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l3, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l3), @_vcc_ptr_neq_null(*((l3->next)))), ==(sll_max_key(l3), @\int_max(*((l3->key)), sll_max_key(*((l3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l3), @_vcc_ptr_neq_null(*((l3->next)))), ==(sll_min_key(l3), @\int_min(*((l3->key)), sll_min_key(*((l3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l3), @_vcc_ptr_neq_null(*((l3->next)))), ==(srtl(l3), &&(&&(srtl(*((l3->next))), unchecked!(@_vcc_oset_in(l3, srtl_reach(*((l3->next)))))), <=(*((l3->key)), sll_min_key(*((l3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l3), ==(srtl_reach(l3), @_vcc_oset_union(srtl_reach(*((l3->next))), @_vcc_oset_singleton(l3)))); 
            assume $non_null($phys_ptr_cast(SL#l3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
            assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
            assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
            assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
            assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
            assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        }
        else
        {
          anon5:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // goto #break_2; 
            goto #break_2;
        }

      #continue_2:
        assume true;
// INV:LOOPTAIL
    }

  anon10:
    assume $full_stop_ext(#tok$3^33.2, $s);

  #break_2:
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
    assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
    assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
    assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
    assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
    assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    assume true;
    // if (@_vcc_ptr_neq_null(local.l1)) ...
    if ($non_null($phys_ptr_cast(local.l1, ^s_node)))
    {
      anon7:
        // _math \state _dryad_S6#4; 
        // _dryad_S6#4 := @_vcc_current_state(@state); 
        _dryad_S6#4 := $current_state($s);
        // _math \state stmtexpr0#18; 
        // stmtexpr0#18 := _dryad_S6#4; 
        stmtexpr0#18 := _dryad_S6#4;
        // assert @prim_writes_check((l->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
        // *(l->next) := local.l1; 
        call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast(local.l1, ^s_node)));
        assume $full_stop_ext(#tok$3^83.3, $s);
        // _math \state _dryad_S7#5; 
        // _dryad_S7#5 := @_vcc_current_state(@state); 
        _dryad_S7#5 := $current_state($s);
        // _math \state stmtexpr1#19; 
        // stmtexpr1#19 := _dryad_S7#5; 
        stmtexpr1#19 := _dryad_S7#5;
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_keys(list2)), old(_dryad_S7#5, sll_keys(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_list_len_next(list2)), old(_dryad_S7#5, sll_list_len_next(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list2)))), ==(old(_dryad_S6#4, rsrtl(list2)), old(_dryad_S7#5, rsrtl(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list2)))), ==(old(_dryad_S6#4, rsrtl_reach(list2)), old(_dryad_S7#5, rsrtl_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll(list2)), old(_dryad_S7#5, sll(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_reach(list2)), old(_dryad_S7#5, sll_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_max_key(list2)), old(_dryad_S7#5, sll_max_key(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list2)))), ==(old(_dryad_S6#4, sll_min_key(list2)), old(_dryad_S7#5, sll_min_key(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list2)))), ==(old(_dryad_S6#4, srtl(list2)), old(_dryad_S7#5, srtl(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list2)))), ==(old(_dryad_S6#4, srtl_reach(list2)), old(_dryad_S7#5, srtl_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_keys(list)), old(_dryad_S7#5, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_list_len_next(list)), old(_dryad_S7#5, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list)))), ==(old(_dryad_S6#4, rsrtl(list)), old(_dryad_S7#5, rsrtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list)))), ==(old(_dryad_S6#4, rsrtl_reach(list)), old(_dryad_S7#5, rsrtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll(list)), old(_dryad_S7#5, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_reach(list)), old(_dryad_S7#5, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_max_key(list)), old(_dryad_S7#5, sll_max_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list)))), ==(old(_dryad_S6#4, sll_min_key(list)), old(_dryad_S7#5, sll_min_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list)))), ==(old(_dryad_S6#4, srtl(list)), old(_dryad_S7#5, srtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list)))), ==(old(_dryad_S6#4, srtl_reach(list)), old(_dryad_S7#5, srtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_keys(list_next)), old(_dryad_S7#5, sll_keys(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_list_len_next(list_next)), old(_dryad_S7#5, sll_list_len_next(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list_next)))), ==(old(_dryad_S6#4, rsrtl(list_next)), old(_dryad_S7#5, rsrtl(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(list_next)))), ==(old(_dryad_S6#4, rsrtl_reach(list_next)), old(_dryad_S7#5, rsrtl_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll(list_next)), old(_dryad_S7#5, sll(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_reach(list_next)), old(_dryad_S7#5, sll_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_max_key(list_next)), old(_dryad_S7#5, sll_max_key(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(list_next)))), ==(old(_dryad_S6#4, sll_min_key(list_next)), old(_dryad_S7#5, sll_min_key(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list_next)))), ==(old(_dryad_S6#4, srtl(list_next)), old(_dryad_S7#5, srtl(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(list_next)))), ==(old(_dryad_S6#4, srtl_reach(list_next)), old(_dryad_S7#5, srtl_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_keys(local.l2)), old(_dryad_S7#5, sll_keys(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_list_len_next(local.l2)), old(_dryad_S7#5, sll_list_len_next(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#4, rsrtl(local.l2)), old(_dryad_S7#5, rsrtl(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#4, rsrtl_reach(local.l2)), old(_dryad_S7#5, rsrtl_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll(local.l2)), old(_dryad_S7#5, sll(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_reach(local.l2)), old(_dryad_S7#5, sll_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_max_key(local.l2)), old(_dryad_S7#5, sll_max_key(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l2)))), ==(old(_dryad_S6#4, sll_min_key(local.l2)), old(_dryad_S7#5, sll_min_key(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(local.l2)))), ==(old(_dryad_S6#4, srtl(local.l2)), old(_dryad_S7#5, srtl(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(local.l2)))), ==(old(_dryad_S6#4, srtl_reach(local.l2)), old(_dryad_S7#5, srtl_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_keys(local.l1)), old(_dryad_S7#5, sll_keys(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_list_len_next(local.l1)), old(_dryad_S7#5, sll_list_len_next(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#4, rsrtl(local.l1)), old(_dryad_S7#5, rsrtl(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#4, rsrtl_reach(local.l1)), old(_dryad_S7#5, rsrtl_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll(local.l1)), old(_dryad_S7#5, sll(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_reach(local.l1)), old(_dryad_S7#5, sll_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_max_key(local.l1)), old(_dryad_S7#5, sll_max_key(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_reach(local.l1)))), ==(old(_dryad_S6#4, sll_min_key(local.l1)), old(_dryad_S7#5, sll_min_key(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(local.l1)))), ==(old(_dryad_S6#4, srtl(local.l1)), old(_dryad_S7#5, srtl(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_reach(local.l1)))), ==(old(_dryad_S6#4, srtl_reach(local.l1)), old(_dryad_S7#5, srtl_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(_dryad_S6#4, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(_dryad_S7#5, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg(list, l)), old(_dryad_S7#5, sll_lseg(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_reach(list, l)), old(_dryad_S7#5, sll_lseg_reach(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_keys(list, l)), old(_dryad_S7#5, sll_lseg_keys(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_len_next(list, l)), old(_dryad_S7#5, sll_lseg_len_next(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_max_key(list, l)), old(_dryad_S7#5, sll_lseg_max_key(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#4, sll_lseg_min_key(list, l)), old(_dryad_S7#5, sll_lseg_min_key(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#4, srtl_lseg(list, l)), old(_dryad_S7#5, srtl_lseg(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#4, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#4, srtl_lseg_reach(list, l)), old(_dryad_S7#5, srtl_lseg_reach(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#4, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#5, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6#4, *((list2->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6#4, *((list2->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6#4, *((list->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6#4, *((list->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6#4, *((list_next->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6#4, *((list_next->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6#4, *((local.l2->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6#4, *((local.l2->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6#4, *((local.l1->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(_dryad_S6#4, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6#4, *((local.l1->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#4, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
    }
    else
    {
      anon8:
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg(list, l), &&(sll_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, sll_lseg_reach(*((list->next)), l)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_reach(list, l), @_vcc_oset_union(sll_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_keys(list, l), @_vcc_intset_union(sll_lseg_keys(*((list->next)), l), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(sll_lseg_len_next(list, l), unchecked+(sll_lseg_len_next(*((list->next)), l), 1))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), 1);
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_max_key(list, l), @\int_max(*((list->key)), sll_lseg_max_key(*((list->next)), l)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(sll_lseg_min_key(list, l), @\int_min(*((list->key)), sll_lseg_min_key(*((list->next)), l)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), @_vcc_ptr_neq_pure(*((list->next)), l)), ==(srtl_lseg(list, l), &&(&&(srtl_lseg(*((list->next)), l), unchecked!(@_vcc_oset_in(list, srtl_lseg_reach(*((list->next)), l)))), <=(*((list->key)), sll_lseg_min_key(*((list->next)), l))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_pure(list, l)), ==(srtl_lseg_reach(list, l), @_vcc_oset_union(srtl_lseg_reach(*((list->next)), l), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $phys_ptr_cast(L#list, ^s_node) != $phys_ptr_cast(L#l, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node), $phys_ptr_cast(L#l, ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // _math \state _dryad_S6#6; 
        // _dryad_S6#6 := @_vcc_current_state(@state); 
        _dryad_S6#6 := $current_state($s);
        // _math \state stmtexpr0#20; 
        // stmtexpr0#20 := _dryad_S6#6; 
        stmtexpr0#20 := _dryad_S6#6;
        // assert @prim_writes_check((l->next)); 
        assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#l, ^s_node), s_node.next));
        // *(l->next) := local.l2; 
        call $write_int(s_node.next, $phys_ptr_cast(L#l, ^s_node), $ptr_to_int($phys_ptr_cast(local.l2, ^s_node)));
        assume $full_stop_ext(#tok$3^85.3, $s);
        // _math \state _dryad_S7#7; 
        // _dryad_S7#7 := @_vcc_current_state(@state); 
        _dryad_S7#7 := $current_state($s);
        // _math \state stmtexpr1#21; 
        // stmtexpr1#21 := _dryad_S7#7; 
        stmtexpr1#21 := _dryad_S7#7;
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_keys(list2)), old(_dryad_S7#7, sll_keys(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_list_len_next(list2)), old(_dryad_S7#7, sll_list_len_next(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list2)))), ==(old(_dryad_S6#6, rsrtl(list2)), old(_dryad_S7#7, rsrtl(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list2)))), ==(old(_dryad_S6#6, rsrtl_reach(list2)), old(_dryad_S7#7, rsrtl_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll(list2)), old(_dryad_S7#7, sll(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_reach(list2)), old(_dryad_S7#7, sll_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_max_key(list2)), old(_dryad_S7#7, sll_max_key(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list2)))), ==(old(_dryad_S6#6, sll_min_key(list2)), old(_dryad_S7#7, sll_min_key(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list2)))), ==(old(_dryad_S6#6, srtl(list2)), old(_dryad_S7#7, srtl(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list2)))), ==(old(_dryad_S6#6, srtl_reach(list2)), old(_dryad_S7#7, srtl_reach(list2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(SL#list2, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_keys(list)), old(_dryad_S7#7, sll_keys(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_list_len_next(list)), old(_dryad_S7#7, sll_list_len_next(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list)))), ==(old(_dryad_S6#6, rsrtl(list)), old(_dryad_S7#7, rsrtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list)))), ==(old(_dryad_S6#6, rsrtl_reach(list)), old(_dryad_S7#7, rsrtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll(list)), old(_dryad_S7#7, sll(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_reach(list)), old(_dryad_S7#7, sll_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_max_key(list)), old(_dryad_S7#7, sll_max_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list)))), ==(old(_dryad_S6#6, sll_min_key(list)), old(_dryad_S7#7, sll_min_key(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list)))), ==(old(_dryad_S6#6, srtl(list)), old(_dryad_S7#7, srtl(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list)))), ==(old(_dryad_S6#6, srtl_reach(list)), old(_dryad_S7#7, srtl_reach(list)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_keys(list_next)), old(_dryad_S7#7, sll_keys(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_list_len_next(list_next)), old(_dryad_S7#7, sll_list_len_next(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list_next)))), ==(old(_dryad_S6#6, rsrtl(list_next)), old(_dryad_S7#7, rsrtl(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(list_next)))), ==(old(_dryad_S6#6, rsrtl_reach(list_next)), old(_dryad_S7#7, rsrtl_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll(list_next)), old(_dryad_S7#7, sll(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_reach(list_next)), old(_dryad_S7#7, sll_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_max_key(list_next)), old(_dryad_S7#7, sll_max_key(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(list_next)))), ==(old(_dryad_S6#6, sll_min_key(list_next)), old(_dryad_S7#7, sll_min_key(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list_next)))), ==(old(_dryad_S6#6, srtl(list_next)), old(_dryad_S7#7, srtl(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(list_next)))), ==(old(_dryad_S6#6, srtl_reach(list_next)), old(_dryad_S7#7, srtl_reach(list_next)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(L#list_next, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_keys(local.l2)), old(_dryad_S7#7, sll_keys(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_list_len_next(local.l2)), old(_dryad_S7#7, sll_list_len_next(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#6, rsrtl(local.l2)), old(_dryad_S7#7, rsrtl(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(local.l2)))), ==(old(_dryad_S6#6, rsrtl_reach(local.l2)), old(_dryad_S7#7, rsrtl_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll(local.l2)), old(_dryad_S7#7, sll(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_reach(local.l2)), old(_dryad_S7#7, sll_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_max_key(local.l2)), old(_dryad_S7#7, sll_max_key(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l2)))), ==(old(_dryad_S6#6, sll_min_key(local.l2)), old(_dryad_S7#7, sll_min_key(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(local.l2)))), ==(old(_dryad_S6#6, srtl(local.l2)), old(_dryad_S7#7, srtl(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(local.l2)))), ==(old(_dryad_S6#6, srtl_reach(local.l2)), old(_dryad_S7#7, srtl_reach(local.l2)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l2, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_keys(local.l1)), old(_dryad_S7#7, sll_keys(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_keys(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_keys(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_list_len_next(local.l1)), old(_dryad_S7#7, sll_list_len_next(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_list_len_next(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#6, rsrtl(local.l1)), old(_dryad_S7#7, rsrtl(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, rsrtl_reach(local.l1)))), ==(old(_dryad_S6#6, rsrtl_reach(local.l1)), old(_dryad_S7#7, rsrtl_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#rsrtl_reach(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll(local.l1)), old(_dryad_S7#7, sll(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_reach(local.l1)), old(_dryad_S7#7, sll_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_reach(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_max_key(local.l1)), old(_dryad_S7#7, sll_max_key(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_max_key(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_max_key(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_reach(local.l1)))), ==(old(_dryad_S6#6, sll_min_key(local.l1)), old(_dryad_S7#7, sll_min_key(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#sll_min_key(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#sll_min_key(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(local.l1)))), ==(old(_dryad_S6#6, srtl(local.l1)), old(_dryad_S7#7, srtl(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_reach(local.l1)))), ==(old(_dryad_S6#6, srtl_reach(local.l1)), old(_dryad_S7#7, srtl_reach(local.l1)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node))) ==> F#srtl_reach(_dryad_S6#6, $phys_ptr_cast(local.l1, ^s_node)) == F#srtl_reach(_dryad_S7#7, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg(list, l)), old(_dryad_S7#7, sll_lseg(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_reach(list, l)), old(_dryad_S7#7, sll_lseg_reach(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_keys(list, l)), old(_dryad_S7#7, sll_lseg_keys(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_keys(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_keys(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_len_next(list, l)), old(_dryad_S7#7, sll_lseg_len_next(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_len_next(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_len_next(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_max_key(list, l)), old(_dryad_S7#7, sll_lseg_max_key(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_max_key(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_max_key(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, sll_lseg_reach(list, l)))), ==(old(_dryad_S6#6, sll_lseg_min_key(list, l)), old(_dryad_S7#7, sll_lseg_min_key(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#sll_lseg_min_key(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#sll_lseg_min_key(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#6, srtl_lseg(list, l)), old(_dryad_S7#7, srtl_lseg(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S6#6, srtl_lseg_reach(list, l)))), ==(old(_dryad_S6#6, srtl_lseg_reach(list, l)), old(_dryad_S7#7, srtl_lseg_reach(list, l)))); 
        assume !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node))) ==> F#srtl_lseg_reach(_dryad_S6#6, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node)) == F#srtl_lseg_reach(_dryad_S7#7, $phys_ptr_cast(L#list, ^s_node), $phys_ptr_cast(L#l, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), ==(*((list2->key)), old(_dryad_S6#6, *((list2->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(SL#list2, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list2)), @_vcc_ptr_eq_pure(*((list2->next)), old(_dryad_S6#6, *((list2->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(SL#list2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), ==(*((list->key)), old(_dryad_S6#6, *((list->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(L#list, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list)), @_vcc_ptr_eq_pure(*((list->next)), old(_dryad_S6#6, *((list->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), ==(*((list_next->key)), old(_dryad_S6#6, *((list_next->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(L#list_next, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, list_next)), @_vcc_ptr_eq_pure(*((list_next->next)), old(_dryad_S6#6, *((list_next->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(L#list_next, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), ==(*((local.l2->key)), old(_dryad_S6#6, *((local.l2->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(local.l2, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l2)), @_vcc_ptr_eq_pure(*((local.l2->next)), old(_dryad_S6#6, *((local.l2->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node);
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), ==(*((local.l1->key)), old(_dryad_S6#6, *((local.l1->key))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) == $rd_inv(_dryad_S6#6, s_node.key, $phys_ptr_cast(local.l1, ^s_node));
        // assume ==>(!(@_vcc_ptr_eq_pure(l, local.l1)), @_vcc_ptr_eq_pure(*((local.l1->next)), old(_dryad_S6#6, *((local.l1->next))))); 
        assume !($phys_ptr_cast(L#l, ^s_node) == $phys_ptr_cast(local.l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S6#6, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node);
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_keys(list2), @_vcc_intset_union(sll_keys(*((list2->next))), @_vcc_intset_singleton(*((list2->key)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#list2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_list_len_next(list2), unchecked+(sll_list_len_next(*((list2->next))), 1))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#list2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(rsrtl(list2), &&(&&(rsrtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, rsrtl_reach(*((list2->next)))))), >=(*((list2->key)), sll_max_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(rsrtl_reach(list2), @_vcc_oset_union(rsrtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll(list2), &&(sll(*((list2->next))), unchecked!(@_vcc_oset_in(list2, sll_reach(*((list2->next)))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(sll_reach(list2), @_vcc_oset_union(sll_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_max_key(list2), @\int_max(*((list2->key)), sll_max_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(sll_min_key(list2), @\int_min(*((list2->key)), sll_min_key(*((list2->next)))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#list2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list2), @_vcc_ptr_neq_null(*((list2->next)))), ==(srtl(list2), &&(&&(srtl(*((list2->next))), unchecked!(@_vcc_oset_in(list2, srtl_reach(*((list2->next)))))), <=(*((list2->key)), sll_min_key(*((list2->next))))))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#list2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#list2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#list2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list2), ==(srtl_reach(list2), @_vcc_oset_union(srtl_reach(*((list2->next))), @_vcc_oset_singleton(list2)))); 
        assume $non_null($phys_ptr_cast(SL#list2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#list2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#list2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#list2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_keys(list), @_vcc_intset_union(sll_keys(*((list->next))), @_vcc_intset_singleton(*((list->key)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_list_len_next(list), unchecked+(sll_list_len_next(*((list->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(rsrtl(list), &&(&&(rsrtl(*((list->next))), unchecked!(@_vcc_oset_in(list, rsrtl_reach(*((list->next)))))), >=(*((list->key)), sll_max_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(rsrtl_reach(list), @_vcc_oset_union(rsrtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll(list), &&(sll(*((list->next))), unchecked!(@_vcc_oset_in(list, sll_reach(*((list->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(sll_reach(list), @_vcc_oset_union(sll_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_max_key(list), @\int_max(*((list->key)), sll_max_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(sll_min_key(list), @\int_min(*((list->key)), sll_min_key(*((list->next)))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list), @_vcc_ptr_neq_null(*((list->next)))), ==(srtl(list), &&(&&(srtl(*((list->next))), unchecked!(@_vcc_oset_in(list, srtl_reach(*((list->next)))))), <=(*((list->key)), sll_min_key(*((list->next))))))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list), ==(srtl_reach(list), @_vcc_oset_union(srtl_reach(*((list->next))), @_vcc_oset_singleton(list)))); 
        assume $non_null($phys_ptr_cast(L#list, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_keys(list_next), @_vcc_intset_union(sll_keys(*((list_next->next))), @_vcc_intset_singleton(*((list_next->key)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#list_next, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_list_len_next(list_next), unchecked+(sll_list_len_next(*((list_next->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#list_next, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(rsrtl(list_next), &&(&&(rsrtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, rsrtl_reach(*((list_next->next)))))), >=(*((list_next->key)), sll_max_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(rsrtl_reach(list_next), @_vcc_oset_union(rsrtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll(list_next), &&(sll(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, sll_reach(*((list_next->next)))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(sll_reach(list_next), @_vcc_oset_union(sll_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_max_key(list_next), @\int_max(*((list_next->key)), sll_max_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(sll_min_key(list_next), @\int_min(*((list_next->key)), sll_min_key(*((list_next->next)))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#list_next, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(list_next), @_vcc_ptr_neq_null(*((list_next->next)))), ==(srtl(list_next), &&(&&(srtl(*((list_next->next))), unchecked!(@_vcc_oset_in(list_next, srtl_reach(*((list_next->next)))))), <=(*((list_next->key)), sll_min_key(*((list_next->next))))))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#list_next, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#list_next, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#list_next, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(list_next), ==(srtl_reach(list_next), @_vcc_oset_union(srtl_reach(*((list_next->next))), @_vcc_oset_singleton(list_next)))); 
        assume $non_null($phys_ptr_cast(L#list_next, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#list_next, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#list_next, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#list_next, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_keys(local.l1), @_vcc_intset_union(sll_keys(*((local.l1->next))), @_vcc_intset_singleton(*((local.l1->key)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_list_len_next(local.l1), unchecked+(sll_list_len_next(*((local.l1->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(rsrtl(local.l1), &&(&&(rsrtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, rsrtl_reach(*((local.l1->next)))))), >=(*((local.l1->key)), sll_max_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(rsrtl_reach(local.l1), @_vcc_oset_union(rsrtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll(local.l1), &&(sll(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, sll_reach(*((local.l1->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(sll_reach(local.l1), @_vcc_oset_union(sll_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_max_key(local.l1), @\int_max(*((local.l1->key)), sll_max_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(sll_min_key(local.l1), @\int_min(*((local.l1->key)), sll_min_key(*((local.l1->next)))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l1), @_vcc_ptr_neq_null(*((local.l1->next)))), ==(srtl(local.l1), &&(&&(srtl(*((local.l1->next))), unchecked!(@_vcc_oset_in(local.l1, srtl_reach(*((local.l1->next)))))), <=(*((local.l1->key)), sll_min_key(*((local.l1->next))))))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l1), ==(srtl_reach(local.l1), @_vcc_oset_union(srtl_reach(*((local.l1->next))), @_vcc_oset_singleton(local.l1)))); 
        assume $non_null($phys_ptr_cast(local.l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l1, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
        assume $non_null($phys_ptr_cast(L#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#l, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_keys(local.l2), @_vcc_intset_union(sll_keys(*((local.l2->next))), @_vcc_intset_singleton(*((local.l2->key)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(local.l2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_list_len_next(local.l2), unchecked+(sll_list_len_next(*((local.l2->next))), 1))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(local.l2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), 1);
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(rsrtl(local.l2), &&(&&(rsrtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, rsrtl_reach(*((local.l2->next)))))), >=(*((local.l2->key)), sll_max_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(rsrtl_reach(local.l2), @_vcc_oset_union(rsrtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll(local.l2), &&(sll(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, sll_reach(*((local.l2->next)))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(sll_reach(local.l2), @_vcc_oset_union(sll_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_max_key(local.l2), @\int_max(*((local.l2->key)), sll_max_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(sll_min_key(local.l2), @\int_min(*((local.l2->key)), sll_min_key(*((local.l2->next)))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(local.l2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(&&(@_vcc_ptr_neq_null(local.l2), @_vcc_ptr_neq_null(*((local.l2->next)))), ==(srtl(local.l2), &&(&&(srtl(*((local.l2->next))), unchecked!(@_vcc_oset_in(local.l2, srtl_reach(*((local.l2->next)))))), <=(*((local.l2->key)), sll_min_key(*((local.l2->next))))))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(local.l2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(local.l2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(local.l2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)));
        // assume ==>(@_vcc_ptr_neq_null(local.l2), ==(srtl_reach(local.l2), @_vcc_oset_union(srtl_reach(*((local.l2->next))), @_vcc_oset_singleton(local.l2)))); 
        assume $non_null($phys_ptr_cast(local.l2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(local.l2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(local.l2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(local.l2, ^s_node)));
    }

  anon11:
    // return list_next; 
    $result := $phys_ptr_cast(L#list_next, ^s_node);
    assume true;
    assert $position_marker();
    goto #exit;

  anon12:
    // skip

  #exit:
}



axiom (forall Q#__vcc_state$2^687.9#tc2#1700: $state, Q#x$2^687.9#dt1#1624: $ptr :: {:weight 10} { F#srtl(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) } { F#sll(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) } $good_state(Q#__vcc_state$2^687.9#tc2#1700) && true ==> F#srtl(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) ==> F#sll(Q#__vcc_state$2^687.9#tc2#1700, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)));

axiom (forall Q#__vcc_state$2^688.9#tc2#1701: $state, Q#x$2^688.9#dt1#1625: $ptr :: {:weight 10} { F#rsrtl(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) } { F#sll(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) } $good_state(Q#__vcc_state$2^688.9#tc2#1701) && true ==> F#rsrtl(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) ==> F#sll(Q#__vcc_state$2^688.9#tc2#1701, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)));

axiom (forall Q#__vcc_state$2^689.9#tc2#1702: $state, Q#x$2^689.9#dt1#1626: $ptr :: {:weight 10} { F#sll_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) } { F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) } $good_state(Q#__vcc_state$2^689.9#tc2#1702) && true ==> F#sll_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) == F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1702, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)));

axiom (forall Q#__vcc_state$2^690.9#tc2#1703: $state, Q#x$2^690.9#dt1#1627: $ptr :: {:weight 10} { F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) } { F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) } $good_state(Q#__vcc_state$2^690.9#tc2#1703) && true ==> F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) == F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1703, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)));

axiom (forall Q#__vcc_state$2^691.9#tc2#1704: $state, Q#x$2^691.9#dt1#1628: $ptr, Q#y$2^691.9#dt1#1629: $ptr :: {:weight 10} { F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) } { F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) } $good_state(Q#__vcc_state$2^691.9#tc2#1704) && true ==> F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) == F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1704, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)));

const unique l#public: $label;

axiom $type_code_is(2, ^$#state_t);

const unique #tok$3^85.3: $token;

const unique #tok$3^83.3: $token;

const unique #tok$3^80.3: $token;

const unique #tok$3^74.4: $token;

const unique #tok$3^70.4: $token;

const unique #tok$3^33.2: $token;

const unique #tok$3^27.2: $token;

const unique #tok$3^26.2: $token;

const unique #tok$3^18.9: $token;

const unique #tok$3^13.56: $token;

const unique #tok$3^13.41: $token;

const unique #tok$3^12.62: $token;

const unique #tok$3^12.48: $token;

const unique #tok$3^11.23: $token;

const unique #tok$3^10.23: $token;

const unique #tok$4^0.0: $token;

const unique #file^?3Cno?20file?3E: $token;

axiom $file_name_is(4, #file^?3Cno?20file?3E);

const unique #tok$3^3.3: $token;

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgslist?5Cg_slist_sort_merge.c: $token;

axiom $file_name_is(3, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgslist?5Cg_slist_sort_merge.c);

const unique #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgslist?5Cdryad_gslist.h: $token;

axiom $file_name_is(2, #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgslist?5Cdryad_gslist.h);

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h: $token;

axiom $file_name_is(1, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h);

const unique #distTp1: $ctype;

axiom #distTp1 == $ptr_to(^s_node);
