axiom $arch_ptr_size == 8;

axiom $arch_spec_ptr_start == $max.u8;

const unique ^$##thread_id: $ctype;

axiom $def_math_type(^$##thread_id);

type $##thread_id;

const unique ^$##club: $ctype;

axiom $def_math_type(^$##club);

type $##club;

const unique ^s_node: $ctype;

axiom $is_span_sequential(^s_node);

axiom $def_struct_type(^s_node, 16, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^s_node) } $inv2(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^s_node) } $inv2_without_lemmas(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^s_node)) } $in(q, $composite_extent(s, p, ^s_node)) == (q == p));

const unique s_node.key: $field;

axiom $def_phys_field(^s_node, s_node.key, ^^i4, false, 0);

const unique s_node.next: $field;

axiom $def_phys_field(^s_node, s_node.next, $ptr_to(^s_node), false, 8);

function F#glob_reach() : $oset;

const unique cf#glob_reach: $pure_function;

axiom $function_arg_type(cf#glob_reach, 0, ^$#oset);

procedure glob_reach() returns ($result: $oset);
  free ensures $result == F#glob_reach();
  free ensures $call_transition(old($s), $s);



const unique ^$#_purecall_handler#1: $ctype;

axiom $def_fnptr_type(^$#_purecall_handler#1);

type $#_purecall_handler#1;

const unique ^$#_invalid_parameter_handler#2: $ctype;

axiom $def_fnptr_type(^$#_invalid_parameter_handler#2);

type $#_invalid_parameter_handler#2;

const unique ^$#quick_sort.c..36263#3: $ctype;

axiom $def_fnptr_type(^$#quick_sort.c..36263#3);

type $#quick_sort.c..36263#3;

const unique ^$#_PtFuncCompare#4: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#4);

type $#_PtFuncCompare#4;

const unique ^$#_PtFuncCompare#5: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#5);

type $#_PtFuncCompare#5;

const unique ^$#_PtFuncCompare#6: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#6);

type $#_PtFuncCompare#6;

const unique ^$#_PtFuncCompare#7: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#7);

type $#_PtFuncCompare#7;

const unique ^$#_onexit_t#8: $ctype;

axiom $def_fnptr_type(^$#_onexit_t#8);

type $#_onexit_t#8;

function F##int_max(SP#x: int, SP#y: int) : int;

const unique cf##int_max: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_max(SP#x, SP#y) } $in_range_i4(F##int_max(SP#x, SP#y)));

axiom $function_arg_type(cf##int_max, 0, ^^i4);

axiom $function_arg_type(cf##int_max, 1, ^^i4);

axiom $function_arg_type(cf##int_max, 2, ^^i4);

procedure #int_max(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_max(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F##int_min(SP#x: int, SP#y: int) : int;

const unique cf##int_min: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_min(SP#x, SP#y) } $in_range_i4(F##int_min(SP#x, SP#y)));

axiom $function_arg_type(cf##int_min, 0, ^^i4);

axiom $function_arg_type(cf##int_min, 1, ^^i4);

axiom $function_arg_type(cf##int_min, 2, ^^i4);

procedure #int_min(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_min(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F#sll(#s: $state, SP#hd: $ptr) : bool;

const unique cf#sll: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll(#s, SP#hd) } 1 < $decreases_level ==> $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll(#s, SP#hd));

axiom $function_arg_type(cf#sll, 0, ^^bool);

axiom $function_arg_type(cf#sll, 1, $ptr_to(^s_node));

procedure sll(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  free ensures $result == F#sll($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#srtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#srtl(#s, SP#hd)));

axiom $function_arg_type(cf#srtl, 0, ^^bool);

axiom $function_arg_type(cf#srtl, 1, $ptr_to(^s_node));

procedure srtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#srtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#rsrtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#rsrtl(#s, SP#hd)));

axiom $function_arg_type(cf#rsrtl, 0, ^^bool);

axiom $function_arg_type(cf#rsrtl, 1, $ptr_to(^s_node));

procedure rsrtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#rsrtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#sll_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#sll_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_reach, 1, $ptr_to(^s_node));

procedure sll_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#sll_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#srtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#srtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_reach, 1, $ptr_to(^s_node));

procedure srtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#srtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#rsrtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#rsrtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#rsrtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#rsrtl_reach, 1, $ptr_to(^s_node));

procedure rsrtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#rsrtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_keys(#s: $state, SP#hd: $ptr) : $intset;

const unique cf#sll_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_keys(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_keys(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_keys(#s, SP#hd) == $intset_empty()));

axiom $function_arg_type(cf#sll_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_keys, 1, $ptr_to(^s_node));

procedure sll_keys(SP#hd: $ptr) returns ($result: $intset);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $intset_empty();
  free ensures $result == F#sll_keys($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_min_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_min_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_min_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_min_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_min_key, 1, $ptr_to(^s_node));

procedure sll_min_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_min_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_max_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_max_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_max_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_max_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_max_key, 1, $ptr_to(^s_node));

procedure sll_max_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_max_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_list_len_next(#s: $state, SP#x: $ptr) : int;

const unique cf#sll_list_len_next: $pure_function;

axiom (forall #s: $state, SP#x: $ptr :: { F#sll_list_len_next(#s, SP#x) } 1 < $decreases_level ==> $in_range_nat(F#sll_list_len_next(#s, SP#x)) && ($non_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) > 0) && ($is_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) == 0));

axiom $function_arg_type(cf#sll_list_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_list_len_next, 1, $ptr_to(^s_node));

procedure sll_list_len_next(SP#x: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $non_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result > 0;
  ensures $is_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result == 0;
  free ensures $result == F#sll_list_len_next($s, SP#x);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#sll_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg(#s, SP#hd, SP#tl) == F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg(#s, SP#hd, SP#tl)) && (F#sll_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && F#sll(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1)));

axiom $function_arg_type(cf#sll_lseg, 0, ^^bool);

axiom $function_arg_type(cf#sll_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg, 2, $ptr_to(^s_node));

procedure sll_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#sll($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1);
  free ensures $result == F#sll_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#srtl_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, SP#hd, SP#tl) == F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && (F#srtl_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && F#srtl(#s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key(#s, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))));

axiom $function_arg_type(cf#srtl_lseg, 0, ^^bool);

axiom $function_arg_type(cf#srtl_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg, 2, $ptr_to(^s_node));

procedure srtl_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#srtl($s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key($s, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  free ensures $result == F#srtl_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#sll_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_reach, 2, $ptr_to(^s_node));

procedure sll_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#sll_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#srtl_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#srtl_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg_reach, 2, $ptr_to(^s_node));

procedure srtl_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#srtl_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_keys(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $intset;

const unique cf#sll_lseg_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_keys(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == $intset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_lseg_keys(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_lseg_keys, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_keys, 2, $ptr_to(^s_node));

procedure sll_lseg_keys(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $intset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $intset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  free ensures $result == F#sll_lseg_keys($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_min_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_min_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_min_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_min_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_min_key, 2, $ptr_to(^s_node));

procedure sll_lseg_min_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_min_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_max_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_max_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_max_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_max_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_max_key, 2, $ptr_to(^s_node));

procedure sll_lseg_max_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_max_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_len_next(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_len_next: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_len_next(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_nat(F#sll_lseg_len_next(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == 0) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) > 0));

axiom $function_arg_type(cf#sll_lseg_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_lseg_len_next, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_len_next, 2, $ptr_to(^s_node));

procedure sll_lseg_len_next(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == 0;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $result > 0;
  free ensures $result == F#sll_lseg_len_next($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



procedure concat_sorted(P#l1: $ptr, P#l2: $ptr) returns ($result: $ptr);
  requires F#srtl($s, $phys_ptr_cast(P#l1, ^s_node));
  requires F#srtl($s, $phys_ptr_cast(P#l2, ^s_node));
  requires $oset_disjoint(F#sll_reach($s, $phys_ptr_cast(P#l1, ^s_node)), F#sll_reach($s, $phys_ptr_cast(P#l2, ^s_node)));
  requires $non_null($phys_ptr_cast(P#l1, ^s_node)) && $non_null($phys_ptr_cast(P#l2, ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#l1, ^s_node)) <= F#sll_min_key($s, $phys_ptr_cast(P#l2, ^s_node));
  modifies $s, $cev_pc;
  ensures F#srtl($s, $phys_ptr_cast($result, ^s_node));
  ensures F#sll_keys($s, $phys_ptr_cast($result, ^s_node)) == $intset_union(F#sll_keys(old($s), $phys_ptr_cast(P#l1, ^s_node)), F#sll_keys(old($s), $phys_ptr_cast(P#l2, ^s_node)));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



procedure quick_sort(P#l: $ptr) returns ($result: $ptr);
  requires F#sll($s, $phys_ptr_cast(P#l, ^s_node));
  modifies $s, $cev_pc;
  ensures F#srtl($s, $phys_ptr_cast($result, ^s_node));
  ensures F#sll_keys($s, $phys_ptr_cast($result, ^s_node)) == F#sll_keys(old($s), $phys_ptr_cast(P#l, ^s_node));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



implementation quick_sort(P#l: $ptr) returns ($result: $ptr)
{
  var res_concat_sorted#4: $ptr;
  var stmtexpr13#23: $oset;
  var res_srtl_reach#3: $oset;
  var stmtexpr12#22: $state;
  var SL#_dryad_S7: $state;
  var stmtexpr11#21: $state;
  var SL#_dryad_S6: $state;
  var stmtexpr10#20: $oset;
  var res_srtl_reach#2: $oset;
  var stmtexpr9#19: $state;
  var SL#_dryad_S5: $state;
  var stmtexpr8#18: $state;
  var SL#_dryad_S4: $state;
  var stmtexpr7#17: $state;
  var _dryad_S3#3: $state;
  var stmtexpr6#16: $state;
  var _dryad_S2#2: $state;
  var stmtexpr1#8: $state;
  var _dryad_S3#1: $state;
  var stmtexpr0#7: $state;
  var _dryad_S2#0: $state;
  var stmtexpr1#6: $state;
  var SL#_dryad_S3: $state;
  var stmtexpr0#5: $state;
  var SL#_dryad_S2: $state;
  var stmtexpr0#9: $ptr;
  var SL#curr3: $ptr;
  var loopState#0: $state;
  var stmtexpr5#15: $state;
  var SL#_dryad_S1: $state;
  var stmtexpr4#14: $state;
  var SL#_dryad_S0: $state;
  var stmtexpr3#13: $ptr;
  var SL#l1: $ptr;
  var stmtexpr2#12: $ptr;
  var SL#l0: $ptr;
  var SL#ALL_REACH: $oset;
  var SL#old_sll_keys: $intset;
  var L#curr: $ptr;
  var L#pivot: int where $in_range_i4(L#pivot);
  var L#lpt: $ptr;
  var L#rpt: $ptr;
  var L#tmp: $ptr;
  var L#t2: $ptr;
  var L#t1: $ptr;
  var stmtexpr1#11: $oset;
  var stmtexpr0#10: $oset;
  var SL#_dryad_G1: $oset;
  var SL#_dryad_G0: $oset;
  var #wrTime$3^10.3: int;
  var #stackframe: int;

  anon11:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$3^10.3, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$3^10.3 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$3^10.3, (lambda #p: $ptr :: false));
    // assume true
    // assume @decreases_level_is(2147483647); 
    assume 2147483647 == $decreases_level;
    //  --- Dryad annotated function --- 
    // _math \oset _dryad_G0; 
    // _math \oset _dryad_G1; 
    // _dryad_G0 := sll_reach(l); 
    call SL#_dryad_G0 := sll_reach($phys_ptr_cast(P#l, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset stmtexpr0#10; 
    // stmtexpr0#10 := _dryad_G0; 
    stmtexpr0#10 := SL#_dryad_G0;
    // _dryad_G1 := _dryad_G0; 
    SL#_dryad_G1 := SL#_dryad_G0;
    // _math \oset stmtexpr1#11; 
    // stmtexpr1#11 := _dryad_G1; 
    stmtexpr1#11 := SL#_dryad_G1;
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // struct s_node* t1; 
    // struct s_node* t2; 
    // struct s_node* tmp; 
    // struct s_node* rpt; 
    // struct s_node* lpt; 
    // int32_t pivot; 
    // struct s_node* curr; 
    // _math \intset old_sll_keys; 
    // _math \oset ALL_REACH; 
    // ALL_REACH := sll_reach(l); 
    call SL#ALL_REACH := sll_reach($phys_ptr_cast(P#l, ^s_node));
    assume $full_stop_ext(#tok$3^17.29, $s);
    // old_sll_keys := sll_keys(l); 
    call SL#old_sll_keys := sll_keys($phys_ptr_cast(P#l, ^s_node));
    assume $full_stop_ext(#tok$3^18.34, $s);
    assume true;
    // if (@_vcc_ptr_eq_null(l)) ...
    if ($is_null($phys_ptr_cast(P#l, ^s_node)))
    {
      anon1:
        // return l; 
        $result := $phys_ptr_cast(P#l, ^s_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon2:
        // assert @_vcc_possibly_unreachable; 
        assert {:PossiblyUnreachable true} true;
    }

  anon12:
    // assume ==>(@_vcc_ptr_neq_null(l), &&(@_vcc_mutable(@state, l), @writes_check(l))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> $mutable($s, $phys_ptr_cast(P#l, ^s_node)) && $top_writable($s, #wrTime$3^10.3, $phys_ptr_cast(P#l, ^s_node));
    // struct s_node* l0; 
    // l0 := l; 
    SL#l0 := $phys_ptr_cast(P#l, ^s_node);
    // struct s_node* stmtexpr2#12; 
    // stmtexpr2#12 := l0; 
    stmtexpr2#12 := $phys_ptr_cast(SL#l0, ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assert @reads_check_normal((l->next)); 
    assert $thread_local($s, $phys_ptr_cast(P#l, ^s_node));
    // curr := *((l->next)); 
    L#curr := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_keys(curr), @_vcc_intset_union(sll_keys(*((curr->next))), @_vcc_intset_singleton(*((curr->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_list_len_next(curr), unchecked+(sll_list_len_next(*((curr->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(rsrtl(curr), &&(&&(rsrtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, rsrtl_reach(*((curr->next)))))), >=(*((curr->key)), sll_max_key(*((curr->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(rsrtl_reach(curr), @_vcc_oset_union(rsrtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll(curr), &&(sll(*((curr->next))), unchecked!(@_vcc_oset_in(curr, sll_reach(*((curr->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_reach(curr), @_vcc_oset_union(sll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_max_key(curr), @\int_max(*((curr->key)), sll_max_key(*((curr->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_min_key(curr), @\int_min(*((curr->key)), sll_min_key(*((curr->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(srtl(curr), &&(&&(srtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, srtl_reach(*((curr->next)))))), <=(*((curr->key)), sll_min_key(*((curr->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(srtl_reach(curr), @_vcc_oset_union(srtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), &&(==(@_vcc_mutable(@state, l), @_vcc_mutable(@state, *((l->next)))), ==(@writes_check(l), @writes_check(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> $mutable($s, $phys_ptr_cast(P#l, ^s_node)) == $mutable($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && $top_writable($s, #wrTime$3^10.3, $phys_ptr_cast(P#l, ^s_node)) == $top_writable($s, #wrTime$3^10.3, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node));
    // struct s_node* l1; 
    // l1 := l; 
    SL#l1 := $phys_ptr_cast(P#l, ^s_node);
    // struct s_node* stmtexpr3#13; 
    // stmtexpr3#13 := l1; 
    stmtexpr3#13 := $phys_ptr_cast(SL#l1, ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assert @reads_check_normal((l->key)); 
    assert $thread_local($s, $phys_ptr_cast(P#l, ^s_node));
    // pivot := *((l->key)); 
    L#pivot := $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // _math \state _dryad_S0; 
    // _dryad_S0 := @_vcc_current_state(@state); 
    SL#_dryad_S0 := $current_state($s);
    // _math \state stmtexpr4#14; 
    // stmtexpr4#14 := _dryad_S0; 
    stmtexpr4#14 := SL#_dryad_S0;
    // assert @prim_writes_check((l->next)); 
    assert $writable_prim($s, #wrTime$3^10.3, $dot($phys_ptr_cast(P#l, ^s_node), s_node.next));
    // *(l->next) := (struct s_node*)@null; 
    call $write_int(s_node.next, $phys_ptr_cast(P#l, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
    assume $full_stop_ext(#tok$3^28.2, $s);
    // _math \state _dryad_S1; 
    // _dryad_S1 := @_vcc_current_state(@state); 
    SL#_dryad_S1 := $current_state($s);
    // _math \state stmtexpr5#15; 
    // stmtexpr5#15 := _dryad_S1; 
    stmtexpr5#15 := SL#_dryad_S1;
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(l1)))), ==(old(_dryad_S0, sll_keys(l1)), old(_dryad_S1, sll_keys(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(l1)))), ==(old(_dryad_S0, sll_list_len_next(l1)), old(_dryad_S1, sll_list_len_next(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, rsrtl_reach(l1)))), ==(old(_dryad_S0, rsrtl(l1)), old(_dryad_S1, rsrtl(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, rsrtl_reach(l1)))), ==(old(_dryad_S0, rsrtl_reach(l1)), old(_dryad_S1, rsrtl_reach(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(l1)))), ==(old(_dryad_S0, sll(l1)), old(_dryad_S1, sll(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(l1)))), ==(old(_dryad_S0, sll_reach(l1)), old(_dryad_S1, sll_reach(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(l1)))), ==(old(_dryad_S0, sll_max_key(l1)), old(_dryad_S1, sll_max_key(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(l1)))), ==(old(_dryad_S0, sll_min_key(l1)), old(_dryad_S1, sll_min_key(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, srtl_reach(l1)))), ==(old(_dryad_S0, srtl(l1)), old(_dryad_S1, srtl(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, srtl_reach(l1)))), ==(old(_dryad_S0, srtl_reach(l1)), old(_dryad_S1, srtl_reach(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l1, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(l0)))), ==(old(_dryad_S0, sll_keys(l0)), old(_dryad_S1, sll_keys(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(l0)))), ==(old(_dryad_S0, sll_list_len_next(l0)), old(_dryad_S1, sll_list_len_next(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, rsrtl_reach(l0)))), ==(old(_dryad_S0, rsrtl(l0)), old(_dryad_S1, rsrtl(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, rsrtl_reach(l0)))), ==(old(_dryad_S0, rsrtl_reach(l0)), old(_dryad_S1, rsrtl_reach(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(l0)))), ==(old(_dryad_S0, sll(l0)), old(_dryad_S1, sll(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(l0)))), ==(old(_dryad_S0, sll_reach(l0)), old(_dryad_S1, sll_reach(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(l0)))), ==(old(_dryad_S0, sll_max_key(l0)), old(_dryad_S1, sll_max_key(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(l0)))), ==(old(_dryad_S0, sll_min_key(l0)), old(_dryad_S1, sll_min_key(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, srtl_reach(l0)))), ==(old(_dryad_S0, srtl(l0)), old(_dryad_S1, srtl(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, srtl_reach(l0)))), ==(old(_dryad_S0, srtl_reach(l0)), old(_dryad_S1, srtl_reach(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(SL#l0, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(curr)))), ==(old(_dryad_S0, sll_keys(curr)), old(_dryad_S1, sll_keys(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(curr)))), ==(old(_dryad_S0, sll_list_len_next(curr)), old(_dryad_S1, sll_list_len_next(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, rsrtl_reach(curr)))), ==(old(_dryad_S0, rsrtl(curr)), old(_dryad_S1, rsrtl(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, rsrtl_reach(curr)))), ==(old(_dryad_S0, rsrtl_reach(curr)), old(_dryad_S1, rsrtl_reach(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(curr)))), ==(old(_dryad_S0, sll(curr)), old(_dryad_S1, sll(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(curr)))), ==(old(_dryad_S0, sll_reach(curr)), old(_dryad_S1, sll_reach(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(curr)))), ==(old(_dryad_S0, sll_max_key(curr)), old(_dryad_S1, sll_max_key(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(curr)))), ==(old(_dryad_S0, sll_min_key(curr)), old(_dryad_S1, sll_min_key(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, srtl_reach(curr)))), ==(old(_dryad_S0, srtl(curr)), old(_dryad_S1, srtl(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, srtl_reach(curr)))), ==(old(_dryad_S0, srtl_reach(curr)), old(_dryad_S1, srtl_reach(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(lpt)))), ==(old(_dryad_S0, sll_keys(lpt)), old(_dryad_S1, sll_keys(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(lpt)))), ==(old(_dryad_S0, sll_list_len_next(lpt)), old(_dryad_S1, sll_list_len_next(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, rsrtl_reach(lpt)))), ==(old(_dryad_S0, rsrtl(lpt)), old(_dryad_S1, rsrtl(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, rsrtl_reach(lpt)))), ==(old(_dryad_S0, rsrtl_reach(lpt)), old(_dryad_S1, rsrtl_reach(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(lpt)))), ==(old(_dryad_S0, sll(lpt)), old(_dryad_S1, sll(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(lpt)))), ==(old(_dryad_S0, sll_reach(lpt)), old(_dryad_S1, sll_reach(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(lpt)))), ==(old(_dryad_S0, sll_max_key(lpt)), old(_dryad_S1, sll_max_key(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(lpt)))), ==(old(_dryad_S0, sll_min_key(lpt)), old(_dryad_S1, sll_min_key(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, srtl_reach(lpt)))), ==(old(_dryad_S0, srtl(lpt)), old(_dryad_S1, srtl(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, srtl_reach(lpt)))), ==(old(_dryad_S0, srtl_reach(lpt)), old(_dryad_S1, srtl_reach(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#lpt, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(rpt)))), ==(old(_dryad_S0, sll_keys(rpt)), old(_dryad_S1, sll_keys(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(rpt)))), ==(old(_dryad_S0, sll_list_len_next(rpt)), old(_dryad_S1, sll_list_len_next(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, rsrtl_reach(rpt)))), ==(old(_dryad_S0, rsrtl(rpt)), old(_dryad_S1, rsrtl(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, rsrtl_reach(rpt)))), ==(old(_dryad_S0, rsrtl_reach(rpt)), old(_dryad_S1, rsrtl_reach(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(rpt)))), ==(old(_dryad_S0, sll(rpt)), old(_dryad_S1, sll(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(rpt)))), ==(old(_dryad_S0, sll_reach(rpt)), old(_dryad_S1, sll_reach(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(rpt)))), ==(old(_dryad_S0, sll_max_key(rpt)), old(_dryad_S1, sll_max_key(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(rpt)))), ==(old(_dryad_S0, sll_min_key(rpt)), old(_dryad_S1, sll_min_key(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, srtl_reach(rpt)))), ==(old(_dryad_S0, srtl(rpt)), old(_dryad_S1, srtl(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, srtl_reach(rpt)))), ==(old(_dryad_S0, srtl_reach(rpt)), old(_dryad_S1, srtl_reach(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#rpt, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(tmp)))), ==(old(_dryad_S0, sll_keys(tmp)), old(_dryad_S1, sll_keys(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(tmp)))), ==(old(_dryad_S0, sll_list_len_next(tmp)), old(_dryad_S1, sll_list_len_next(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, rsrtl_reach(tmp)))), ==(old(_dryad_S0, rsrtl(tmp)), old(_dryad_S1, rsrtl(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, rsrtl_reach(tmp)))), ==(old(_dryad_S0, rsrtl_reach(tmp)), old(_dryad_S1, rsrtl_reach(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(tmp)))), ==(old(_dryad_S0, sll(tmp)), old(_dryad_S1, sll(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(tmp)))), ==(old(_dryad_S0, sll_reach(tmp)), old(_dryad_S1, sll_reach(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(tmp)))), ==(old(_dryad_S0, sll_max_key(tmp)), old(_dryad_S1, sll_max_key(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(tmp)))), ==(old(_dryad_S0, sll_min_key(tmp)), old(_dryad_S1, sll_min_key(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, srtl_reach(tmp)))), ==(old(_dryad_S0, srtl(tmp)), old(_dryad_S1, srtl(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, srtl_reach(tmp)))), ==(old(_dryad_S0, srtl_reach(tmp)), old(_dryad_S1, srtl_reach(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(t2)))), ==(old(_dryad_S0, sll_keys(t2)), old(_dryad_S1, sll_keys(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(t2)))), ==(old(_dryad_S0, sll_list_len_next(t2)), old(_dryad_S1, sll_list_len_next(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, rsrtl_reach(t2)))), ==(old(_dryad_S0, rsrtl(t2)), old(_dryad_S1, rsrtl(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, rsrtl_reach(t2)))), ==(old(_dryad_S0, rsrtl_reach(t2)), old(_dryad_S1, rsrtl_reach(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(t2)))), ==(old(_dryad_S0, sll(t2)), old(_dryad_S1, sll(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(t2)))), ==(old(_dryad_S0, sll_reach(t2)), old(_dryad_S1, sll_reach(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(t2)))), ==(old(_dryad_S0, sll_max_key(t2)), old(_dryad_S1, sll_max_key(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(t2)))), ==(old(_dryad_S0, sll_min_key(t2)), old(_dryad_S1, sll_min_key(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, srtl_reach(t2)))), ==(old(_dryad_S0, srtl(t2)), old(_dryad_S1, srtl(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, srtl_reach(t2)))), ==(old(_dryad_S0, srtl_reach(t2)), old(_dryad_S1, srtl_reach(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#t2, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(t1)))), ==(old(_dryad_S0, sll_keys(t1)), old(_dryad_S1, sll_keys(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(t1)))), ==(old(_dryad_S0, sll_list_len_next(t1)), old(_dryad_S1, sll_list_len_next(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, rsrtl_reach(t1)))), ==(old(_dryad_S0, rsrtl(t1)), old(_dryad_S1, rsrtl(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, rsrtl_reach(t1)))), ==(old(_dryad_S0, rsrtl_reach(t1)), old(_dryad_S1, rsrtl_reach(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(t1)))), ==(old(_dryad_S0, sll(t1)), old(_dryad_S1, sll(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(t1)))), ==(old(_dryad_S0, sll_reach(t1)), old(_dryad_S1, sll_reach(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(t1)))), ==(old(_dryad_S0, sll_max_key(t1)), old(_dryad_S1, sll_max_key(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, sll_reach(t1)))), ==(old(_dryad_S0, sll_min_key(t1)), old(_dryad_S1, sll_min_key(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, srtl_reach(t1)))), ==(old(_dryad_S0, srtl(t1)), old(_dryad_S1, srtl(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S0, srtl_reach(t1)))), ==(old(_dryad_S0, srtl_reach(t1)), old(_dryad_S1, srtl_reach(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#t1, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, l1)), ==(*((l1->key)), old(_dryad_S0, *((l1->key))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(SL#l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) == $rd_inv(SL#_dryad_S0, s_node.key, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, l1)), @_vcc_ptr_eq_pure(*((l1->next)), old(_dryad_S0, *((l1->next))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(SL#l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S0, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(l, l0)), ==(*((l0->key)), old(_dryad_S0, *((l0->key))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(SL#l0, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) == $rd_inv(SL#_dryad_S0, s_node.key, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, l0)), @_vcc_ptr_eq_pure(*((l0->next)), old(_dryad_S0, *((l0->next))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(SL#l0, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S0, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(l, curr)), ==(*((curr->key)), old(_dryad_S0, *((curr->key))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#curr, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) == $rd_inv(SL#_dryad_S0, s_node.key, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S0, *((curr->next))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#curr, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S0, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(l, lpt)), ==(*((lpt->key)), old(_dryad_S0, *((lpt->key))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#lpt, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) == $rd_inv(SL#_dryad_S0, s_node.key, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, lpt)), @_vcc_ptr_eq_pure(*((lpt->next)), old(_dryad_S0, *((lpt->next))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#lpt, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S0, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(l, rpt)), ==(*((rpt->key)), old(_dryad_S0, *((rpt->key))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#rpt, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) == $rd_inv(SL#_dryad_S0, s_node.key, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, rpt)), @_vcc_ptr_eq_pure(*((rpt->next)), old(_dryad_S0, *((rpt->next))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#rpt, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S0, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(l, tmp)), ==(*((tmp->key)), old(_dryad_S0, *((tmp->key))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) == $rd_inv(SL#_dryad_S0, s_node.key, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, tmp)), @_vcc_ptr_eq_pure(*((tmp->next)), old(_dryad_S0, *((tmp->next))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S0, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(l, t2)), ==(*((t2->key)), old(_dryad_S0, *((t2->key))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#t2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) == $rd_inv(SL#_dryad_S0, s_node.key, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, t2)), @_vcc_ptr_eq_pure(*((t2->next)), old(_dryad_S0, *((t2->next))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#t2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S0, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(l, t1)), ==(*((t1->key)), old(_dryad_S0, *((t1->key))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#t1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) == $rd_inv(SL#_dryad_S0, s_node.key, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, t1)), @_vcc_ptr_eq_pure(*((t1->next)), old(_dryad_S0, *((t1->next))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#t1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S0, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_keys(l1), @_vcc_intset_union(sll_keys(*((l1->next))), @_vcc_intset_singleton(*((l1->key)))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_list_len_next(l1), unchecked+(sll_list_len_next(*((l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(rsrtl(l1), &&(&&(rsrtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, rsrtl_reach(*((l1->next)))))), >=(*((l1->key)), sll_max_key(*((l1->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(rsrtl_reach(l1), @_vcc_oset_union(rsrtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll(l1), &&(sll(*((l1->next))), unchecked!(@_vcc_oset_in(l1, sll_reach(*((l1->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_reach(l1), @_vcc_oset_union(sll_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_max_key(l1), @\int_max(*((l1->key)), sll_max_key(*((l1->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_min_key(l1), @\int_min(*((l1->key)), sll_min_key(*((l1->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(srtl(l1), &&(&&(srtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, srtl_reach(*((l1->next)))))), <=(*((l1->key)), sll_min_key(*((l1->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(srtl_reach(l1), @_vcc_oset_union(srtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_keys(l0), @_vcc_intset_union(sll_keys(*((l0->next))), @_vcc_intset_singleton(*((l0->key)))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l0, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_list_len_next(l0), unchecked+(sll_list_len_next(*((l0->next))), 1))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l0, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(rsrtl(l0), &&(&&(rsrtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, rsrtl_reach(*((l0->next)))))), >=(*((l0->key)), sll_max_key(*((l0->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(rsrtl_reach(l0), @_vcc_oset_union(rsrtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll(l0), &&(sll(*((l0->next))), unchecked!(@_vcc_oset_in(l0, sll_reach(*((l0->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_reach(l0), @_vcc_oset_union(sll_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_max_key(l0), @\int_max(*((l0->key)), sll_max_key(*((l0->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_min_key(l0), @\int_min(*((l0->key)), sll_min_key(*((l0->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(srtl(l0), &&(&&(srtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, srtl_reach(*((l0->next)))))), <=(*((l0->key)), sll_min_key(*((l0->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(srtl_reach(l0), @_vcc_oset_union(srtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_keys(curr), @_vcc_intset_union(sll_keys(*((curr->next))), @_vcc_intset_singleton(*((curr->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_list_len_next(curr), unchecked+(sll_list_len_next(*((curr->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(rsrtl(curr), &&(&&(rsrtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, rsrtl_reach(*((curr->next)))))), >=(*((curr->key)), sll_max_key(*((curr->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(rsrtl_reach(curr), @_vcc_oset_union(rsrtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll(curr), &&(sll(*((curr->next))), unchecked!(@_vcc_oset_in(curr, sll_reach(*((curr->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_reach(curr), @_vcc_oset_union(sll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_max_key(curr), @\int_max(*((curr->key)), sll_max_key(*((curr->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_min_key(curr), @\int_min(*((curr->key)), sll_min_key(*((curr->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(srtl(curr), &&(&&(srtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, srtl_reach(*((curr->next)))))), <=(*((curr->key)), sll_min_key(*((curr->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(srtl_reach(curr), @_vcc_oset_union(srtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_keys(lpt), @_vcc_intset_union(sll_keys(*((lpt->next))), @_vcc_intset_singleton(*((lpt->key)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#lpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_list_len_next(lpt), unchecked+(sll_list_len_next(*((lpt->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#lpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(rsrtl(lpt), &&(&&(rsrtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, rsrtl_reach(*((lpt->next)))))), >=(*((lpt->key)), sll_max_key(*((lpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(rsrtl_reach(lpt), @_vcc_oset_union(rsrtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll(lpt), &&(sll(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, sll_reach(*((lpt->next)))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_reach(lpt), @_vcc_oset_union(sll_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_max_key(lpt), @\int_max(*((lpt->key)), sll_max_key(*((lpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_min_key(lpt), @\int_min(*((lpt->key)), sll_min_key(*((lpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(srtl(lpt), &&(&&(srtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, srtl_reach(*((lpt->next)))))), <=(*((lpt->key)), sll_min_key(*((lpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(srtl_reach(lpt), @_vcc_oset_union(srtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_keys(rpt), @_vcc_intset_union(sll_keys(*((rpt->next))), @_vcc_intset_singleton(*((rpt->key)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#rpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_list_len_next(rpt), unchecked+(sll_list_len_next(*((rpt->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#rpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(rsrtl(rpt), &&(&&(rsrtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, rsrtl_reach(*((rpt->next)))))), >=(*((rpt->key)), sll_max_key(*((rpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(rsrtl_reach(rpt), @_vcc_oset_union(rsrtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll(rpt), &&(sll(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, sll_reach(*((rpt->next)))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_reach(rpt), @_vcc_oset_union(sll_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_max_key(rpt), @\int_max(*((rpt->key)), sll_max_key(*((rpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_min_key(rpt), @\int_min(*((rpt->key)), sll_min_key(*((rpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(srtl(rpt), &&(&&(srtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, srtl_reach(*((rpt->next)))))), <=(*((rpt->key)), sll_min_key(*((rpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(srtl_reach(rpt), @_vcc_oset_union(srtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_keys(t2), @_vcc_intset_union(sll_keys(*((t2->next))), @_vcc_intset_singleton(*((t2->key)))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_list_len_next(t2), unchecked+(sll_list_len_next(*((t2->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(rsrtl(t2), &&(&&(rsrtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, rsrtl_reach(*((t2->next)))))), >=(*((t2->key)), sll_max_key(*((t2->next))))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(rsrtl_reach(t2), @_vcc_oset_union(rsrtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll(t2), &&(sll(*((t2->next))), unchecked!(@_vcc_oset_in(t2, sll_reach(*((t2->next)))))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_reach(t2), @_vcc_oset_union(sll_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_max_key(t2), @\int_max(*((t2->key)), sll_max_key(*((t2->next)))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_min_key(t2), @\int_min(*((t2->key)), sll_min_key(*((t2->next)))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(srtl(t2), &&(&&(srtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, srtl_reach(*((t2->next)))))), <=(*((t2->key)), sll_min_key(*((t2->next))))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(srtl_reach(t2), @_vcc_oset_union(srtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_keys(t1), @_vcc_intset_union(sll_keys(*((t1->next))), @_vcc_intset_singleton(*((t1->key)))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_list_len_next(t1), unchecked+(sll_list_len_next(*((t1->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(rsrtl(t1), &&(&&(rsrtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, rsrtl_reach(*((t1->next)))))), >=(*((t1->key)), sll_max_key(*((t1->next))))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(rsrtl_reach(t1), @_vcc_oset_union(rsrtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll(t1), &&(sll(*((t1->next))), unchecked!(@_vcc_oset_in(t1, sll_reach(*((t1->next)))))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_reach(t1), @_vcc_oset_union(sll_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_max_key(t1), @\int_max(*((t1->key)), sll_max_key(*((t1->next)))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_min_key(t1), @\int_min(*((t1->key)), sll_min_key(*((t1->next)))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(srtl(t1), &&(&&(srtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, srtl_reach(*((t1->next)))))), <=(*((t1->key)), sll_min_key(*((t1->next))))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(srtl_reach(t1), @_vcc_oset_union(srtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // lpt := (struct s_node*)@null; 
    L#lpt := $phys_ptr_cast($null, ^s_node);
    // assert sll_lseg(l1, l1); 
    assert F#sll_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
    // assume sll_lseg(l1, l1); 
    assume F#sll_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
    // assert srtl_lseg(l1, l1); 
    assert F#srtl_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
    // assume srtl_lseg(l1, l1); 
    assume F#srtl_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
    // assert sll_lseg(l0, l0); 
    assert F#sll_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
    // assume sll_lseg(l0, l0); 
    assume F#sll_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
    // assert srtl_lseg(l0, l0); 
    assert F#srtl_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
    // assume srtl_lseg(l0, l0); 
    assume F#srtl_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
    // assert sll_lseg(curr, curr); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
    // assume sll_lseg(curr, curr); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
    // assert srtl_lseg(curr, curr); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
    // assume srtl_lseg(curr, curr); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
    // assert sll_lseg(lpt, lpt); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
    // assume sll_lseg(lpt, lpt); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
    // assert srtl_lseg(lpt, lpt); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
    // assume srtl_lseg(lpt, lpt); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
    // assert sll_lseg(rpt, rpt); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
    // assume sll_lseg(rpt, rpt); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
    // assert srtl_lseg(rpt, rpt); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
    // assume srtl_lseg(rpt, rpt); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
    // assert sll_lseg(tmp, tmp); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
    // assume sll_lseg(tmp, tmp); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
    // assert srtl_lseg(tmp, tmp); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
    // assume srtl_lseg(tmp, tmp); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
    // assert sll_lseg(t2, t2); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
    // assume sll_lseg(t2, t2); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
    // assert srtl_lseg(t2, t2); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
    // assume srtl_lseg(t2, t2); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
    // assert sll_lseg(t1, t1); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
    // assume sll_lseg(t1, t1); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
    // assert srtl_lseg(t1, t1); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
    // assume srtl_lseg(t1, t1); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
    // assert sll_lseg(l, l); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
    // assume sll_lseg(l, l); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
    // assert srtl_lseg(l, l); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
    // assume srtl_lseg(l, l); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_keys(lpt), @_vcc_intset_union(sll_keys(*((lpt->next))), @_vcc_intset_singleton(*((lpt->key)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#lpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_list_len_next(lpt), unchecked+(sll_list_len_next(*((lpt->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#lpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(rsrtl(lpt), &&(&&(rsrtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, rsrtl_reach(*((lpt->next)))))), >=(*((lpt->key)), sll_max_key(*((lpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(rsrtl_reach(lpt), @_vcc_oset_union(rsrtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll(lpt), &&(sll(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, sll_reach(*((lpt->next)))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_reach(lpt), @_vcc_oset_union(sll_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_max_key(lpt), @\int_max(*((lpt->key)), sll_max_key(*((lpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_min_key(lpt), @\int_min(*((lpt->key)), sll_min_key(*((lpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(srtl(lpt), &&(&&(srtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, srtl_reach(*((lpt->next)))))), <=(*((lpt->key)), sll_min_key(*((lpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(srtl_reach(lpt), @_vcc_oset_union(srtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // rpt := (struct s_node*)@null; 
    L#rpt := $phys_ptr_cast($null, ^s_node);
    // assert sll_lseg(l1, l1); 
    assert F#sll_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
    // assume sll_lseg(l1, l1); 
    assume F#sll_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
    // assert srtl_lseg(l1, l1); 
    assert F#srtl_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
    // assume srtl_lseg(l1, l1); 
    assume F#srtl_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
    // assert sll_lseg(l0, l0); 
    assert F#sll_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
    // assume sll_lseg(l0, l0); 
    assume F#sll_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
    // assert srtl_lseg(l0, l0); 
    assert F#srtl_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
    // assume srtl_lseg(l0, l0); 
    assume F#srtl_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
    // assert sll_lseg(curr, curr); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
    // assume sll_lseg(curr, curr); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
    // assert srtl_lseg(curr, curr); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
    // assume srtl_lseg(curr, curr); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
    // assert sll_lseg(lpt, lpt); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
    // assume sll_lseg(lpt, lpt); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
    // assert srtl_lseg(lpt, lpt); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
    // assume srtl_lseg(lpt, lpt); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
    // assert sll_lseg(rpt, rpt); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
    // assume sll_lseg(rpt, rpt); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
    // assert srtl_lseg(rpt, rpt); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
    // assume srtl_lseg(rpt, rpt); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
    // assert sll_lseg(tmp, tmp); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
    // assume sll_lseg(tmp, tmp); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
    // assert srtl_lseg(tmp, tmp); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
    // assume srtl_lseg(tmp, tmp); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
    // assert sll_lseg(t2, t2); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
    // assume sll_lseg(t2, t2); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
    // assert srtl_lseg(t2, t2); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
    // assume srtl_lseg(t2, t2); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
    // assert sll_lseg(t1, t1); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
    // assume sll_lseg(t1, t1); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
    // assert srtl_lseg(t1, t1); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
    // assume srtl_lseg(t1, t1); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
    // assert sll_lseg(l, l); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
    // assume sll_lseg(l, l); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
    // assert srtl_lseg(l, l); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
    // assume srtl_lseg(l, l); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_keys(rpt), @_vcc_intset_union(sll_keys(*((rpt->next))), @_vcc_intset_singleton(*((rpt->key)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#rpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_list_len_next(rpt), unchecked+(sll_list_len_next(*((rpt->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#rpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(rsrtl(rpt), &&(&&(rsrtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, rsrtl_reach(*((rpt->next)))))), >=(*((rpt->key)), sll_max_key(*((rpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(rsrtl_reach(rpt), @_vcc_oset_union(rsrtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll(rpt), &&(sll(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, sll_reach(*((rpt->next)))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_reach(rpt), @_vcc_oset_union(sll_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_max_key(rpt), @\int_max(*((rpt->key)), sll_max_key(*((rpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_min_key(rpt), @\int_min(*((rpt->key)), sll_min_key(*((rpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(srtl(rpt), &&(&&(srtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, srtl_reach(*((rpt->next)))))), <=(*((rpt->key)), sll_min_key(*((rpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(srtl_reach(rpt), @_vcc_oset_union(srtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // tmp := curr; 
    L#tmp := $phys_ptr_cast(L#curr, ^s_node);
    // assert sll_lseg(l1, l1); 
    assert F#sll_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
    // assume sll_lseg(l1, l1); 
    assume F#sll_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
    // assert srtl_lseg(l1, l1); 
    assert F#srtl_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
    // assume srtl_lseg(l1, l1); 
    assume F#srtl_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
    // assert sll_lseg(l0, l0); 
    assert F#sll_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
    // assume sll_lseg(l0, l0); 
    assume F#sll_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
    // assert srtl_lseg(l0, l0); 
    assert F#srtl_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
    // assume srtl_lseg(l0, l0); 
    assume F#srtl_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
    // assert sll_lseg(curr, curr); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
    // assume sll_lseg(curr, curr); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
    // assert srtl_lseg(curr, curr); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
    // assume srtl_lseg(curr, curr); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
    // assert sll_lseg(lpt, lpt); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
    // assume sll_lseg(lpt, lpt); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
    // assert srtl_lseg(lpt, lpt); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
    // assume srtl_lseg(lpt, lpt); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
    // assert sll_lseg(rpt, rpt); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
    // assume sll_lseg(rpt, rpt); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
    // assert srtl_lseg(rpt, rpt); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
    // assume srtl_lseg(rpt, rpt); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
    // assert sll_lseg(tmp, tmp); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
    // assume sll_lseg(tmp, tmp); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
    // assert srtl_lseg(tmp, tmp); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
    // assume srtl_lseg(tmp, tmp); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
    // assert sll_lseg(t2, t2); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
    // assume sll_lseg(t2, t2); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
    // assert srtl_lseg(t2, t2); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
    // assume srtl_lseg(t2, t2); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
    // assert sll_lseg(t1, t1); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
    // assume sll_lseg(t1, t1); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
    // assert srtl_lseg(t1, t1); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
    // assume srtl_lseg(t1, t1); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
    // assert sll_lseg(l, l); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
    // assume sll_lseg(l, l); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
    // assert srtl_lseg(l, l); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
    // assume srtl_lseg(l, l); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
    loopState#0 := $s;
    assume true;
    while (true)
      invariant $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> L#pivot <= F#sll_min_key($s, $phys_ptr_cast(L#rpt, ^s_node));
      invariant $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#lpt, ^s_node)) <= L#pivot;
      invariant F#sll($s, $phys_ptr_cast(L#tmp, ^s_node));
      invariant F#sll($s, $phys_ptr_cast(L#curr, ^s_node));
      invariant F#sll($s, $phys_ptr_cast(L#lpt, ^s_node));
      invariant F#sll($s, $phys_ptr_cast(L#rpt, ^s_node));
      invariant $oset_disjoint(F#sll_reach($s, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach($s, $phys_ptr_cast(L#rpt, ^s_node)));
      invariant $oset_disjoint(F#sll_reach($s, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_reach($s, $phys_ptr_cast(L#curr, ^s_node)));
      invariant $oset_disjoint(F#sll_reach($s, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach($s, $phys_ptr_cast(L#curr, ^s_node)));
      invariant !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach($s, $phys_ptr_cast(L#curr, ^s_node)));
      invariant !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach($s, $phys_ptr_cast(L#rpt, ^s_node)));
      invariant !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach($s, $phys_ptr_cast(L#lpt, ^s_node)));
      invariant SL#ALL_REACH == $oset_union(F#sll_reach($s, $phys_ptr_cast(L#lpt, ^s_node)), $oset_union(F#sll_reach($s, $phys_ptr_cast(L#rpt, ^s_node)), $oset_union(F#sll_reach($s, $phys_ptr_cast(L#curr, ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)))));
      invariant $phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node);
      invariant SL#old_sll_keys == $intset_union(F#sll_keys($s, $phys_ptr_cast(L#lpt, ^s_node)), $intset_union(F#sll_keys($s, $phys_ptr_cast(L#rpt, ^s_node)), $intset_union(F#sll_keys($s, $phys_ptr_cast(L#curr, ^s_node)), $intset_singleton(L#pivot))));
      invariant $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr, ^s_node));
      invariant $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> $top_writable($s, #wrTime$3^10.3, $phys_ptr_cast(L#curr, ^s_node));
    {
      anon8:
        assume $writes_nothing(old($s), $s);
        assume $timestamp_post(loopState#0, $s);
        assume $full_stop_ext(#tok$3^35.2, $s);
        // assume @_vcc_meta_eq(old(@prestate, @state), @state); 
        assume $meta_eq(loopState#0, $s);
        assume true;
        // if (@_vcc_ptr_neq_null(curr)) ...
        if ($non_null($phys_ptr_cast(L#curr, ^s_node)))
        {
          anon5:
            // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_keys(l1), @_vcc_intset_union(sll_keys(*((l1->next))), @_vcc_intset_singleton(*((l1->key)))))); 
            assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_list_len_next(l1), unchecked+(sll_list_len_next(*((l1->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(rsrtl(l1), &&(&&(rsrtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, rsrtl_reach(*((l1->next)))))), >=(*((l1->key)), sll_max_key(*((l1->next))))))); 
            assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l1), ==(rsrtl_reach(l1), @_vcc_oset_union(rsrtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
            assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll(l1), &&(sll(*((l1->next))), unchecked!(@_vcc_oset_in(l1, sll_reach(*((l1->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_reach(l1), @_vcc_oset_union(sll_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
            assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_max_key(l1), @\int_max(*((l1->key)), sll_max_key(*((l1->next)))))); 
            assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_min_key(l1), @\int_min(*((l1->key)), sll_min_key(*((l1->next)))))); 
            assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(srtl(l1), &&(&&(srtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, srtl_reach(*((l1->next)))))), <=(*((l1->key)), sll_min_key(*((l1->next))))))); 
            assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l1), ==(srtl_reach(l1), @_vcc_oset_union(srtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
            assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_keys(l0), @_vcc_intset_union(sll_keys(*((l0->next))), @_vcc_intset_singleton(*((l0->key)))))); 
            assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l0, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_list_len_next(l0), unchecked+(sll_list_len_next(*((l0->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l0, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(rsrtl(l0), &&(&&(rsrtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, rsrtl_reach(*((l0->next)))))), >=(*((l0->key)), sll_max_key(*((l0->next))))))); 
            assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l0), ==(rsrtl_reach(l0), @_vcc_oset_union(rsrtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
            assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll(l0), &&(sll(*((l0->next))), unchecked!(@_vcc_oset_in(l0, sll_reach(*((l0->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_reach(l0), @_vcc_oset_union(sll_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
            assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_max_key(l0), @\int_max(*((l0->key)), sll_max_key(*((l0->next)))))); 
            assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_min_key(l0), @\int_min(*((l0->key)), sll_min_key(*((l0->next)))))); 
            assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(srtl(l0), &&(&&(srtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, srtl_reach(*((l0->next)))))), <=(*((l0->key)), sll_min_key(*((l0->next))))))); 
            assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l0), ==(srtl_reach(l0), @_vcc_oset_union(srtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
            assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_keys(curr), @_vcc_intset_union(sll_keys(*((curr->next))), @_vcc_intset_singleton(*((curr->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_list_len_next(curr), unchecked+(sll_list_len_next(*((curr->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(rsrtl(curr), &&(&&(rsrtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, rsrtl_reach(*((curr->next)))))), >=(*((curr->key)), sll_max_key(*((curr->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(rsrtl_reach(curr), @_vcc_oset_union(rsrtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll(curr), &&(sll(*((curr->next))), unchecked!(@_vcc_oset_in(curr, sll_reach(*((curr->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_reach(curr), @_vcc_oset_union(sll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_max_key(curr), @\int_max(*((curr->key)), sll_max_key(*((curr->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_min_key(curr), @\int_min(*((curr->key)), sll_min_key(*((curr->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(srtl(curr), &&(&&(srtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, srtl_reach(*((curr->next)))))), <=(*((curr->key)), sll_min_key(*((curr->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(srtl_reach(curr), @_vcc_oset_union(srtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_keys(lpt), @_vcc_intset_union(sll_keys(*((lpt->next))), @_vcc_intset_singleton(*((lpt->key)))))); 
            assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#lpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_list_len_next(lpt), unchecked+(sll_list_len_next(*((lpt->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#lpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(rsrtl(lpt), &&(&&(rsrtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, rsrtl_reach(*((lpt->next)))))), >=(*((lpt->key)), sll_max_key(*((lpt->next))))))); 
            assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(lpt), ==(rsrtl_reach(lpt), @_vcc_oset_union(rsrtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
            assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll(lpt), &&(sll(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, sll_reach(*((lpt->next)))))))); 
            assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_reach(lpt), @_vcc_oset_union(sll_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
            assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_max_key(lpt), @\int_max(*((lpt->key)), sll_max_key(*((lpt->next)))))); 
            assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_min_key(lpt), @\int_min(*((lpt->key)), sll_min_key(*((lpt->next)))))); 
            assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(srtl(lpt), &&(&&(srtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, srtl_reach(*((lpt->next)))))), <=(*((lpt->key)), sll_min_key(*((lpt->next))))))); 
            assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(lpt), ==(srtl_reach(lpt), @_vcc_oset_union(srtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
            assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_keys(rpt), @_vcc_intset_union(sll_keys(*((rpt->next))), @_vcc_intset_singleton(*((rpt->key)))))); 
            assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#rpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_list_len_next(rpt), unchecked+(sll_list_len_next(*((rpt->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#rpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(rsrtl(rpt), &&(&&(rsrtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, rsrtl_reach(*((rpt->next)))))), >=(*((rpt->key)), sll_max_key(*((rpt->next))))))); 
            assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(rpt), ==(rsrtl_reach(rpt), @_vcc_oset_union(rsrtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
            assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll(rpt), &&(sll(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, sll_reach(*((rpt->next)))))))); 
            assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_reach(rpt), @_vcc_oset_union(sll_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
            assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_max_key(rpt), @\int_max(*((rpt->key)), sll_max_key(*((rpt->next)))))); 
            assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_min_key(rpt), @\int_min(*((rpt->key)), sll_min_key(*((rpt->next)))))); 
            assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(srtl(rpt), &&(&&(srtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, srtl_reach(*((rpt->next)))))), <=(*((rpt->key)), sll_min_key(*((rpt->next))))))); 
            assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(rpt), ==(srtl_reach(rpt), @_vcc_oset_union(srtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
            assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_keys(t2), @_vcc_intset_union(sll_keys(*((t2->next))), @_vcc_intset_singleton(*((t2->key)))))); 
            assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_list_len_next(t2), unchecked+(sll_list_len_next(*((t2->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(rsrtl(t2), &&(&&(rsrtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, rsrtl_reach(*((t2->next)))))), >=(*((t2->key)), sll_max_key(*((t2->next))))))); 
            assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(t2), ==(rsrtl_reach(t2), @_vcc_oset_union(rsrtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
            assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll(t2), &&(sll(*((t2->next))), unchecked!(@_vcc_oset_in(t2, sll_reach(*((t2->next)))))))); 
            assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_reach(t2), @_vcc_oset_union(sll_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
            assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_max_key(t2), @\int_max(*((t2->key)), sll_max_key(*((t2->next)))))); 
            assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_min_key(t2), @\int_min(*((t2->key)), sll_min_key(*((t2->next)))))); 
            assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(srtl(t2), &&(&&(srtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, srtl_reach(*((t2->next)))))), <=(*((t2->key)), sll_min_key(*((t2->next))))))); 
            assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(t2), ==(srtl_reach(t2), @_vcc_oset_union(srtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
            assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_keys(t1), @_vcc_intset_union(sll_keys(*((t1->next))), @_vcc_intset_singleton(*((t1->key)))))); 
            assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_list_len_next(t1), unchecked+(sll_list_len_next(*((t1->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(rsrtl(t1), &&(&&(rsrtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, rsrtl_reach(*((t1->next)))))), >=(*((t1->key)), sll_max_key(*((t1->next))))))); 
            assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(t1), ==(rsrtl_reach(t1), @_vcc_oset_union(rsrtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
            assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll(t1), &&(sll(*((t1->next))), unchecked!(@_vcc_oset_in(t1, sll_reach(*((t1->next)))))))); 
            assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_reach(t1), @_vcc_oset_union(sll_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
            assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_max_key(t1), @\int_max(*((t1->key)), sll_max_key(*((t1->next)))))); 
            assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_min_key(t1), @\int_min(*((t1->key)), sll_min_key(*((t1->next)))))); 
            assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(srtl(t1), &&(&&(srtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, srtl_reach(*((t1->next)))))), <=(*((t1->key)), sll_min_key(*((t1->next))))))); 
            assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(t1), ==(srtl_reach(t1), @_vcc_oset_union(srtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
            assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
            assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
            assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
            assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
            assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
            assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), &&(==(@_vcc_mutable(@state, curr), @_vcc_mutable(@state, *((curr->next)))), ==(@writes_check(curr), @writes_check(*((curr->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr, ^s_node)) == $mutable($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && $top_writable($s, #wrTime$3^10.3, $phys_ptr_cast(L#curr, ^s_node)) == $top_writable($s, #wrTime$3^10.3, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node));
            // struct s_node* curr3; 
            // curr3 := curr; 
            SL#curr3 := $phys_ptr_cast(L#curr, ^s_node);
            // struct s_node* stmtexpr0#9; 
            // stmtexpr0#9 := curr3; 
            stmtexpr0#9 := $phys_ptr_cast(SL#curr3, ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_keys(curr), @_vcc_intset_union(sll_keys(*((curr->next))), @_vcc_intset_singleton(*((curr->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_list_len_next(curr), unchecked+(sll_list_len_next(*((curr->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(rsrtl(curr), &&(&&(rsrtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, rsrtl_reach(*((curr->next)))))), >=(*((curr->key)), sll_max_key(*((curr->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(rsrtl_reach(curr), @_vcc_oset_union(rsrtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll(curr), &&(sll(*((curr->next))), unchecked!(@_vcc_oset_in(curr, sll_reach(*((curr->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_reach(curr), @_vcc_oset_union(sll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_max_key(curr), @\int_max(*((curr->key)), sll_max_key(*((curr->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_min_key(curr), @\int_min(*((curr->key)), sll_min_key(*((curr->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(srtl(curr), &&(&&(srtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, srtl_reach(*((curr->next)))))), <=(*((curr->key)), sll_min_key(*((curr->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(srtl_reach(curr), @_vcc_oset_union(srtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
            // assert @reads_check_normal((curr->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#curr, ^s_node));
            // tmp := *((curr->next)); 
            L#tmp := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_keys(curr), @_vcc_intset_union(sll_keys(*((curr->next))), @_vcc_intset_singleton(*((curr->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_list_len_next(curr), unchecked+(sll_list_len_next(*((curr->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(rsrtl(curr), &&(&&(rsrtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, rsrtl_reach(*((curr->next)))))), >=(*((curr->key)), sll_max_key(*((curr->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(rsrtl_reach(curr), @_vcc_oset_union(rsrtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll(curr), &&(sll(*((curr->next))), unchecked!(@_vcc_oset_in(curr, sll_reach(*((curr->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_reach(curr), @_vcc_oset_union(sll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_max_key(curr), @\int_max(*((curr->key)), sll_max_key(*((curr->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_min_key(curr), @\int_min(*((curr->key)), sll_min_key(*((curr->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(srtl(curr), &&(&&(srtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, srtl_reach(*((curr->next)))))), <=(*((curr->key)), sll_min_key(*((curr->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr), ==(srtl_reach(curr), @_vcc_oset_union(srtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
            assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
            // assert @reads_check_normal((curr->key)); 
            assert $thread_local($s, $phys_ptr_cast(L#curr, ^s_node));
            assume true;
            // if (<=(*((curr->key)), pivot)) ...
            if ($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) <= L#pivot)
            {
              anon3:
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(sll_keys(curr3), @_vcc_intset_union(sll_keys(*((curr3->next))), @_vcc_intset_singleton(*((curr3->key)))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(sll_list_len_next(curr3), unchecked+(sll_list_len_next(*((curr3->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(curr3), @_vcc_ptr_neq_null(*((curr3->next)))), ==(rsrtl(curr3), &&(&&(rsrtl(*((curr3->next))), unchecked!(@_vcc_oset_in(curr3, rsrtl_reach(*((curr3->next)))))), >=(*((curr3->key)), sll_max_key(*((curr3->next))))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(rsrtl_reach(curr3), @_vcc_oset_union(rsrtl_reach(*((curr3->next))), @_vcc_oset_singleton(curr3)))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr3, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(sll(curr3), &&(sll(*((curr3->next))), unchecked!(@_vcc_oset_in(curr3, sll_reach(*((curr3->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(sll_reach(curr3), @_vcc_oset_union(sll_reach(*((curr3->next))), @_vcc_oset_singleton(curr3)))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr3, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr3), @_vcc_ptr_neq_null(*((curr3->next)))), ==(sll_max_key(curr3), @\int_max(*((curr3->key)), sll_max_key(*((curr3->next)))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr3), @_vcc_ptr_neq_null(*((curr3->next)))), ==(sll_min_key(curr3), @\int_min(*((curr3->key)), sll_min_key(*((curr3->next)))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr3), @_vcc_ptr_neq_null(*((curr3->next)))), ==(srtl(curr3), &&(&&(srtl(*((curr3->next))), unchecked!(@_vcc_oset_in(curr3, srtl_reach(*((curr3->next)))))), <=(*((curr3->key)), sll_min_key(*((curr3->next))))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(srtl_reach(curr3), @_vcc_oset_union(srtl_reach(*((curr3->next))), @_vcc_oset_singleton(curr3)))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr3, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_keys(l1), @_vcc_intset_union(sll_keys(*((l1->next))), @_vcc_intset_singleton(*((l1->key)))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_list_len_next(l1), unchecked+(sll_list_len_next(*((l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(rsrtl(l1), &&(&&(rsrtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, rsrtl_reach(*((l1->next)))))), >=(*((l1->key)), sll_max_key(*((l1->next))))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(rsrtl_reach(l1), @_vcc_oset_union(rsrtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll(l1), &&(sll(*((l1->next))), unchecked!(@_vcc_oset_in(l1, sll_reach(*((l1->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_reach(l1), @_vcc_oset_union(sll_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_max_key(l1), @\int_max(*((l1->key)), sll_max_key(*((l1->next)))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_min_key(l1), @\int_min(*((l1->key)), sll_min_key(*((l1->next)))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(srtl(l1), &&(&&(srtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, srtl_reach(*((l1->next)))))), <=(*((l1->key)), sll_min_key(*((l1->next))))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(srtl_reach(l1), @_vcc_oset_union(srtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_keys(l0), @_vcc_intset_union(sll_keys(*((l0->next))), @_vcc_intset_singleton(*((l0->key)))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l0, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_list_len_next(l0), unchecked+(sll_list_len_next(*((l0->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l0, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(rsrtl(l0), &&(&&(rsrtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, rsrtl_reach(*((l0->next)))))), >=(*((l0->key)), sll_max_key(*((l0->next))))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(rsrtl_reach(l0), @_vcc_oset_union(rsrtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll(l0), &&(sll(*((l0->next))), unchecked!(@_vcc_oset_in(l0, sll_reach(*((l0->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_reach(l0), @_vcc_oset_union(sll_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_max_key(l0), @\int_max(*((l0->key)), sll_max_key(*((l0->next)))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_min_key(l0), @\int_min(*((l0->key)), sll_min_key(*((l0->next)))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(srtl(l0), &&(&&(srtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, srtl_reach(*((l0->next)))))), <=(*((l0->key)), sll_min_key(*((l0->next))))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(srtl_reach(l0), @_vcc_oset_union(srtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_keys(curr), @_vcc_intset_union(sll_keys(*((curr->next))), @_vcc_intset_singleton(*((curr->key)))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_list_len_next(curr), unchecked+(sll_list_len_next(*((curr->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(rsrtl(curr), &&(&&(rsrtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, rsrtl_reach(*((curr->next)))))), >=(*((curr->key)), sll_max_key(*((curr->next))))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(rsrtl_reach(curr), @_vcc_oset_union(rsrtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll(curr), &&(sll(*((curr->next))), unchecked!(@_vcc_oset_in(curr, sll_reach(*((curr->next)))))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_reach(curr), @_vcc_oset_union(sll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_max_key(curr), @\int_max(*((curr->key)), sll_max_key(*((curr->next)))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_min_key(curr), @\int_min(*((curr->key)), sll_min_key(*((curr->next)))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(srtl(curr), &&(&&(srtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, srtl_reach(*((curr->next)))))), <=(*((curr->key)), sll_min_key(*((curr->next))))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(srtl_reach(curr), @_vcc_oset_union(srtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_keys(lpt), @_vcc_intset_union(sll_keys(*((lpt->next))), @_vcc_intset_singleton(*((lpt->key)))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#lpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_list_len_next(lpt), unchecked+(sll_list_len_next(*((lpt->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#lpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(rsrtl(lpt), &&(&&(rsrtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, rsrtl_reach(*((lpt->next)))))), >=(*((lpt->key)), sll_max_key(*((lpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(rsrtl_reach(lpt), @_vcc_oset_union(rsrtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll(lpt), &&(sll(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, sll_reach(*((lpt->next)))))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_reach(lpt), @_vcc_oset_union(sll_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_max_key(lpt), @\int_max(*((lpt->key)), sll_max_key(*((lpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_min_key(lpt), @\int_min(*((lpt->key)), sll_min_key(*((lpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(srtl(lpt), &&(&&(srtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, srtl_reach(*((lpt->next)))))), <=(*((lpt->key)), sll_min_key(*((lpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(srtl_reach(lpt), @_vcc_oset_union(srtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_keys(rpt), @_vcc_intset_union(sll_keys(*((rpt->next))), @_vcc_intset_singleton(*((rpt->key)))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#rpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_list_len_next(rpt), unchecked+(sll_list_len_next(*((rpt->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#rpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(rsrtl(rpt), &&(&&(rsrtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, rsrtl_reach(*((rpt->next)))))), >=(*((rpt->key)), sll_max_key(*((rpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(rsrtl_reach(rpt), @_vcc_oset_union(rsrtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll(rpt), &&(sll(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, sll_reach(*((rpt->next)))))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_reach(rpt), @_vcc_oset_union(sll_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_max_key(rpt), @\int_max(*((rpt->key)), sll_max_key(*((rpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_min_key(rpt), @\int_min(*((rpt->key)), sll_min_key(*((rpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(srtl(rpt), &&(&&(srtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, srtl_reach(*((rpt->next)))))), <=(*((rpt->key)), sll_min_key(*((rpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(srtl_reach(rpt), @_vcc_oset_union(srtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_keys(t2), @_vcc_intset_union(sll_keys(*((t2->next))), @_vcc_intset_singleton(*((t2->key)))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_list_len_next(t2), unchecked+(sll_list_len_next(*((t2->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(rsrtl(t2), &&(&&(rsrtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, rsrtl_reach(*((t2->next)))))), >=(*((t2->key)), sll_max_key(*((t2->next))))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(rsrtl_reach(t2), @_vcc_oset_union(rsrtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll(t2), &&(sll(*((t2->next))), unchecked!(@_vcc_oset_in(t2, sll_reach(*((t2->next)))))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_reach(t2), @_vcc_oset_union(sll_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_max_key(t2), @\int_max(*((t2->key)), sll_max_key(*((t2->next)))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_min_key(t2), @\int_min(*((t2->key)), sll_min_key(*((t2->next)))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(srtl(t2), &&(&&(srtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, srtl_reach(*((t2->next)))))), <=(*((t2->key)), sll_min_key(*((t2->next))))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(srtl_reach(t2), @_vcc_oset_union(srtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_keys(t1), @_vcc_intset_union(sll_keys(*((t1->next))), @_vcc_intset_singleton(*((t1->key)))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_list_len_next(t1), unchecked+(sll_list_len_next(*((t1->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(rsrtl(t1), &&(&&(rsrtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, rsrtl_reach(*((t1->next)))))), >=(*((t1->key)), sll_max_key(*((t1->next))))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(rsrtl_reach(t1), @_vcc_oset_union(rsrtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll(t1), &&(sll(*((t1->next))), unchecked!(@_vcc_oset_in(t1, sll_reach(*((t1->next)))))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_reach(t1), @_vcc_oset_union(sll_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_max_key(t1), @\int_max(*((t1->key)), sll_max_key(*((t1->next)))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_min_key(t1), @\int_min(*((t1->key)), sll_min_key(*((t1->next)))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(srtl(t1), &&(&&(srtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, srtl_reach(*((t1->next)))))), <=(*((t1->key)), sll_min_key(*((t1->next))))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(srtl_reach(t1), @_vcc_oset_union(srtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
                // _math \state _dryad_S2; 
                // _dryad_S2 := @_vcc_current_state(@state); 
                SL#_dryad_S2 := $current_state($s);
                // _math \state stmtexpr0#5; 
                // stmtexpr0#5 := _dryad_S2; 
                stmtexpr0#5 := SL#_dryad_S2;
                // assert @prim_writes_check((curr->next)); 
                assert $writable_prim($s, #wrTime$3^10.3, $dot($phys_ptr_cast(L#curr, ^s_node), s_node.next));
                // *(curr->next) := lpt; 
                call $write_int(s_node.next, $phys_ptr_cast(L#curr, ^s_node), $ptr_to_int($phys_ptr_cast(L#lpt, ^s_node)));
                assume $full_stop_ext(#tok$3^55.4, $s);
                // _math \state _dryad_S3; 
                // _dryad_S3 := @_vcc_current_state(@state); 
                SL#_dryad_S3 := $current_state($s);
                // _math \state stmtexpr1#6; 
                // stmtexpr1#6 := _dryad_S3; 
                stmtexpr1#6 := SL#_dryad_S3;
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(curr3)))), ==(old(_dryad_S2, sll_keys(curr3)), old(_dryad_S3, sll_keys(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(curr3)))), ==(old(_dryad_S2, sll_list_len_next(curr3)), old(_dryad_S3, sll_list_len_next(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(curr3)))), ==(old(_dryad_S2, rsrtl(curr3)), old(_dryad_S3, rsrtl(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(curr3)))), ==(old(_dryad_S2, rsrtl_reach(curr3)), old(_dryad_S3, rsrtl_reach(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(curr3)))), ==(old(_dryad_S2, sll(curr3)), old(_dryad_S3, sll(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(curr3)))), ==(old(_dryad_S2, sll_reach(curr3)), old(_dryad_S3, sll_reach(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(curr3)))), ==(old(_dryad_S2, sll_max_key(curr3)), old(_dryad_S3, sll_max_key(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(curr3)))), ==(old(_dryad_S2, sll_min_key(curr3)), old(_dryad_S3, sll_min_key(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(curr3)))), ==(old(_dryad_S2, srtl(curr3)), old(_dryad_S3, srtl(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(curr3)))), ==(old(_dryad_S2, srtl_reach(curr3)), old(_dryad_S3, srtl_reach(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#curr3, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l1)))), ==(old(_dryad_S2, sll_keys(l1)), old(_dryad_S3, sll_keys(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l1)))), ==(old(_dryad_S2, sll_list_len_next(l1)), old(_dryad_S3, sll_list_len_next(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(l1)))), ==(old(_dryad_S2, rsrtl(l1)), old(_dryad_S3, rsrtl(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(l1)))), ==(old(_dryad_S2, rsrtl_reach(l1)), old(_dryad_S3, rsrtl_reach(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l1)))), ==(old(_dryad_S2, sll(l1)), old(_dryad_S3, sll(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l1)))), ==(old(_dryad_S2, sll_reach(l1)), old(_dryad_S3, sll_reach(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l1)))), ==(old(_dryad_S2, sll_max_key(l1)), old(_dryad_S3, sll_max_key(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l1)))), ==(old(_dryad_S2, sll_min_key(l1)), old(_dryad_S3, sll_min_key(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(l1)))), ==(old(_dryad_S2, srtl(l1)), old(_dryad_S3, srtl(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(l1)))), ==(old(_dryad_S2, srtl_reach(l1)), old(_dryad_S3, srtl_reach(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l1, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l0)))), ==(old(_dryad_S2, sll_keys(l0)), old(_dryad_S3, sll_keys(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l0)))), ==(old(_dryad_S2, sll_list_len_next(l0)), old(_dryad_S3, sll_list_len_next(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(l0)))), ==(old(_dryad_S2, rsrtl(l0)), old(_dryad_S3, rsrtl(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(l0)))), ==(old(_dryad_S2, rsrtl_reach(l0)), old(_dryad_S3, rsrtl_reach(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l0)))), ==(old(_dryad_S2, sll(l0)), old(_dryad_S3, sll(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l0)))), ==(old(_dryad_S2, sll_reach(l0)), old(_dryad_S3, sll_reach(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l0)))), ==(old(_dryad_S2, sll_max_key(l0)), old(_dryad_S3, sll_max_key(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l0)))), ==(old(_dryad_S2, sll_min_key(l0)), old(_dryad_S3, sll_min_key(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(l0)))), ==(old(_dryad_S2, srtl(l0)), old(_dryad_S3, srtl(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(l0)))), ==(old(_dryad_S2, srtl_reach(l0)), old(_dryad_S3, srtl_reach(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(SL#l0, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(lpt)))), ==(old(_dryad_S2, sll_keys(lpt)), old(_dryad_S3, sll_keys(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(lpt)))), ==(old(_dryad_S2, sll_list_len_next(lpt)), old(_dryad_S3, sll_list_len_next(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(lpt)))), ==(old(_dryad_S2, rsrtl(lpt)), old(_dryad_S3, rsrtl(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(lpt)))), ==(old(_dryad_S2, rsrtl_reach(lpt)), old(_dryad_S3, rsrtl_reach(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(lpt)))), ==(old(_dryad_S2, sll(lpt)), old(_dryad_S3, sll(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(lpt)))), ==(old(_dryad_S2, sll_reach(lpt)), old(_dryad_S3, sll_reach(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(lpt)))), ==(old(_dryad_S2, sll_max_key(lpt)), old(_dryad_S3, sll_max_key(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(lpt)))), ==(old(_dryad_S2, sll_min_key(lpt)), old(_dryad_S3, sll_min_key(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(lpt)))), ==(old(_dryad_S2, srtl(lpt)), old(_dryad_S3, srtl(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(lpt)))), ==(old(_dryad_S2, srtl_reach(lpt)), old(_dryad_S3, srtl_reach(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#lpt, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(rpt)))), ==(old(_dryad_S2, sll_keys(rpt)), old(_dryad_S3, sll_keys(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(rpt)))), ==(old(_dryad_S2, sll_list_len_next(rpt)), old(_dryad_S3, sll_list_len_next(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(rpt)))), ==(old(_dryad_S2, rsrtl(rpt)), old(_dryad_S3, rsrtl(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(rpt)))), ==(old(_dryad_S2, rsrtl_reach(rpt)), old(_dryad_S3, rsrtl_reach(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(rpt)))), ==(old(_dryad_S2, sll(rpt)), old(_dryad_S3, sll(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(rpt)))), ==(old(_dryad_S2, sll_reach(rpt)), old(_dryad_S3, sll_reach(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(rpt)))), ==(old(_dryad_S2, sll_max_key(rpt)), old(_dryad_S3, sll_max_key(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(rpt)))), ==(old(_dryad_S2, sll_min_key(rpt)), old(_dryad_S3, sll_min_key(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(rpt)))), ==(old(_dryad_S2, srtl(rpt)), old(_dryad_S3, srtl(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(rpt)))), ==(old(_dryad_S2, srtl_reach(rpt)), old(_dryad_S3, srtl_reach(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#rpt, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(tmp)))), ==(old(_dryad_S2, sll_keys(tmp)), old(_dryad_S3, sll_keys(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(tmp)))), ==(old(_dryad_S2, sll_list_len_next(tmp)), old(_dryad_S3, sll_list_len_next(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(tmp)))), ==(old(_dryad_S2, rsrtl(tmp)), old(_dryad_S3, rsrtl(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(tmp)))), ==(old(_dryad_S2, rsrtl_reach(tmp)), old(_dryad_S3, rsrtl_reach(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(tmp)))), ==(old(_dryad_S2, sll(tmp)), old(_dryad_S3, sll(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(tmp)))), ==(old(_dryad_S2, sll_reach(tmp)), old(_dryad_S3, sll_reach(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(tmp)))), ==(old(_dryad_S2, sll_max_key(tmp)), old(_dryad_S3, sll_max_key(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(tmp)))), ==(old(_dryad_S2, sll_min_key(tmp)), old(_dryad_S3, sll_min_key(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(tmp)))), ==(old(_dryad_S2, srtl(tmp)), old(_dryad_S3, srtl(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(tmp)))), ==(old(_dryad_S2, srtl_reach(tmp)), old(_dryad_S3, srtl_reach(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(t2)))), ==(old(_dryad_S2, sll_keys(t2)), old(_dryad_S3, sll_keys(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(t2)))), ==(old(_dryad_S2, sll_list_len_next(t2)), old(_dryad_S3, sll_list_len_next(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(t2)))), ==(old(_dryad_S2, rsrtl(t2)), old(_dryad_S3, rsrtl(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(t2)))), ==(old(_dryad_S2, rsrtl_reach(t2)), old(_dryad_S3, rsrtl_reach(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(t2)))), ==(old(_dryad_S2, sll(t2)), old(_dryad_S3, sll(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(t2)))), ==(old(_dryad_S2, sll_reach(t2)), old(_dryad_S3, sll_reach(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(t2)))), ==(old(_dryad_S2, sll_max_key(t2)), old(_dryad_S3, sll_max_key(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(t2)))), ==(old(_dryad_S2, sll_min_key(t2)), old(_dryad_S3, sll_min_key(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(t2)))), ==(old(_dryad_S2, srtl(t2)), old(_dryad_S3, srtl(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(t2)))), ==(old(_dryad_S2, srtl_reach(t2)), old(_dryad_S3, srtl_reach(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#t2, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(t1)))), ==(old(_dryad_S2, sll_keys(t1)), old(_dryad_S3, sll_keys(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(t1)))), ==(old(_dryad_S2, sll_list_len_next(t1)), old(_dryad_S3, sll_list_len_next(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(t1)))), ==(old(_dryad_S2, rsrtl(t1)), old(_dryad_S3, rsrtl(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(t1)))), ==(old(_dryad_S2, rsrtl_reach(t1)), old(_dryad_S3, rsrtl_reach(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(t1)))), ==(old(_dryad_S2, sll(t1)), old(_dryad_S3, sll(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(t1)))), ==(old(_dryad_S2, sll_reach(t1)), old(_dryad_S3, sll_reach(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(t1)))), ==(old(_dryad_S2, sll_max_key(t1)), old(_dryad_S3, sll_max_key(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(t1)))), ==(old(_dryad_S2, sll_min_key(t1)), old(_dryad_S3, sll_min_key(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(t1)))), ==(old(_dryad_S2, srtl(t1)), old(_dryad_S3, srtl(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(t1)))), ==(old(_dryad_S2, srtl_reach(t1)), old(_dryad_S3, srtl_reach(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#t1, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_keys(l)), old(_dryad_S3, sll_keys(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_list_len_next(l)), old(_dryad_S3, sll_list_len_next(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(l)))), ==(old(_dryad_S2, rsrtl(l)), old(_dryad_S3, rsrtl(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, rsrtl_reach(l)))), ==(old(_dryad_S2, rsrtl_reach(l)), old(_dryad_S3, rsrtl_reach(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll(l)), old(_dryad_S3, sll(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_reach(l)), old(_dryad_S3, sll_reach(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_max_key(l)), old(_dryad_S3, sll_max_key(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, sll_reach(l)))), ==(old(_dryad_S2, sll_min_key(l)), old(_dryad_S3, sll_min_key(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(l)))), ==(old(_dryad_S2, srtl(l)), old(_dryad_S3, srtl(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2, srtl_reach(l)))), ==(old(_dryad_S2, srtl_reach(l)), old(_dryad_S3, srtl_reach(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#l, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr3)), ==(*((curr3->key)), old(_dryad_S2, *((curr3->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(SL#curr3, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr3)), @_vcc_ptr_eq_pure(*((curr3->next)), old(_dryad_S2, *((curr3->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(SL#curr3, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, l1)), ==(*((l1->key)), old(_dryad_S2, *((l1->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(SL#l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, l1)), @_vcc_ptr_eq_pure(*((l1->next)), old(_dryad_S2, *((l1->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(SL#l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, l0)), ==(*((l0->key)), old(_dryad_S2, *((l0->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(SL#l0, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, l0)), @_vcc_ptr_eq_pure(*((l0->next)), old(_dryad_S2, *((l0->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(SL#l0, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, lpt)), ==(*((lpt->key)), old(_dryad_S2, *((lpt->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#lpt, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, lpt)), @_vcc_ptr_eq_pure(*((lpt->next)), old(_dryad_S2, *((lpt->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#lpt, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, rpt)), ==(*((rpt->key)), old(_dryad_S2, *((rpt->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#rpt, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, rpt)), @_vcc_ptr_eq_pure(*((rpt->next)), old(_dryad_S2, *((rpt->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#rpt, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, tmp)), ==(*((tmp->key)), old(_dryad_S2, *((tmp->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, tmp)), @_vcc_ptr_eq_pure(*((tmp->next)), old(_dryad_S2, *((tmp->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, t2)), ==(*((t2->key)), old(_dryad_S2, *((t2->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#t2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, t2)), @_vcc_ptr_eq_pure(*((t2->next)), old(_dryad_S2, *((t2->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#t2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, t1)), ==(*((t1->key)), old(_dryad_S2, *((t1->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#t1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, t1)), @_vcc_ptr_eq_pure(*((t1->next)), old(_dryad_S2, *((t1->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#t1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, l)), ==(*((l->key)), old(_dryad_S2, *((l->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(P#l, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, l)), @_vcc_ptr_eq_pure(*((l->next)), old(_dryad_S2, *((l->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(P#l, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(sll_keys(curr3), @_vcc_intset_union(sll_keys(*((curr3->next))), @_vcc_intset_singleton(*((curr3->key)))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(sll_list_len_next(curr3), unchecked+(sll_list_len_next(*((curr3->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(curr3), @_vcc_ptr_neq_null(*((curr3->next)))), ==(rsrtl(curr3), &&(&&(rsrtl(*((curr3->next))), unchecked!(@_vcc_oset_in(curr3, rsrtl_reach(*((curr3->next)))))), >=(*((curr3->key)), sll_max_key(*((curr3->next))))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(rsrtl_reach(curr3), @_vcc_oset_union(rsrtl_reach(*((curr3->next))), @_vcc_oset_singleton(curr3)))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr3, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(sll(curr3), &&(sll(*((curr3->next))), unchecked!(@_vcc_oset_in(curr3, sll_reach(*((curr3->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(sll_reach(curr3), @_vcc_oset_union(sll_reach(*((curr3->next))), @_vcc_oset_singleton(curr3)))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr3, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr3), @_vcc_ptr_neq_null(*((curr3->next)))), ==(sll_max_key(curr3), @\int_max(*((curr3->key)), sll_max_key(*((curr3->next)))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr3), @_vcc_ptr_neq_null(*((curr3->next)))), ==(sll_min_key(curr3), @\int_min(*((curr3->key)), sll_min_key(*((curr3->next)))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr3), @_vcc_ptr_neq_null(*((curr3->next)))), ==(srtl(curr3), &&(&&(srtl(*((curr3->next))), unchecked!(@_vcc_oset_in(curr3, srtl_reach(*((curr3->next)))))), <=(*((curr3->key)), sll_min_key(*((curr3->next))))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(srtl_reach(curr3), @_vcc_oset_union(srtl_reach(*((curr3->next))), @_vcc_oset_singleton(curr3)))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr3, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_keys(l1), @_vcc_intset_union(sll_keys(*((l1->next))), @_vcc_intset_singleton(*((l1->key)))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_list_len_next(l1), unchecked+(sll_list_len_next(*((l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(rsrtl(l1), &&(&&(rsrtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, rsrtl_reach(*((l1->next)))))), >=(*((l1->key)), sll_max_key(*((l1->next))))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(rsrtl_reach(l1), @_vcc_oset_union(rsrtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll(l1), &&(sll(*((l1->next))), unchecked!(@_vcc_oset_in(l1, sll_reach(*((l1->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_reach(l1), @_vcc_oset_union(sll_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_max_key(l1), @\int_max(*((l1->key)), sll_max_key(*((l1->next)))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_min_key(l1), @\int_min(*((l1->key)), sll_min_key(*((l1->next)))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(srtl(l1), &&(&&(srtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, srtl_reach(*((l1->next)))))), <=(*((l1->key)), sll_min_key(*((l1->next))))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(srtl_reach(l1), @_vcc_oset_union(srtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_keys(l0), @_vcc_intset_union(sll_keys(*((l0->next))), @_vcc_intset_singleton(*((l0->key)))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l0, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_list_len_next(l0), unchecked+(sll_list_len_next(*((l0->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l0, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(rsrtl(l0), &&(&&(rsrtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, rsrtl_reach(*((l0->next)))))), >=(*((l0->key)), sll_max_key(*((l0->next))))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(rsrtl_reach(l0), @_vcc_oset_union(rsrtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll(l0), &&(sll(*((l0->next))), unchecked!(@_vcc_oset_in(l0, sll_reach(*((l0->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_reach(l0), @_vcc_oset_union(sll_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_max_key(l0), @\int_max(*((l0->key)), sll_max_key(*((l0->next)))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_min_key(l0), @\int_min(*((l0->key)), sll_min_key(*((l0->next)))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(srtl(l0), &&(&&(srtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, srtl_reach(*((l0->next)))))), <=(*((l0->key)), sll_min_key(*((l0->next))))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(srtl_reach(l0), @_vcc_oset_union(srtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_keys(lpt), @_vcc_intset_union(sll_keys(*((lpt->next))), @_vcc_intset_singleton(*((lpt->key)))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#lpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_list_len_next(lpt), unchecked+(sll_list_len_next(*((lpt->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#lpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(rsrtl(lpt), &&(&&(rsrtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, rsrtl_reach(*((lpt->next)))))), >=(*((lpt->key)), sll_max_key(*((lpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(rsrtl_reach(lpt), @_vcc_oset_union(rsrtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll(lpt), &&(sll(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, sll_reach(*((lpt->next)))))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_reach(lpt), @_vcc_oset_union(sll_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_max_key(lpt), @\int_max(*((lpt->key)), sll_max_key(*((lpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_min_key(lpt), @\int_min(*((lpt->key)), sll_min_key(*((lpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(srtl(lpt), &&(&&(srtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, srtl_reach(*((lpt->next)))))), <=(*((lpt->key)), sll_min_key(*((lpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(srtl_reach(lpt), @_vcc_oset_union(srtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_keys(rpt), @_vcc_intset_union(sll_keys(*((rpt->next))), @_vcc_intset_singleton(*((rpt->key)))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#rpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_list_len_next(rpt), unchecked+(sll_list_len_next(*((rpt->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#rpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(rsrtl(rpt), &&(&&(rsrtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, rsrtl_reach(*((rpt->next)))))), >=(*((rpt->key)), sll_max_key(*((rpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(rsrtl_reach(rpt), @_vcc_oset_union(rsrtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll(rpt), &&(sll(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, sll_reach(*((rpt->next)))))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_reach(rpt), @_vcc_oset_union(sll_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_max_key(rpt), @\int_max(*((rpt->key)), sll_max_key(*((rpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_min_key(rpt), @\int_min(*((rpt->key)), sll_min_key(*((rpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(srtl(rpt), &&(&&(srtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, srtl_reach(*((rpt->next)))))), <=(*((rpt->key)), sll_min_key(*((rpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(srtl_reach(rpt), @_vcc_oset_union(srtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_keys(t2), @_vcc_intset_union(sll_keys(*((t2->next))), @_vcc_intset_singleton(*((t2->key)))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_list_len_next(t2), unchecked+(sll_list_len_next(*((t2->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(rsrtl(t2), &&(&&(rsrtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, rsrtl_reach(*((t2->next)))))), >=(*((t2->key)), sll_max_key(*((t2->next))))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(rsrtl_reach(t2), @_vcc_oset_union(rsrtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll(t2), &&(sll(*((t2->next))), unchecked!(@_vcc_oset_in(t2, sll_reach(*((t2->next)))))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_reach(t2), @_vcc_oset_union(sll_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_max_key(t2), @\int_max(*((t2->key)), sll_max_key(*((t2->next)))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_min_key(t2), @\int_min(*((t2->key)), sll_min_key(*((t2->next)))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(srtl(t2), &&(&&(srtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, srtl_reach(*((t2->next)))))), <=(*((t2->key)), sll_min_key(*((t2->next))))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(srtl_reach(t2), @_vcc_oset_union(srtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_keys(t1), @_vcc_intset_union(sll_keys(*((t1->next))), @_vcc_intset_singleton(*((t1->key)))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_list_len_next(t1), unchecked+(sll_list_len_next(*((t1->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(rsrtl(t1), &&(&&(rsrtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, rsrtl_reach(*((t1->next)))))), >=(*((t1->key)), sll_max_key(*((t1->next))))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(rsrtl_reach(t1), @_vcc_oset_union(rsrtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll(t1), &&(sll(*((t1->next))), unchecked!(@_vcc_oset_in(t1, sll_reach(*((t1->next)))))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_reach(t1), @_vcc_oset_union(sll_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_max_key(t1), @\int_max(*((t1->key)), sll_max_key(*((t1->next)))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_min_key(t1), @\int_min(*((t1->key)), sll_min_key(*((t1->next)))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(srtl(t1), &&(&&(srtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, srtl_reach(*((t1->next)))))), <=(*((t1->key)), sll_min_key(*((t1->next))))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(srtl_reach(t1), @_vcc_oset_union(srtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_keys(curr), @_vcc_intset_union(sll_keys(*((curr->next))), @_vcc_intset_singleton(*((curr->key)))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_list_len_next(curr), unchecked+(sll_list_len_next(*((curr->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(rsrtl(curr), &&(&&(rsrtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, rsrtl_reach(*((curr->next)))))), >=(*((curr->key)), sll_max_key(*((curr->next))))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(rsrtl_reach(curr), @_vcc_oset_union(rsrtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll(curr), &&(sll(*((curr->next))), unchecked!(@_vcc_oset_in(curr, sll_reach(*((curr->next)))))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_reach(curr), @_vcc_oset_union(sll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_max_key(curr), @\int_max(*((curr->key)), sll_max_key(*((curr->next)))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_min_key(curr), @\int_min(*((curr->key)), sll_min_key(*((curr->next)))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(srtl(curr), &&(&&(srtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, srtl_reach(*((curr->next)))))), <=(*((curr->key)), sll_min_key(*((curr->next))))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(srtl_reach(curr), @_vcc_oset_union(srtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_keys(lpt), @_vcc_intset_union(sll_keys(*((lpt->next))), @_vcc_intset_singleton(*((lpt->key)))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#lpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_list_len_next(lpt), unchecked+(sll_list_len_next(*((lpt->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#lpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(rsrtl(lpt), &&(&&(rsrtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, rsrtl_reach(*((lpt->next)))))), >=(*((lpt->key)), sll_max_key(*((lpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(rsrtl_reach(lpt), @_vcc_oset_union(rsrtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll(lpt), &&(sll(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, sll_reach(*((lpt->next)))))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_reach(lpt), @_vcc_oset_union(sll_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_max_key(lpt), @\int_max(*((lpt->key)), sll_max_key(*((lpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_min_key(lpt), @\int_min(*((lpt->key)), sll_min_key(*((lpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(srtl(lpt), &&(&&(srtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, srtl_reach(*((lpt->next)))))), <=(*((lpt->key)), sll_min_key(*((lpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(srtl_reach(lpt), @_vcc_oset_union(srtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
                // lpt := curr; 
                L#lpt := $phys_ptr_cast(L#curr, ^s_node);
                // assert sll_lseg(curr3, curr3); 
                assert F#sll_lseg($s, $phys_ptr_cast(SL#curr3, ^s_node), $phys_ptr_cast(SL#curr3, ^s_node));
                // assume sll_lseg(curr3, curr3); 
                assume F#sll_lseg($s, $phys_ptr_cast(SL#curr3, ^s_node), $phys_ptr_cast(SL#curr3, ^s_node));
                // assert srtl_lseg(curr3, curr3); 
                assert F#srtl_lseg($s, $phys_ptr_cast(SL#curr3, ^s_node), $phys_ptr_cast(SL#curr3, ^s_node));
                // assume srtl_lseg(curr3, curr3); 
                assume F#srtl_lseg($s, $phys_ptr_cast(SL#curr3, ^s_node), $phys_ptr_cast(SL#curr3, ^s_node));
                // assert sll_lseg(l1, l1); 
                assert F#sll_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
                // assume sll_lseg(l1, l1); 
                assume F#sll_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
                // assert srtl_lseg(l1, l1); 
                assert F#srtl_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
                // assume srtl_lseg(l1, l1); 
                assume F#srtl_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
                // assert sll_lseg(l0, l0); 
                assert F#sll_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
                // assume sll_lseg(l0, l0); 
                assume F#sll_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
                // assert srtl_lseg(l0, l0); 
                assert F#srtl_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
                // assume srtl_lseg(l0, l0); 
                assume F#srtl_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
                // assert sll_lseg(curr, curr); 
                assert F#sll_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
                // assume sll_lseg(curr, curr); 
                assume F#sll_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
                // assert srtl_lseg(curr, curr); 
                assert F#srtl_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
                // assume srtl_lseg(curr, curr); 
                assume F#srtl_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
                // assert sll_lseg(lpt, lpt); 
                assert F#sll_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
                // assume sll_lseg(lpt, lpt); 
                assume F#sll_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
                // assert srtl_lseg(lpt, lpt); 
                assert F#srtl_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
                // assume srtl_lseg(lpt, lpt); 
                assume F#srtl_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
                // assert sll_lseg(rpt, rpt); 
                assert F#sll_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
                // assume sll_lseg(rpt, rpt); 
                assume F#sll_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
                // assert srtl_lseg(rpt, rpt); 
                assert F#srtl_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
                // assume srtl_lseg(rpt, rpt); 
                assume F#srtl_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
                // assert sll_lseg(tmp, tmp); 
                assert F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
                // assume sll_lseg(tmp, tmp); 
                assume F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
                // assert srtl_lseg(tmp, tmp); 
                assert F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
                // assume srtl_lseg(tmp, tmp); 
                assume F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
                // assert sll_lseg(t2, t2); 
                assert F#sll_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
                // assume sll_lseg(t2, t2); 
                assume F#sll_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
                // assert srtl_lseg(t2, t2); 
                assert F#srtl_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
                // assume srtl_lseg(t2, t2); 
                assume F#srtl_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
                // assert sll_lseg(t1, t1); 
                assert F#sll_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
                // assume sll_lseg(t1, t1); 
                assume F#sll_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
                // assert srtl_lseg(t1, t1); 
                assert F#srtl_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
                // assume srtl_lseg(t1, t1); 
                assume F#srtl_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
                // assert sll_lseg(l, l); 
                assert F#sll_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
                // assume sll_lseg(l, l); 
                assume F#sll_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
                // assert srtl_lseg(l, l); 
                assert F#srtl_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
                // assume srtl_lseg(l, l); 
                assume F#srtl_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
            }
            else
            {
              anon4:
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(sll_keys(curr3), @_vcc_intset_union(sll_keys(*((curr3->next))), @_vcc_intset_singleton(*((curr3->key)))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(sll_list_len_next(curr3), unchecked+(sll_list_len_next(*((curr3->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(curr3), @_vcc_ptr_neq_null(*((curr3->next)))), ==(rsrtl(curr3), &&(&&(rsrtl(*((curr3->next))), unchecked!(@_vcc_oset_in(curr3, rsrtl_reach(*((curr3->next)))))), >=(*((curr3->key)), sll_max_key(*((curr3->next))))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(rsrtl_reach(curr3), @_vcc_oset_union(rsrtl_reach(*((curr3->next))), @_vcc_oset_singleton(curr3)))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr3, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(sll(curr3), &&(sll(*((curr3->next))), unchecked!(@_vcc_oset_in(curr3, sll_reach(*((curr3->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(sll_reach(curr3), @_vcc_oset_union(sll_reach(*((curr3->next))), @_vcc_oset_singleton(curr3)))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr3, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr3), @_vcc_ptr_neq_null(*((curr3->next)))), ==(sll_max_key(curr3), @\int_max(*((curr3->key)), sll_max_key(*((curr3->next)))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr3), @_vcc_ptr_neq_null(*((curr3->next)))), ==(sll_min_key(curr3), @\int_min(*((curr3->key)), sll_min_key(*((curr3->next)))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr3), @_vcc_ptr_neq_null(*((curr3->next)))), ==(srtl(curr3), &&(&&(srtl(*((curr3->next))), unchecked!(@_vcc_oset_in(curr3, srtl_reach(*((curr3->next)))))), <=(*((curr3->key)), sll_min_key(*((curr3->next))))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(srtl_reach(curr3), @_vcc_oset_union(srtl_reach(*((curr3->next))), @_vcc_oset_singleton(curr3)))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr3, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_keys(l1), @_vcc_intset_union(sll_keys(*((l1->next))), @_vcc_intset_singleton(*((l1->key)))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_list_len_next(l1), unchecked+(sll_list_len_next(*((l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(rsrtl(l1), &&(&&(rsrtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, rsrtl_reach(*((l1->next)))))), >=(*((l1->key)), sll_max_key(*((l1->next))))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(rsrtl_reach(l1), @_vcc_oset_union(rsrtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll(l1), &&(sll(*((l1->next))), unchecked!(@_vcc_oset_in(l1, sll_reach(*((l1->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_reach(l1), @_vcc_oset_union(sll_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_max_key(l1), @\int_max(*((l1->key)), sll_max_key(*((l1->next)))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_min_key(l1), @\int_min(*((l1->key)), sll_min_key(*((l1->next)))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(srtl(l1), &&(&&(srtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, srtl_reach(*((l1->next)))))), <=(*((l1->key)), sll_min_key(*((l1->next))))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(srtl_reach(l1), @_vcc_oset_union(srtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_keys(l0), @_vcc_intset_union(sll_keys(*((l0->next))), @_vcc_intset_singleton(*((l0->key)))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l0, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_list_len_next(l0), unchecked+(sll_list_len_next(*((l0->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l0, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(rsrtl(l0), &&(&&(rsrtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, rsrtl_reach(*((l0->next)))))), >=(*((l0->key)), sll_max_key(*((l0->next))))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(rsrtl_reach(l0), @_vcc_oset_union(rsrtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll(l0), &&(sll(*((l0->next))), unchecked!(@_vcc_oset_in(l0, sll_reach(*((l0->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_reach(l0), @_vcc_oset_union(sll_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_max_key(l0), @\int_max(*((l0->key)), sll_max_key(*((l0->next)))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_min_key(l0), @\int_min(*((l0->key)), sll_min_key(*((l0->next)))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(srtl(l0), &&(&&(srtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, srtl_reach(*((l0->next)))))), <=(*((l0->key)), sll_min_key(*((l0->next))))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(srtl_reach(l0), @_vcc_oset_union(srtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_keys(curr), @_vcc_intset_union(sll_keys(*((curr->next))), @_vcc_intset_singleton(*((curr->key)))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_list_len_next(curr), unchecked+(sll_list_len_next(*((curr->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(rsrtl(curr), &&(&&(rsrtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, rsrtl_reach(*((curr->next)))))), >=(*((curr->key)), sll_max_key(*((curr->next))))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(rsrtl_reach(curr), @_vcc_oset_union(rsrtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll(curr), &&(sll(*((curr->next))), unchecked!(@_vcc_oset_in(curr, sll_reach(*((curr->next)))))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_reach(curr), @_vcc_oset_union(sll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_max_key(curr), @\int_max(*((curr->key)), sll_max_key(*((curr->next)))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_min_key(curr), @\int_min(*((curr->key)), sll_min_key(*((curr->next)))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(srtl(curr), &&(&&(srtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, srtl_reach(*((curr->next)))))), <=(*((curr->key)), sll_min_key(*((curr->next))))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(srtl_reach(curr), @_vcc_oset_union(srtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_keys(lpt), @_vcc_intset_union(sll_keys(*((lpt->next))), @_vcc_intset_singleton(*((lpt->key)))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#lpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_list_len_next(lpt), unchecked+(sll_list_len_next(*((lpt->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#lpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(rsrtl(lpt), &&(&&(rsrtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, rsrtl_reach(*((lpt->next)))))), >=(*((lpt->key)), sll_max_key(*((lpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(rsrtl_reach(lpt), @_vcc_oset_union(rsrtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll(lpt), &&(sll(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, sll_reach(*((lpt->next)))))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_reach(lpt), @_vcc_oset_union(sll_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_max_key(lpt), @\int_max(*((lpt->key)), sll_max_key(*((lpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_min_key(lpt), @\int_min(*((lpt->key)), sll_min_key(*((lpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(srtl(lpt), &&(&&(srtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, srtl_reach(*((lpt->next)))))), <=(*((lpt->key)), sll_min_key(*((lpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(srtl_reach(lpt), @_vcc_oset_union(srtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_keys(rpt), @_vcc_intset_union(sll_keys(*((rpt->next))), @_vcc_intset_singleton(*((rpt->key)))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#rpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_list_len_next(rpt), unchecked+(sll_list_len_next(*((rpt->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#rpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(rsrtl(rpt), &&(&&(rsrtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, rsrtl_reach(*((rpt->next)))))), >=(*((rpt->key)), sll_max_key(*((rpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(rsrtl_reach(rpt), @_vcc_oset_union(rsrtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll(rpt), &&(sll(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, sll_reach(*((rpt->next)))))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_reach(rpt), @_vcc_oset_union(sll_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_max_key(rpt), @\int_max(*((rpt->key)), sll_max_key(*((rpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_min_key(rpt), @\int_min(*((rpt->key)), sll_min_key(*((rpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(srtl(rpt), &&(&&(srtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, srtl_reach(*((rpt->next)))))), <=(*((rpt->key)), sll_min_key(*((rpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(srtl_reach(rpt), @_vcc_oset_union(srtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_keys(t2), @_vcc_intset_union(sll_keys(*((t2->next))), @_vcc_intset_singleton(*((t2->key)))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_list_len_next(t2), unchecked+(sll_list_len_next(*((t2->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(rsrtl(t2), &&(&&(rsrtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, rsrtl_reach(*((t2->next)))))), >=(*((t2->key)), sll_max_key(*((t2->next))))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(rsrtl_reach(t2), @_vcc_oset_union(rsrtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll(t2), &&(sll(*((t2->next))), unchecked!(@_vcc_oset_in(t2, sll_reach(*((t2->next)))))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_reach(t2), @_vcc_oset_union(sll_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_max_key(t2), @\int_max(*((t2->key)), sll_max_key(*((t2->next)))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_min_key(t2), @\int_min(*((t2->key)), sll_min_key(*((t2->next)))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(srtl(t2), &&(&&(srtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, srtl_reach(*((t2->next)))))), <=(*((t2->key)), sll_min_key(*((t2->next))))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(srtl_reach(t2), @_vcc_oset_union(srtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_keys(t1), @_vcc_intset_union(sll_keys(*((t1->next))), @_vcc_intset_singleton(*((t1->key)))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_list_len_next(t1), unchecked+(sll_list_len_next(*((t1->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(rsrtl(t1), &&(&&(rsrtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, rsrtl_reach(*((t1->next)))))), >=(*((t1->key)), sll_max_key(*((t1->next))))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(rsrtl_reach(t1), @_vcc_oset_union(rsrtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll(t1), &&(sll(*((t1->next))), unchecked!(@_vcc_oset_in(t1, sll_reach(*((t1->next)))))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_reach(t1), @_vcc_oset_union(sll_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_max_key(t1), @\int_max(*((t1->key)), sll_max_key(*((t1->next)))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_min_key(t1), @\int_min(*((t1->key)), sll_min_key(*((t1->next)))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(srtl(t1), &&(&&(srtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, srtl_reach(*((t1->next)))))), <=(*((t1->key)), sll_min_key(*((t1->next))))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(srtl_reach(t1), @_vcc_oset_union(srtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
                // _math \state _dryad_S2#0; 
                // _dryad_S2#0 := @_vcc_current_state(@state); 
                _dryad_S2#0 := $current_state($s);
                // _math \state stmtexpr0#7; 
                // stmtexpr0#7 := _dryad_S2#0; 
                stmtexpr0#7 := _dryad_S2#0;
                // assert @prim_writes_check((curr->next)); 
                assert $writable_prim($s, #wrTime$3^10.3, $dot($phys_ptr_cast(L#curr, ^s_node), s_node.next));
                // *(curr->next) := rpt; 
                call $write_int(s_node.next, $phys_ptr_cast(L#curr, ^s_node), $ptr_to_int($phys_ptr_cast(L#rpt, ^s_node)));
                assume $full_stop_ext(#tok$3^58.4, $s);
                // _math \state _dryad_S3#1; 
                // _dryad_S3#1 := @_vcc_current_state(@state); 
                _dryad_S3#1 := $current_state($s);
                // _math \state stmtexpr1#8; 
                // stmtexpr1#8 := _dryad_S3#1; 
                stmtexpr1#8 := _dryad_S3#1;
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(curr3)))), ==(old(_dryad_S2#0, sll_keys(curr3)), old(_dryad_S3#1, sll_keys(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#sll_keys(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node)) == F#sll_keys(_dryad_S3#1, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(curr3)))), ==(old(_dryad_S2#0, sll_list_len_next(curr3)), old(_dryad_S3#1, sll_list_len_next(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node)) == F#sll_list_len_next(_dryad_S3#1, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(curr3)))), ==(old(_dryad_S2#0, rsrtl(curr3)), old(_dryad_S3#1, rsrtl(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#rsrtl(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node)) == F#rsrtl(_dryad_S3#1, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(curr3)))), ==(old(_dryad_S2#0, rsrtl_reach(curr3)), old(_dryad_S3#1, rsrtl_reach(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node)) == F#rsrtl_reach(_dryad_S3#1, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(curr3)))), ==(old(_dryad_S2#0, sll(curr3)), old(_dryad_S3#1, sll(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#sll(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node)) == F#sll(_dryad_S3#1, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(curr3)))), ==(old(_dryad_S2#0, sll_reach(curr3)), old(_dryad_S3#1, sll_reach(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node)) == F#sll_reach(_dryad_S3#1, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(curr3)))), ==(old(_dryad_S2#0, sll_max_key(curr3)), old(_dryad_S3#1, sll_max_key(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#sll_max_key(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node)) == F#sll_max_key(_dryad_S3#1, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(curr3)))), ==(old(_dryad_S2#0, sll_min_key(curr3)), old(_dryad_S3#1, sll_min_key(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#sll_min_key(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node)) == F#sll_min_key(_dryad_S3#1, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(curr3)))), ==(old(_dryad_S2#0, srtl(curr3)), old(_dryad_S3#1, srtl(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#srtl(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node)) == F#srtl(_dryad_S3#1, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(curr3)))), ==(old(_dryad_S2#0, srtl_reach(curr3)), old(_dryad_S3#1, srtl_reach(curr3)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node))) ==> F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#curr3, ^s_node)) == F#srtl_reach(_dryad_S3#1, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l1)))), ==(old(_dryad_S2#0, sll_keys(l1)), old(_dryad_S3#1, sll_keys(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_keys(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_keys(_dryad_S3#1, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l1)))), ==(old(_dryad_S2#0, sll_list_len_next(l1)), old(_dryad_S3#1, sll_list_len_next(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_list_len_next(_dryad_S3#1, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(l1)))), ==(old(_dryad_S2#0, rsrtl(l1)), old(_dryad_S3#1, rsrtl(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#rsrtl(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node)) == F#rsrtl(_dryad_S3#1, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(l1)))), ==(old(_dryad_S2#0, rsrtl_reach(l1)), old(_dryad_S3#1, rsrtl_reach(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node)) == F#rsrtl_reach(_dryad_S3#1, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l1)))), ==(old(_dryad_S2#0, sll(l1)), old(_dryad_S3#1, sll(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll(_dryad_S3#1, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l1)))), ==(old(_dryad_S2#0, sll_reach(l1)), old(_dryad_S3#1, sll_reach(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_reach(_dryad_S3#1, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l1)))), ==(old(_dryad_S2#0, sll_max_key(l1)), old(_dryad_S3#1, sll_max_key(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_max_key(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_max_key(_dryad_S3#1, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l1)))), ==(old(_dryad_S2#0, sll_min_key(l1)), old(_dryad_S3#1, sll_min_key(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_min_key(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_min_key(_dryad_S3#1, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(l1)))), ==(old(_dryad_S2#0, srtl(l1)), old(_dryad_S3#1, srtl(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#srtl(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node)) == F#srtl(_dryad_S3#1, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(l1)))), ==(old(_dryad_S2#0, srtl_reach(l1)), old(_dryad_S3#1, srtl_reach(l1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#l1, ^s_node)) == F#srtl_reach(_dryad_S3#1, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l0)))), ==(old(_dryad_S2#0, sll_keys(l0)), old(_dryad_S3#1, sll_keys(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_keys(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_keys(_dryad_S3#1, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l0)))), ==(old(_dryad_S2#0, sll_list_len_next(l0)), old(_dryad_S3#1, sll_list_len_next(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_list_len_next(_dryad_S3#1, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(l0)))), ==(old(_dryad_S2#0, rsrtl(l0)), old(_dryad_S3#1, rsrtl(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#rsrtl(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node)) == F#rsrtl(_dryad_S3#1, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(l0)))), ==(old(_dryad_S2#0, rsrtl_reach(l0)), old(_dryad_S3#1, rsrtl_reach(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node)) == F#rsrtl_reach(_dryad_S3#1, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l0)))), ==(old(_dryad_S2#0, sll(l0)), old(_dryad_S3#1, sll(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll(_dryad_S3#1, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l0)))), ==(old(_dryad_S2#0, sll_reach(l0)), old(_dryad_S3#1, sll_reach(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_reach(_dryad_S3#1, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l0)))), ==(old(_dryad_S2#0, sll_max_key(l0)), old(_dryad_S3#1, sll_max_key(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_max_key(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_max_key(_dryad_S3#1, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l0)))), ==(old(_dryad_S2#0, sll_min_key(l0)), old(_dryad_S3#1, sll_min_key(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_min_key(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_min_key(_dryad_S3#1, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(l0)))), ==(old(_dryad_S2#0, srtl(l0)), old(_dryad_S3#1, srtl(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#srtl(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node)) == F#srtl(_dryad_S3#1, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(l0)))), ==(old(_dryad_S2#0, srtl_reach(l0)), old(_dryad_S3#1, srtl_reach(l0)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(SL#l0, ^s_node)) == F#srtl_reach(_dryad_S3#1, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(lpt)))), ==(old(_dryad_S2#0, sll_keys(lpt)), old(_dryad_S3#1, sll_keys(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_keys(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_keys(_dryad_S3#1, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(lpt)))), ==(old(_dryad_S2#0, sll_list_len_next(lpt)), old(_dryad_S3#1, sll_list_len_next(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_list_len_next(_dryad_S3#1, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(lpt)))), ==(old(_dryad_S2#0, rsrtl(lpt)), old(_dryad_S3#1, rsrtl(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#rsrtl(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node)) == F#rsrtl(_dryad_S3#1, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(lpt)))), ==(old(_dryad_S2#0, rsrtl_reach(lpt)), old(_dryad_S3#1, rsrtl_reach(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node)) == F#rsrtl_reach(_dryad_S3#1, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(lpt)))), ==(old(_dryad_S2#0, sll(lpt)), old(_dryad_S3#1, sll(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll(_dryad_S3#1, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(lpt)))), ==(old(_dryad_S2#0, sll_reach(lpt)), old(_dryad_S3#1, sll_reach(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_reach(_dryad_S3#1, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(lpt)))), ==(old(_dryad_S2#0, sll_max_key(lpt)), old(_dryad_S3#1, sll_max_key(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_max_key(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_max_key(_dryad_S3#1, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(lpt)))), ==(old(_dryad_S2#0, sll_min_key(lpt)), old(_dryad_S3#1, sll_min_key(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_min_key(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_min_key(_dryad_S3#1, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(lpt)))), ==(old(_dryad_S2#0, srtl(lpt)), old(_dryad_S3#1, srtl(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#srtl(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node)) == F#srtl(_dryad_S3#1, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(lpt)))), ==(old(_dryad_S2#0, srtl_reach(lpt)), old(_dryad_S3#1, srtl_reach(lpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(L#lpt, ^s_node)) == F#srtl_reach(_dryad_S3#1, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(rpt)))), ==(old(_dryad_S2#0, sll_keys(rpt)), old(_dryad_S3#1, sll_keys(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_keys(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_keys(_dryad_S3#1, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(rpt)))), ==(old(_dryad_S2#0, sll_list_len_next(rpt)), old(_dryad_S3#1, sll_list_len_next(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_list_len_next(_dryad_S3#1, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(rpt)))), ==(old(_dryad_S2#0, rsrtl(rpt)), old(_dryad_S3#1, rsrtl(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#rsrtl(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node)) == F#rsrtl(_dryad_S3#1, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(rpt)))), ==(old(_dryad_S2#0, rsrtl_reach(rpt)), old(_dryad_S3#1, rsrtl_reach(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node)) == F#rsrtl_reach(_dryad_S3#1, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(rpt)))), ==(old(_dryad_S2#0, sll(rpt)), old(_dryad_S3#1, sll(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll(_dryad_S3#1, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(rpt)))), ==(old(_dryad_S2#0, sll_reach(rpt)), old(_dryad_S3#1, sll_reach(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_reach(_dryad_S3#1, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(rpt)))), ==(old(_dryad_S2#0, sll_max_key(rpt)), old(_dryad_S3#1, sll_max_key(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_max_key(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_max_key(_dryad_S3#1, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(rpt)))), ==(old(_dryad_S2#0, sll_min_key(rpt)), old(_dryad_S3#1, sll_min_key(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_min_key(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_min_key(_dryad_S3#1, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(rpt)))), ==(old(_dryad_S2#0, srtl(rpt)), old(_dryad_S3#1, srtl(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#srtl(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node)) == F#srtl(_dryad_S3#1, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(rpt)))), ==(old(_dryad_S2#0, srtl_reach(rpt)), old(_dryad_S3#1, srtl_reach(rpt)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(L#rpt, ^s_node)) == F#srtl_reach(_dryad_S3#1, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(tmp)))), ==(old(_dryad_S2#0, sll_keys(tmp)), old(_dryad_S3#1, sll_keys(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_keys(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_keys(_dryad_S3#1, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(tmp)))), ==(old(_dryad_S2#0, sll_list_len_next(tmp)), old(_dryad_S3#1, sll_list_len_next(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(_dryad_S3#1, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(tmp)))), ==(old(_dryad_S2#0, rsrtl(tmp)), old(_dryad_S3#1, rsrtl(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl(_dryad_S3#1, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(tmp)))), ==(old(_dryad_S2#0, rsrtl_reach(tmp)), old(_dryad_S3#1, rsrtl_reach(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(_dryad_S3#1, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(tmp)))), ==(old(_dryad_S2#0, sll(tmp)), old(_dryad_S3#1, sll(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(_dryad_S3#1, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(tmp)))), ==(old(_dryad_S2#0, sll_reach(tmp)), old(_dryad_S3#1, sll_reach(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(_dryad_S3#1, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(tmp)))), ==(old(_dryad_S2#0, sll_max_key(tmp)), old(_dryad_S3#1, sll_max_key(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_max_key(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_max_key(_dryad_S3#1, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(tmp)))), ==(old(_dryad_S2#0, sll_min_key(tmp)), old(_dryad_S3#1, sll_min_key(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_min_key(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_min_key(_dryad_S3#1, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(tmp)))), ==(old(_dryad_S2#0, srtl(tmp)), old(_dryad_S3#1, srtl(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl(_dryad_S3#1, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(tmp)))), ==(old(_dryad_S2#0, srtl_reach(tmp)), old(_dryad_S3#1, srtl_reach(tmp)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(_dryad_S3#1, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(t2)))), ==(old(_dryad_S2#0, sll_keys(t2)), old(_dryad_S3#1, sll_keys(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_keys(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_keys(_dryad_S3#1, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(t2)))), ==(old(_dryad_S2#0, sll_list_len_next(t2)), old(_dryad_S3#1, sll_list_len_next(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_list_len_next(_dryad_S3#1, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(t2)))), ==(old(_dryad_S2#0, rsrtl(t2)), old(_dryad_S3#1, rsrtl(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#rsrtl(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node)) == F#rsrtl(_dryad_S3#1, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(t2)))), ==(old(_dryad_S2#0, rsrtl_reach(t2)), old(_dryad_S3#1, rsrtl_reach(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node)) == F#rsrtl_reach(_dryad_S3#1, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(t2)))), ==(old(_dryad_S2#0, sll(t2)), old(_dryad_S3#1, sll(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node)) == F#sll(_dryad_S3#1, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(t2)))), ==(old(_dryad_S2#0, sll_reach(t2)), old(_dryad_S3#1, sll_reach(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_reach(_dryad_S3#1, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(t2)))), ==(old(_dryad_S2#0, sll_max_key(t2)), old(_dryad_S3#1, sll_max_key(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_max_key(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_max_key(_dryad_S3#1, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(t2)))), ==(old(_dryad_S2#0, sll_min_key(t2)), old(_dryad_S3#1, sll_min_key(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_min_key(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_min_key(_dryad_S3#1, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(t2)))), ==(old(_dryad_S2#0, srtl(t2)), old(_dryad_S3#1, srtl(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#srtl(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node)) == F#srtl(_dryad_S3#1, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(t2)))), ==(old(_dryad_S2#0, srtl_reach(t2)), old(_dryad_S3#1, srtl_reach(t2)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node))) ==> F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(L#t2, ^s_node)) == F#srtl_reach(_dryad_S3#1, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(t1)))), ==(old(_dryad_S2#0, sll_keys(t1)), old(_dryad_S3#1, sll_keys(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_keys(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_keys(_dryad_S3#1, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(t1)))), ==(old(_dryad_S2#0, sll_list_len_next(t1)), old(_dryad_S3#1, sll_list_len_next(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_list_len_next(_dryad_S3#1, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(t1)))), ==(old(_dryad_S2#0, rsrtl(t1)), old(_dryad_S3#1, rsrtl(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#rsrtl(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node)) == F#rsrtl(_dryad_S3#1, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(t1)))), ==(old(_dryad_S2#0, rsrtl_reach(t1)), old(_dryad_S3#1, rsrtl_reach(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node)) == F#rsrtl_reach(_dryad_S3#1, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(t1)))), ==(old(_dryad_S2#0, sll(t1)), old(_dryad_S3#1, sll(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node)) == F#sll(_dryad_S3#1, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(t1)))), ==(old(_dryad_S2#0, sll_reach(t1)), old(_dryad_S3#1, sll_reach(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_reach(_dryad_S3#1, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(t1)))), ==(old(_dryad_S2#0, sll_max_key(t1)), old(_dryad_S3#1, sll_max_key(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_max_key(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_max_key(_dryad_S3#1, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(t1)))), ==(old(_dryad_S2#0, sll_min_key(t1)), old(_dryad_S3#1, sll_min_key(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_min_key(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_min_key(_dryad_S3#1, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(t1)))), ==(old(_dryad_S2#0, srtl(t1)), old(_dryad_S3#1, srtl(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#srtl(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node)) == F#srtl(_dryad_S3#1, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(t1)))), ==(old(_dryad_S2#0, srtl_reach(t1)), old(_dryad_S3#1, srtl_reach(t1)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node))) ==> F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(L#t1, ^s_node)) == F#srtl_reach(_dryad_S3#1, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l)))), ==(old(_dryad_S2#0, sll_keys(l)), old(_dryad_S3#1, sll_keys(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_keys(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node)) == F#sll_keys(_dryad_S3#1, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l)))), ==(old(_dryad_S2#0, sll_list_len_next(l)), old(_dryad_S3#1, sll_list_len_next(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node)) == F#sll_list_len_next(_dryad_S3#1, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(l)))), ==(old(_dryad_S2#0, rsrtl(l)), old(_dryad_S3#1, rsrtl(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node))) ==> F#rsrtl(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node)) == F#rsrtl(_dryad_S3#1, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, rsrtl_reach(l)))), ==(old(_dryad_S2#0, rsrtl_reach(l)), old(_dryad_S3#1, rsrtl_reach(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node)) == F#rsrtl_reach(_dryad_S3#1, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l)))), ==(old(_dryad_S2#0, sll(l)), old(_dryad_S3#1, sll(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node)) == F#sll(_dryad_S3#1, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l)))), ==(old(_dryad_S2#0, sll_reach(l)), old(_dryad_S3#1, sll_reach(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_reach(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node)) == F#sll_reach(_dryad_S3#1, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l)))), ==(old(_dryad_S2#0, sll_max_key(l)), old(_dryad_S3#1, sll_max_key(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_max_key(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node)) == F#sll_max_key(_dryad_S3#1, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, sll_reach(l)))), ==(old(_dryad_S2#0, sll_min_key(l)), old(_dryad_S3#1, sll_min_key(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_min_key(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node)) == F#sll_min_key(_dryad_S3#1, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(l)))), ==(old(_dryad_S2#0, srtl(l)), old(_dryad_S3#1, srtl(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node))) ==> F#srtl(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node)) == F#srtl(_dryad_S3#1, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(unchecked!(@_vcc_oset_in(curr, old(_dryad_S2#0, srtl_reach(l)))), ==(old(_dryad_S2#0, srtl_reach(l)), old(_dryad_S3#1, srtl_reach(l)))); 
                assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node))) ==> F#srtl_reach(_dryad_S2#0, $phys_ptr_cast(P#l, ^s_node)) == F#srtl_reach(_dryad_S3#1, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr3)), ==(*((curr3->key)), old(_dryad_S2#0, *((curr3->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(SL#curr3, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)) == $rd_inv(_dryad_S2#0, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, curr3)), @_vcc_ptr_eq_pure(*((curr3->next)), old(_dryad_S2#0, *((curr3->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(SL#curr3, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#0, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, l1)), ==(*((l1->key)), old(_dryad_S2#0, *((l1->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(SL#l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) == $rd_inv(_dryad_S2#0, s_node.key, $phys_ptr_cast(SL#l1, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, l1)), @_vcc_ptr_eq_pure(*((l1->next)), old(_dryad_S2#0, *((l1->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(SL#l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#0, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, l0)), ==(*((l0->key)), old(_dryad_S2#0, *((l0->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(SL#l0, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) == $rd_inv(_dryad_S2#0, s_node.key, $phys_ptr_cast(SL#l0, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, l0)), @_vcc_ptr_eq_pure(*((l0->next)), old(_dryad_S2#0, *((l0->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(SL#l0, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#0, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, lpt)), ==(*((lpt->key)), old(_dryad_S2#0, *((lpt->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#lpt, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) == $rd_inv(_dryad_S2#0, s_node.key, $phys_ptr_cast(L#lpt, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, lpt)), @_vcc_ptr_eq_pure(*((lpt->next)), old(_dryad_S2#0, *((lpt->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#lpt, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#0, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, rpt)), ==(*((rpt->key)), old(_dryad_S2#0, *((rpt->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#rpt, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) == $rd_inv(_dryad_S2#0, s_node.key, $phys_ptr_cast(L#rpt, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, rpt)), @_vcc_ptr_eq_pure(*((rpt->next)), old(_dryad_S2#0, *((rpt->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#rpt, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#0, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, tmp)), ==(*((tmp->key)), old(_dryad_S2#0, *((tmp->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) == $rd_inv(_dryad_S2#0, s_node.key, $phys_ptr_cast(L#tmp, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, tmp)), @_vcc_ptr_eq_pure(*((tmp->next)), old(_dryad_S2#0, *((tmp->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#0, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, t2)), ==(*((t2->key)), old(_dryad_S2#0, *((t2->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#t2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) == $rd_inv(_dryad_S2#0, s_node.key, $phys_ptr_cast(L#t2, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, t2)), @_vcc_ptr_eq_pure(*((t2->next)), old(_dryad_S2#0, *((t2->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#t2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#0, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, t1)), ==(*((t1->key)), old(_dryad_S2#0, *((t1->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#t1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) == $rd_inv(_dryad_S2#0, s_node.key, $phys_ptr_cast(L#t1, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, t1)), @_vcc_ptr_eq_pure(*((t1->next)), old(_dryad_S2#0, *((t1->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(L#t1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#0, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, l)), ==(*((l->key)), old(_dryad_S2#0, *((l->key))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(P#l, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) == $rd_inv(_dryad_S2#0, s_node.key, $phys_ptr_cast(P#l, ^s_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(curr, l)), @_vcc_ptr_eq_pure(*((l->next)), old(_dryad_S2#0, *((l->next))))); 
                assume !($phys_ptr_cast(L#curr, ^s_node) == $phys_ptr_cast(P#l, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#0, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node);
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(sll_keys(curr3), @_vcc_intset_union(sll_keys(*((curr3->next))), @_vcc_intset_singleton(*((curr3->key)))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(sll_list_len_next(curr3), unchecked+(sll_list_len_next(*((curr3->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(curr3), @_vcc_ptr_neq_null(*((curr3->next)))), ==(rsrtl(curr3), &&(&&(rsrtl(*((curr3->next))), unchecked!(@_vcc_oset_in(curr3, rsrtl_reach(*((curr3->next)))))), >=(*((curr3->key)), sll_max_key(*((curr3->next))))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(rsrtl_reach(curr3), @_vcc_oset_union(rsrtl_reach(*((curr3->next))), @_vcc_oset_singleton(curr3)))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr3, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(sll(curr3), &&(sll(*((curr3->next))), unchecked!(@_vcc_oset_in(curr3, sll_reach(*((curr3->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(sll_reach(curr3), @_vcc_oset_union(sll_reach(*((curr3->next))), @_vcc_oset_singleton(curr3)))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr3, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr3), @_vcc_ptr_neq_null(*((curr3->next)))), ==(sll_max_key(curr3), @\int_max(*((curr3->key)), sll_max_key(*((curr3->next)))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr3), @_vcc_ptr_neq_null(*((curr3->next)))), ==(sll_min_key(curr3), @\int_min(*((curr3->key)), sll_min_key(*((curr3->next)))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr3), @_vcc_ptr_neq_null(*((curr3->next)))), ==(srtl(curr3), &&(&&(srtl(*((curr3->next))), unchecked!(@_vcc_oset_in(curr3, srtl_reach(*((curr3->next)))))), <=(*((curr3->key)), sll_min_key(*((curr3->next))))))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr3), ==(srtl_reach(curr3), @_vcc_oset_union(srtl_reach(*((curr3->next))), @_vcc_oset_singleton(curr3)))); 
                assume $non_null($phys_ptr_cast(SL#curr3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr3, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_keys(l1), @_vcc_intset_union(sll_keys(*((l1->next))), @_vcc_intset_singleton(*((l1->key)))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_list_len_next(l1), unchecked+(sll_list_len_next(*((l1->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(rsrtl(l1), &&(&&(rsrtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, rsrtl_reach(*((l1->next)))))), >=(*((l1->key)), sll_max_key(*((l1->next))))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(rsrtl_reach(l1), @_vcc_oset_union(rsrtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll(l1), &&(sll(*((l1->next))), unchecked!(@_vcc_oset_in(l1, sll_reach(*((l1->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_reach(l1), @_vcc_oset_union(sll_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_max_key(l1), @\int_max(*((l1->key)), sll_max_key(*((l1->next)))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_min_key(l1), @\int_min(*((l1->key)), sll_min_key(*((l1->next)))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(srtl(l1), &&(&&(srtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, srtl_reach(*((l1->next)))))), <=(*((l1->key)), sll_min_key(*((l1->next))))))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l1), ==(srtl_reach(l1), @_vcc_oset_union(srtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
                assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_keys(l0), @_vcc_intset_union(sll_keys(*((l0->next))), @_vcc_intset_singleton(*((l0->key)))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l0, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_list_len_next(l0), unchecked+(sll_list_len_next(*((l0->next))), 1))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l0, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(rsrtl(l0), &&(&&(rsrtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, rsrtl_reach(*((l0->next)))))), >=(*((l0->key)), sll_max_key(*((l0->next))))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(rsrtl_reach(l0), @_vcc_oset_union(rsrtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll(l0), &&(sll(*((l0->next))), unchecked!(@_vcc_oset_in(l0, sll_reach(*((l0->next)))))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_reach(l0), @_vcc_oset_union(sll_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_max_key(l0), @\int_max(*((l0->key)), sll_max_key(*((l0->next)))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_min_key(l0), @\int_min(*((l0->key)), sll_min_key(*((l0->next)))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(srtl(l0), &&(&&(srtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, srtl_reach(*((l0->next)))))), <=(*((l0->key)), sll_min_key(*((l0->next))))))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l0), ==(srtl_reach(l0), @_vcc_oset_union(srtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
                assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_keys(lpt), @_vcc_intset_union(sll_keys(*((lpt->next))), @_vcc_intset_singleton(*((lpt->key)))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#lpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_list_len_next(lpt), unchecked+(sll_list_len_next(*((lpt->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#lpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(rsrtl(lpt), &&(&&(rsrtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, rsrtl_reach(*((lpt->next)))))), >=(*((lpt->key)), sll_max_key(*((lpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(rsrtl_reach(lpt), @_vcc_oset_union(rsrtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll(lpt), &&(sll(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, sll_reach(*((lpt->next)))))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_reach(lpt), @_vcc_oset_union(sll_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_max_key(lpt), @\int_max(*((lpt->key)), sll_max_key(*((lpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_min_key(lpt), @\int_min(*((lpt->key)), sll_min_key(*((lpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(srtl(lpt), &&(&&(srtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, srtl_reach(*((lpt->next)))))), <=(*((lpt->key)), sll_min_key(*((lpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(lpt), ==(srtl_reach(lpt), @_vcc_oset_union(srtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
                assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_keys(rpt), @_vcc_intset_union(sll_keys(*((rpt->next))), @_vcc_intset_singleton(*((rpt->key)))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#rpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_list_len_next(rpt), unchecked+(sll_list_len_next(*((rpt->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#rpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(rsrtl(rpt), &&(&&(rsrtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, rsrtl_reach(*((rpt->next)))))), >=(*((rpt->key)), sll_max_key(*((rpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(rsrtl_reach(rpt), @_vcc_oset_union(rsrtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll(rpt), &&(sll(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, sll_reach(*((rpt->next)))))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_reach(rpt), @_vcc_oset_union(sll_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_max_key(rpt), @\int_max(*((rpt->key)), sll_max_key(*((rpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_min_key(rpt), @\int_min(*((rpt->key)), sll_min_key(*((rpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(srtl(rpt), &&(&&(srtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, srtl_reach(*((rpt->next)))))), <=(*((rpt->key)), sll_min_key(*((rpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(srtl_reach(rpt), @_vcc_oset_union(srtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_keys(t2), @_vcc_intset_union(sll_keys(*((t2->next))), @_vcc_intset_singleton(*((t2->key)))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_list_len_next(t2), unchecked+(sll_list_len_next(*((t2->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(rsrtl(t2), &&(&&(rsrtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, rsrtl_reach(*((t2->next)))))), >=(*((t2->key)), sll_max_key(*((t2->next))))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(rsrtl_reach(t2), @_vcc_oset_union(rsrtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll(t2), &&(sll(*((t2->next))), unchecked!(@_vcc_oset_in(t2, sll_reach(*((t2->next)))))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_reach(t2), @_vcc_oset_union(sll_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_max_key(t2), @\int_max(*((t2->key)), sll_max_key(*((t2->next)))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_min_key(t2), @\int_min(*((t2->key)), sll_min_key(*((t2->next)))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(srtl(t2), &&(&&(srtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, srtl_reach(*((t2->next)))))), <=(*((t2->key)), sll_min_key(*((t2->next))))))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t2), ==(srtl_reach(t2), @_vcc_oset_union(srtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
                assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_keys(t1), @_vcc_intset_union(sll_keys(*((t1->next))), @_vcc_intset_singleton(*((t1->key)))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_list_len_next(t1), unchecked+(sll_list_len_next(*((t1->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(rsrtl(t1), &&(&&(rsrtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, rsrtl_reach(*((t1->next)))))), >=(*((t1->key)), sll_max_key(*((t1->next))))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(rsrtl_reach(t1), @_vcc_oset_union(rsrtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll(t1), &&(sll(*((t1->next))), unchecked!(@_vcc_oset_in(t1, sll_reach(*((t1->next)))))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_reach(t1), @_vcc_oset_union(sll_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_max_key(t1), @\int_max(*((t1->key)), sll_max_key(*((t1->next)))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_min_key(t1), @\int_min(*((t1->key)), sll_min_key(*((t1->next)))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(srtl(t1), &&(&&(srtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, srtl_reach(*((t1->next)))))), <=(*((t1->key)), sll_min_key(*((t1->next))))))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(t1), ==(srtl_reach(t1), @_vcc_oset_union(srtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
                assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
                assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_keys(curr), @_vcc_intset_union(sll_keys(*((curr->next))), @_vcc_intset_singleton(*((curr->key)))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_list_len_next(curr), unchecked+(sll_list_len_next(*((curr->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(rsrtl(curr), &&(&&(rsrtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, rsrtl_reach(*((curr->next)))))), >=(*((curr->key)), sll_max_key(*((curr->next))))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(rsrtl_reach(curr), @_vcc_oset_union(rsrtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll(curr), &&(sll(*((curr->next))), unchecked!(@_vcc_oset_in(curr, sll_reach(*((curr->next)))))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_reach(curr), @_vcc_oset_union(sll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_max_key(curr), @\int_max(*((curr->key)), sll_max_key(*((curr->next)))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_min_key(curr), @\int_min(*((curr->key)), sll_min_key(*((curr->next)))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(srtl(curr), &&(&&(srtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, srtl_reach(*((curr->next)))))), <=(*((curr->key)), sll_min_key(*((curr->next))))))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(curr), ==(srtl_reach(curr), @_vcc_oset_union(srtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
                assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_keys(rpt), @_vcc_intset_union(sll_keys(*((rpt->next))), @_vcc_intset_singleton(*((rpt->key)))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#rpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_list_len_next(rpt), unchecked+(sll_list_len_next(*((rpt->next))), 1))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#rpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), 1);
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(rsrtl(rpt), &&(&&(rsrtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, rsrtl_reach(*((rpt->next)))))), >=(*((rpt->key)), sll_max_key(*((rpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(rsrtl_reach(rpt), @_vcc_oset_union(rsrtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll(rpt), &&(sll(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, sll_reach(*((rpt->next)))))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_reach(rpt), @_vcc_oset_union(sll_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_max_key(rpt), @\int_max(*((rpt->key)), sll_max_key(*((rpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_min_key(rpt), @\int_min(*((rpt->key)), sll_min_key(*((rpt->next)))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(srtl(rpt), &&(&&(srtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, srtl_reach(*((rpt->next)))))), <=(*((rpt->key)), sll_min_key(*((rpt->next))))))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
                // assume ==>(@_vcc_ptr_neq_null(rpt), ==(srtl_reach(rpt), @_vcc_oset_union(srtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
                assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
                // rpt := curr; 
                L#rpt := $phys_ptr_cast(L#curr, ^s_node);
                // assert sll_lseg(curr3, curr3); 
                assert F#sll_lseg($s, $phys_ptr_cast(SL#curr3, ^s_node), $phys_ptr_cast(SL#curr3, ^s_node));
                // assume sll_lseg(curr3, curr3); 
                assume F#sll_lseg($s, $phys_ptr_cast(SL#curr3, ^s_node), $phys_ptr_cast(SL#curr3, ^s_node));
                // assert srtl_lseg(curr3, curr3); 
                assert F#srtl_lseg($s, $phys_ptr_cast(SL#curr3, ^s_node), $phys_ptr_cast(SL#curr3, ^s_node));
                // assume srtl_lseg(curr3, curr3); 
                assume F#srtl_lseg($s, $phys_ptr_cast(SL#curr3, ^s_node), $phys_ptr_cast(SL#curr3, ^s_node));
                // assert sll_lseg(l1, l1); 
                assert F#sll_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
                // assume sll_lseg(l1, l1); 
                assume F#sll_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
                // assert srtl_lseg(l1, l1); 
                assert F#srtl_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
                // assume srtl_lseg(l1, l1); 
                assume F#srtl_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
                // assert sll_lseg(l0, l0); 
                assert F#sll_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
                // assume sll_lseg(l0, l0); 
                assume F#sll_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
                // assert srtl_lseg(l0, l0); 
                assert F#srtl_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
                // assume srtl_lseg(l0, l0); 
                assume F#srtl_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
                // assert sll_lseg(curr, curr); 
                assert F#sll_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
                // assume sll_lseg(curr, curr); 
                assume F#sll_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
                // assert srtl_lseg(curr, curr); 
                assert F#srtl_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
                // assume srtl_lseg(curr, curr); 
                assume F#srtl_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
                // assert sll_lseg(lpt, lpt); 
                assert F#sll_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
                // assume sll_lseg(lpt, lpt); 
                assume F#sll_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
                // assert srtl_lseg(lpt, lpt); 
                assert F#srtl_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
                // assume srtl_lseg(lpt, lpt); 
                assume F#srtl_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
                // assert sll_lseg(rpt, rpt); 
                assert F#sll_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
                // assume sll_lseg(rpt, rpt); 
                assume F#sll_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
                // assert srtl_lseg(rpt, rpt); 
                assert F#srtl_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
                // assume srtl_lseg(rpt, rpt); 
                assume F#srtl_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
                // assert sll_lseg(tmp, tmp); 
                assert F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
                // assume sll_lseg(tmp, tmp); 
                assume F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
                // assert srtl_lseg(tmp, tmp); 
                assert F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
                // assume srtl_lseg(tmp, tmp); 
                assume F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
                // assert sll_lseg(t2, t2); 
                assert F#sll_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
                // assume sll_lseg(t2, t2); 
                assume F#sll_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
                // assert srtl_lseg(t2, t2); 
                assert F#srtl_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
                // assume srtl_lseg(t2, t2); 
                assume F#srtl_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
                // assert sll_lseg(t1, t1); 
                assert F#sll_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
                // assume sll_lseg(t1, t1); 
                assume F#sll_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
                // assert srtl_lseg(t1, t1); 
                assert F#srtl_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
                // assume srtl_lseg(t1, t1); 
                assume F#srtl_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
                // assert sll_lseg(l, l); 
                assert F#sll_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
                // assume sll_lseg(l, l); 
                assume F#sll_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
                // assert srtl_lseg(l, l); 
                assert F#srtl_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
                // assume srtl_lseg(l, l); 
                assume F#srtl_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
            }

          anon6:
            // curr := tmp; 
            L#curr := $phys_ptr_cast(L#tmp, ^s_node);
            // assert sll_lseg(curr3, curr3); 
            assert F#sll_lseg($s, $phys_ptr_cast(SL#curr3, ^s_node), $phys_ptr_cast(SL#curr3, ^s_node));
            // assume sll_lseg(curr3, curr3); 
            assume F#sll_lseg($s, $phys_ptr_cast(SL#curr3, ^s_node), $phys_ptr_cast(SL#curr3, ^s_node));
            // assert srtl_lseg(curr3, curr3); 
            assert F#srtl_lseg($s, $phys_ptr_cast(SL#curr3, ^s_node), $phys_ptr_cast(SL#curr3, ^s_node));
            // assume srtl_lseg(curr3, curr3); 
            assume F#srtl_lseg($s, $phys_ptr_cast(SL#curr3, ^s_node), $phys_ptr_cast(SL#curr3, ^s_node));
            // assert sll_lseg(l1, l1); 
            assert F#sll_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
            // assume sll_lseg(l1, l1); 
            assume F#sll_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
            // assert srtl_lseg(l1, l1); 
            assert F#srtl_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
            // assume srtl_lseg(l1, l1); 
            assume F#srtl_lseg($s, $phys_ptr_cast(SL#l1, ^s_node), $phys_ptr_cast(SL#l1, ^s_node));
            // assert sll_lseg(l0, l0); 
            assert F#sll_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
            // assume sll_lseg(l0, l0); 
            assume F#sll_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
            // assert srtl_lseg(l0, l0); 
            assert F#srtl_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
            // assume srtl_lseg(l0, l0); 
            assume F#srtl_lseg($s, $phys_ptr_cast(SL#l0, ^s_node), $phys_ptr_cast(SL#l0, ^s_node));
            // assert sll_lseg(curr, curr); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
            // assume sll_lseg(curr, curr); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
            // assert srtl_lseg(curr, curr); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
            // assume srtl_lseg(curr, curr); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#curr, ^s_node), $phys_ptr_cast(L#curr, ^s_node));
            // assert sll_lseg(lpt, lpt); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
            // assume sll_lseg(lpt, lpt); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
            // assert srtl_lseg(lpt, lpt); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
            // assume srtl_lseg(lpt, lpt); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#lpt, ^s_node), $phys_ptr_cast(L#lpt, ^s_node));
            // assert sll_lseg(rpt, rpt); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
            // assume sll_lseg(rpt, rpt); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
            // assert srtl_lseg(rpt, rpt); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
            // assume srtl_lseg(rpt, rpt); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#rpt, ^s_node), $phys_ptr_cast(L#rpt, ^s_node));
            // assert sll_lseg(tmp, tmp); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume sll_lseg(tmp, tmp); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assert srtl_lseg(tmp, tmp); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume srtl_lseg(tmp, tmp); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assert sll_lseg(t2, t2); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
            // assume sll_lseg(t2, t2); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
            // assert srtl_lseg(t2, t2); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
            // assume srtl_lseg(t2, t2); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#t2, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
            // assert sll_lseg(t1, t1); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
            // assume sll_lseg(t1, t1); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
            // assert srtl_lseg(t1, t1); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
            // assume srtl_lseg(t1, t1); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t1, ^s_node));
            // assert sll_lseg(l, l); 
            assert F#sll_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
            // assume sll_lseg(l, l); 
            assume F#sll_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
            // assert srtl_lseg(l, l); 
            assert F#srtl_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
            // assume srtl_lseg(l, l); 
            assume F#srtl_lseg($s, $phys_ptr_cast(P#l, ^s_node), $phys_ptr_cast(P#l, ^s_node));
        }
        else
        {
          anon7:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // goto #break_1; 
            goto #break_1;
        }

      #continue_1:
        assume true;
    }

  anon13:
    assume $full_stop_ext(#tok$3^35.2, $s);

  #break_1:
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_keys(l1), @_vcc_intset_union(sll_keys(*((l1->next))), @_vcc_intset_singleton(*((l1->key)))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_list_len_next(l1), unchecked+(sll_list_len_next(*((l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(rsrtl(l1), &&(&&(rsrtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, rsrtl_reach(*((l1->next)))))), >=(*((l1->key)), sll_max_key(*((l1->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(rsrtl_reach(l1), @_vcc_oset_union(rsrtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll(l1), &&(sll(*((l1->next))), unchecked!(@_vcc_oset_in(l1, sll_reach(*((l1->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_reach(l1), @_vcc_oset_union(sll_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_max_key(l1), @\int_max(*((l1->key)), sll_max_key(*((l1->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_min_key(l1), @\int_min(*((l1->key)), sll_min_key(*((l1->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(srtl(l1), &&(&&(srtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, srtl_reach(*((l1->next)))))), <=(*((l1->key)), sll_min_key(*((l1->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(srtl_reach(l1), @_vcc_oset_union(srtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_keys(l0), @_vcc_intset_union(sll_keys(*((l0->next))), @_vcc_intset_singleton(*((l0->key)))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l0, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_list_len_next(l0), unchecked+(sll_list_len_next(*((l0->next))), 1))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l0, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(rsrtl(l0), &&(&&(rsrtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, rsrtl_reach(*((l0->next)))))), >=(*((l0->key)), sll_max_key(*((l0->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(rsrtl_reach(l0), @_vcc_oset_union(rsrtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll(l0), &&(sll(*((l0->next))), unchecked!(@_vcc_oset_in(l0, sll_reach(*((l0->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_reach(l0), @_vcc_oset_union(sll_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_max_key(l0), @\int_max(*((l0->key)), sll_max_key(*((l0->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_min_key(l0), @\int_min(*((l0->key)), sll_min_key(*((l0->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(srtl(l0), &&(&&(srtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, srtl_reach(*((l0->next)))))), <=(*((l0->key)), sll_min_key(*((l0->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(srtl_reach(l0), @_vcc_oset_union(srtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_keys(curr), @_vcc_intset_union(sll_keys(*((curr->next))), @_vcc_intset_singleton(*((curr->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_list_len_next(curr), unchecked+(sll_list_len_next(*((curr->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(rsrtl(curr), &&(&&(rsrtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, rsrtl_reach(*((curr->next)))))), >=(*((curr->key)), sll_max_key(*((curr->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(rsrtl_reach(curr), @_vcc_oset_union(rsrtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll(curr), &&(sll(*((curr->next))), unchecked!(@_vcc_oset_in(curr, sll_reach(*((curr->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_reach(curr), @_vcc_oset_union(sll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_max_key(curr), @\int_max(*((curr->key)), sll_max_key(*((curr->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_min_key(curr), @\int_min(*((curr->key)), sll_min_key(*((curr->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(srtl(curr), &&(&&(srtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, srtl_reach(*((curr->next)))))), <=(*((curr->key)), sll_min_key(*((curr->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(srtl_reach(curr), @_vcc_oset_union(srtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_keys(lpt), @_vcc_intset_union(sll_keys(*((lpt->next))), @_vcc_intset_singleton(*((lpt->key)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#lpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_list_len_next(lpt), unchecked+(sll_list_len_next(*((lpt->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#lpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(rsrtl(lpt), &&(&&(rsrtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, rsrtl_reach(*((lpt->next)))))), >=(*((lpt->key)), sll_max_key(*((lpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(rsrtl_reach(lpt), @_vcc_oset_union(rsrtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll(lpt), &&(sll(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, sll_reach(*((lpt->next)))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_reach(lpt), @_vcc_oset_union(sll_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_max_key(lpt), @\int_max(*((lpt->key)), sll_max_key(*((lpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_min_key(lpt), @\int_min(*((lpt->key)), sll_min_key(*((lpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(srtl(lpt), &&(&&(srtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, srtl_reach(*((lpt->next)))))), <=(*((lpt->key)), sll_min_key(*((lpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(srtl_reach(lpt), @_vcc_oset_union(srtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_keys(rpt), @_vcc_intset_union(sll_keys(*((rpt->next))), @_vcc_intset_singleton(*((rpt->key)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#rpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_list_len_next(rpt), unchecked+(sll_list_len_next(*((rpt->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#rpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(rsrtl(rpt), &&(&&(rsrtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, rsrtl_reach(*((rpt->next)))))), >=(*((rpt->key)), sll_max_key(*((rpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(rsrtl_reach(rpt), @_vcc_oset_union(rsrtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll(rpt), &&(sll(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, sll_reach(*((rpt->next)))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_reach(rpt), @_vcc_oset_union(sll_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_max_key(rpt), @\int_max(*((rpt->key)), sll_max_key(*((rpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_min_key(rpt), @\int_min(*((rpt->key)), sll_min_key(*((rpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(srtl(rpt), &&(&&(srtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, srtl_reach(*((rpt->next)))))), <=(*((rpt->key)), sll_min_key(*((rpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(srtl_reach(rpt), @_vcc_oset_union(srtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_keys(t2), @_vcc_intset_union(sll_keys(*((t2->next))), @_vcc_intset_singleton(*((t2->key)))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_list_len_next(t2), unchecked+(sll_list_len_next(*((t2->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(rsrtl(t2), &&(&&(rsrtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, rsrtl_reach(*((t2->next)))))), >=(*((t2->key)), sll_max_key(*((t2->next))))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(rsrtl_reach(t2), @_vcc_oset_union(rsrtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll(t2), &&(sll(*((t2->next))), unchecked!(@_vcc_oset_in(t2, sll_reach(*((t2->next)))))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_reach(t2), @_vcc_oset_union(sll_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_max_key(t2), @\int_max(*((t2->key)), sll_max_key(*((t2->next)))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_min_key(t2), @\int_min(*((t2->key)), sll_min_key(*((t2->next)))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(srtl(t2), &&(&&(srtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, srtl_reach(*((t2->next)))))), <=(*((t2->key)), sll_min_key(*((t2->next))))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(srtl_reach(t2), @_vcc_oset_union(srtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_keys(t1), @_vcc_intset_union(sll_keys(*((t1->next))), @_vcc_intset_singleton(*((t1->key)))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_list_len_next(t1), unchecked+(sll_list_len_next(*((t1->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(rsrtl(t1), &&(&&(rsrtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, rsrtl_reach(*((t1->next)))))), >=(*((t1->key)), sll_max_key(*((t1->next))))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(rsrtl_reach(t1), @_vcc_oset_union(rsrtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll(t1), &&(sll(*((t1->next))), unchecked!(@_vcc_oset_in(t1, sll_reach(*((t1->next)))))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_reach(t1), @_vcc_oset_union(sll_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_max_key(t1), @\int_max(*((t1->key)), sll_max_key(*((t1->next)))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_min_key(t1), @\int_min(*((t1->key)), sll_min_key(*((t1->next)))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(srtl(t1), &&(&&(srtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, srtl_reach(*((t1->next)))))), <=(*((t1->key)), sll_min_key(*((t1->next))))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(srtl_reach(t1), @_vcc_oset_union(srtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // _math \state _dryad_S2#2; 
    // _dryad_S2#2 := @_vcc_current_state(@state); 
    _dryad_S2#2 := $current_state($s);
    // _math \state stmtexpr6#16; 
    // stmtexpr6#16 := _dryad_S2#2; 
    stmtexpr6#16 := _dryad_S2#2;
    // assert @prim_writes_check((l->next)); 
    assert $writable_prim($s, #wrTime$3^10.3, $dot($phys_ptr_cast(P#l, ^s_node), s_node.next));
    // *(l->next) := rpt; 
    call $write_int(s_node.next, $phys_ptr_cast(P#l, ^s_node), $ptr_to_int($phys_ptr_cast(L#rpt, ^s_node)));
    assume $full_stop_ext(#tok$3^65.2, $s);
    // _math \state _dryad_S3#3; 
    // _dryad_S3#3 := @_vcc_current_state(@state); 
    _dryad_S3#3 := $current_state($s);
    // _math \state stmtexpr7#17; 
    // stmtexpr7#17 := _dryad_S3#3; 
    stmtexpr7#17 := _dryad_S3#3;
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(l1)))), ==(old(_dryad_S2#2, sll_keys(l1)), old(_dryad_S3#3, sll_keys(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_keys(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_keys(_dryad_S3#3, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(l1)))), ==(old(_dryad_S2#2, sll_list_len_next(l1)), old(_dryad_S3#3, sll_list_len_next(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, rsrtl_reach(l1)))), ==(old(_dryad_S2#2, rsrtl(l1)), old(_dryad_S3#3, rsrtl(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#rsrtl(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node)) == F#rsrtl(_dryad_S3#3, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, rsrtl_reach(l1)))), ==(old(_dryad_S2#2, rsrtl_reach(l1)), old(_dryad_S3#3, rsrtl_reach(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(l1)))), ==(old(_dryad_S2#2, sll(l1)), old(_dryad_S3#3, sll(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(l1)))), ==(old(_dryad_S2#2, sll_reach(l1)), old(_dryad_S3#3, sll_reach(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_reach(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(l1)))), ==(old(_dryad_S2#2, sll_max_key(l1)), old(_dryad_S3#3, sll_max_key(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_max_key(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_max_key(_dryad_S3#3, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(l1)))), ==(old(_dryad_S2#2, sll_min_key(l1)), old(_dryad_S3#3, sll_min_key(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_min_key(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_min_key(_dryad_S3#3, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, srtl_reach(l1)))), ==(old(_dryad_S2#2, srtl(l1)), old(_dryad_S3#3, srtl(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#srtl(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node)) == F#srtl(_dryad_S3#3, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, srtl_reach(l1)))), ==(old(_dryad_S2#2, srtl_reach(l1)), old(_dryad_S3#3, srtl_reach(l1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(SL#l1, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(l0)))), ==(old(_dryad_S2#2, sll_keys(l0)), old(_dryad_S3#3, sll_keys(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_keys(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_keys(_dryad_S3#3, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(l0)))), ==(old(_dryad_S2#2, sll_list_len_next(l0)), old(_dryad_S3#3, sll_list_len_next(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, rsrtl_reach(l0)))), ==(old(_dryad_S2#2, rsrtl(l0)), old(_dryad_S3#3, rsrtl(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#rsrtl(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node)) == F#rsrtl(_dryad_S3#3, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, rsrtl_reach(l0)))), ==(old(_dryad_S2#2, rsrtl_reach(l0)), old(_dryad_S3#3, rsrtl_reach(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(l0)))), ==(old(_dryad_S2#2, sll(l0)), old(_dryad_S3#3, sll(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(l0)))), ==(old(_dryad_S2#2, sll_reach(l0)), old(_dryad_S3#3, sll_reach(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_reach(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(l0)))), ==(old(_dryad_S2#2, sll_max_key(l0)), old(_dryad_S3#3, sll_max_key(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_max_key(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_max_key(_dryad_S3#3, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(l0)))), ==(old(_dryad_S2#2, sll_min_key(l0)), old(_dryad_S3#3, sll_min_key(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_min_key(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_min_key(_dryad_S3#3, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, srtl_reach(l0)))), ==(old(_dryad_S2#2, srtl(l0)), old(_dryad_S3#3, srtl(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#srtl(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node)) == F#srtl(_dryad_S3#3, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, srtl_reach(l0)))), ==(old(_dryad_S2#2, srtl_reach(l0)), old(_dryad_S3#3, srtl_reach(l0)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(SL#l0, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(curr)))), ==(old(_dryad_S2#2, sll_keys(curr)), old(_dryad_S3#3, sll_keys(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_keys(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_keys(_dryad_S3#3, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(curr)))), ==(old(_dryad_S2#2, sll_list_len_next(curr)), old(_dryad_S3#3, sll_list_len_next(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, rsrtl_reach(curr)))), ==(old(_dryad_S2#2, rsrtl(curr)), old(_dryad_S3#3, rsrtl(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node))) ==> F#rsrtl(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node)) == F#rsrtl(_dryad_S3#3, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, rsrtl_reach(curr)))), ==(old(_dryad_S2#2, rsrtl_reach(curr)), old(_dryad_S3#3, rsrtl_reach(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(curr)))), ==(old(_dryad_S2#2, sll(curr)), old(_dryad_S3#3, sll(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(curr)))), ==(old(_dryad_S2#2, sll_reach(curr)), old(_dryad_S3#3, sll_reach(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(curr)))), ==(old(_dryad_S2#2, sll_max_key(curr)), old(_dryad_S3#3, sll_max_key(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_max_key(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_max_key(_dryad_S3#3, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(curr)))), ==(old(_dryad_S2#2, sll_min_key(curr)), old(_dryad_S3#3, sll_min_key(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_min_key(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_min_key(_dryad_S3#3, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, srtl_reach(curr)))), ==(old(_dryad_S2#2, srtl(curr)), old(_dryad_S3#3, srtl(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node))) ==> F#srtl(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node)) == F#srtl(_dryad_S3#3, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, srtl_reach(curr)))), ==(old(_dryad_S2#2, srtl_reach(curr)), old(_dryad_S3#3, srtl_reach(curr)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node))) ==> F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#curr, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(lpt)))), ==(old(_dryad_S2#2, sll_keys(lpt)), old(_dryad_S3#3, sll_keys(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_keys(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_keys(_dryad_S3#3, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(lpt)))), ==(old(_dryad_S2#2, sll_list_len_next(lpt)), old(_dryad_S3#3, sll_list_len_next(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, rsrtl_reach(lpt)))), ==(old(_dryad_S2#2, rsrtl(lpt)), old(_dryad_S3#3, rsrtl(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#rsrtl(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node)) == F#rsrtl(_dryad_S3#3, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, rsrtl_reach(lpt)))), ==(old(_dryad_S2#2, rsrtl_reach(lpt)), old(_dryad_S3#3, rsrtl_reach(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(lpt)))), ==(old(_dryad_S2#2, sll(lpt)), old(_dryad_S3#3, sll(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(lpt)))), ==(old(_dryad_S2#2, sll_reach(lpt)), old(_dryad_S3#3, sll_reach(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(lpt)))), ==(old(_dryad_S2#2, sll_max_key(lpt)), old(_dryad_S3#3, sll_max_key(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_max_key(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_max_key(_dryad_S3#3, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(lpt)))), ==(old(_dryad_S2#2, sll_min_key(lpt)), old(_dryad_S3#3, sll_min_key(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_min_key(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_min_key(_dryad_S3#3, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, srtl_reach(lpt)))), ==(old(_dryad_S2#2, srtl(lpt)), old(_dryad_S3#3, srtl(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#srtl(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node)) == F#srtl(_dryad_S3#3, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, srtl_reach(lpt)))), ==(old(_dryad_S2#2, srtl_reach(lpt)), old(_dryad_S3#3, srtl_reach(lpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#lpt, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(rpt)))), ==(old(_dryad_S2#2, sll_keys(rpt)), old(_dryad_S3#3, sll_keys(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_keys(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_keys(_dryad_S3#3, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(rpt)))), ==(old(_dryad_S2#2, sll_list_len_next(rpt)), old(_dryad_S3#3, sll_list_len_next(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, rsrtl_reach(rpt)))), ==(old(_dryad_S2#2, rsrtl(rpt)), old(_dryad_S3#3, rsrtl(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#rsrtl(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node)) == F#rsrtl(_dryad_S3#3, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, rsrtl_reach(rpt)))), ==(old(_dryad_S2#2, rsrtl_reach(rpt)), old(_dryad_S3#3, rsrtl_reach(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(rpt)))), ==(old(_dryad_S2#2, sll(rpt)), old(_dryad_S3#3, sll(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(rpt)))), ==(old(_dryad_S2#2, sll_reach(rpt)), old(_dryad_S3#3, sll_reach(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(rpt)))), ==(old(_dryad_S2#2, sll_max_key(rpt)), old(_dryad_S3#3, sll_max_key(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_max_key(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_max_key(_dryad_S3#3, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(rpt)))), ==(old(_dryad_S2#2, sll_min_key(rpt)), old(_dryad_S3#3, sll_min_key(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_min_key(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_min_key(_dryad_S3#3, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, srtl_reach(rpt)))), ==(old(_dryad_S2#2, srtl(rpt)), old(_dryad_S3#3, srtl(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#srtl(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node)) == F#srtl(_dryad_S3#3, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, srtl_reach(rpt)))), ==(old(_dryad_S2#2, srtl_reach(rpt)), old(_dryad_S3#3, srtl_reach(rpt)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#rpt, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(tmp)))), ==(old(_dryad_S2#2, sll_keys(tmp)), old(_dryad_S3#3, sll_keys(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_keys(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_keys(_dryad_S3#3, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(tmp)))), ==(old(_dryad_S2#2, sll_list_len_next(tmp)), old(_dryad_S3#3, sll_list_len_next(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, rsrtl_reach(tmp)))), ==(old(_dryad_S2#2, rsrtl(tmp)), old(_dryad_S3#3, rsrtl(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl(_dryad_S3#3, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, rsrtl_reach(tmp)))), ==(old(_dryad_S2#2, rsrtl_reach(tmp)), old(_dryad_S3#3, rsrtl_reach(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(tmp)))), ==(old(_dryad_S2#2, sll(tmp)), old(_dryad_S3#3, sll(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(tmp)))), ==(old(_dryad_S2#2, sll_reach(tmp)), old(_dryad_S3#3, sll_reach(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(tmp)))), ==(old(_dryad_S2#2, sll_max_key(tmp)), old(_dryad_S3#3, sll_max_key(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_max_key(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_max_key(_dryad_S3#3, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(tmp)))), ==(old(_dryad_S2#2, sll_min_key(tmp)), old(_dryad_S3#3, sll_min_key(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_min_key(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_min_key(_dryad_S3#3, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, srtl_reach(tmp)))), ==(old(_dryad_S2#2, srtl(tmp)), old(_dryad_S3#3, srtl(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl(_dryad_S3#3, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, srtl_reach(tmp)))), ==(old(_dryad_S2#2, srtl_reach(tmp)), old(_dryad_S3#3, srtl_reach(tmp)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(t2)))), ==(old(_dryad_S2#2, sll_keys(t2)), old(_dryad_S3#3, sll_keys(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_keys(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_keys(_dryad_S3#3, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(t2)))), ==(old(_dryad_S2#2, sll_list_len_next(t2)), old(_dryad_S3#3, sll_list_len_next(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, rsrtl_reach(t2)))), ==(old(_dryad_S2#2, rsrtl(t2)), old(_dryad_S3#3, rsrtl(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#rsrtl(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node)) == F#rsrtl(_dryad_S3#3, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, rsrtl_reach(t2)))), ==(old(_dryad_S2#2, rsrtl_reach(t2)), old(_dryad_S3#3, rsrtl_reach(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(t2)))), ==(old(_dryad_S2#2, sll(t2)), old(_dryad_S3#3, sll(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(t2)))), ==(old(_dryad_S2#2, sll_reach(t2)), old(_dryad_S3#3, sll_reach(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(t2)))), ==(old(_dryad_S2#2, sll_max_key(t2)), old(_dryad_S3#3, sll_max_key(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_max_key(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_max_key(_dryad_S3#3, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(t2)))), ==(old(_dryad_S2#2, sll_min_key(t2)), old(_dryad_S3#3, sll_min_key(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_min_key(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_min_key(_dryad_S3#3, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, srtl_reach(t2)))), ==(old(_dryad_S2#2, srtl(t2)), old(_dryad_S3#3, srtl(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#srtl(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node)) == F#srtl(_dryad_S3#3, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, srtl_reach(t2)))), ==(old(_dryad_S2#2, srtl_reach(t2)), old(_dryad_S3#3, srtl_reach(t2)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node))) ==> F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#t2, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(t1)))), ==(old(_dryad_S2#2, sll_keys(t1)), old(_dryad_S3#3, sll_keys(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_keys(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_keys(_dryad_S3#3, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(t1)))), ==(old(_dryad_S2#2, sll_list_len_next(t1)), old(_dryad_S3#3, sll_list_len_next(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_list_len_next(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_list_len_next(_dryad_S3#3, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, rsrtl_reach(t1)))), ==(old(_dryad_S2#2, rsrtl(t1)), old(_dryad_S3#3, rsrtl(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#rsrtl(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node)) == F#rsrtl(_dryad_S3#3, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, rsrtl_reach(t1)))), ==(old(_dryad_S2#2, rsrtl_reach(t1)), old(_dryad_S3#3, rsrtl_reach(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#rsrtl_reach(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node)) == F#rsrtl_reach(_dryad_S3#3, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(t1)))), ==(old(_dryad_S2#2, sll(t1)), old(_dryad_S3#3, sll(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node)) == F#sll(_dryad_S3#3, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(t1)))), ==(old(_dryad_S2#2, sll_reach(t1)), old(_dryad_S3#3, sll_reach(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_reach(_dryad_S3#3, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(t1)))), ==(old(_dryad_S2#2, sll_max_key(t1)), old(_dryad_S3#3, sll_max_key(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_max_key(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_max_key(_dryad_S3#3, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, sll_reach(t1)))), ==(old(_dryad_S2#2, sll_min_key(t1)), old(_dryad_S3#3, sll_min_key(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_min_key(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_min_key(_dryad_S3#3, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, srtl_reach(t1)))), ==(old(_dryad_S2#2, srtl(t1)), old(_dryad_S3#3, srtl(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#srtl(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node)) == F#srtl(_dryad_S3#3, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(l, old(_dryad_S2#2, srtl_reach(t1)))), ==(old(_dryad_S2#2, srtl_reach(t1)), old(_dryad_S3#3, srtl_reach(t1)))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node))) ==> F#srtl_reach(_dryad_S2#2, $phys_ptr_cast(L#t1, ^s_node)) == F#srtl_reach(_dryad_S3#3, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, l1)), ==(*((l1->key)), old(_dryad_S2#2, *((l1->key))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(SL#l1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) == $rd_inv(_dryad_S2#2, s_node.key, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, l1)), @_vcc_ptr_eq_pure(*((l1->next)), old(_dryad_S2#2, *((l1->next))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(SL#l1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(l, l0)), ==(*((l0->key)), old(_dryad_S2#2, *((l0->key))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(SL#l0, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) == $rd_inv(_dryad_S2#2, s_node.key, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, l0)), @_vcc_ptr_eq_pure(*((l0->next)), old(_dryad_S2#2, *((l0->next))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(SL#l0, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(l, curr)), ==(*((curr->key)), old(_dryad_S2#2, *((curr->key))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#curr, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) == $rd_inv(_dryad_S2#2, s_node.key, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, curr)), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S2#2, *((curr->next))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#curr, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(l, lpt)), ==(*((lpt->key)), old(_dryad_S2#2, *((lpt->key))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#lpt, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) == $rd_inv(_dryad_S2#2, s_node.key, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, lpt)), @_vcc_ptr_eq_pure(*((lpt->next)), old(_dryad_S2#2, *((lpt->next))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#lpt, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(l, rpt)), ==(*((rpt->key)), old(_dryad_S2#2, *((rpt->key))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#rpt, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) == $rd_inv(_dryad_S2#2, s_node.key, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, rpt)), @_vcc_ptr_eq_pure(*((rpt->next)), old(_dryad_S2#2, *((rpt->next))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#rpt, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(l, tmp)), ==(*((tmp->key)), old(_dryad_S2#2, *((tmp->key))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) == $rd_inv(_dryad_S2#2, s_node.key, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, tmp)), @_vcc_ptr_eq_pure(*((tmp->next)), old(_dryad_S2#2, *((tmp->next))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(l, t2)), ==(*((t2->key)), old(_dryad_S2#2, *((t2->key))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#t2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) == $rd_inv(_dryad_S2#2, s_node.key, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, t2)), @_vcc_ptr_eq_pure(*((t2->next)), old(_dryad_S2#2, *((t2->next))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#t2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(l, t1)), ==(*((t1->key)), old(_dryad_S2#2, *((t1->key))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#t1, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) == $rd_inv(_dryad_S2#2, s_node.key, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(l, t1)), @_vcc_ptr_eq_pure(*((t1->next)), old(_dryad_S2#2, *((t1->next))))); 
    assume !($phys_ptr_cast(P#l, ^s_node) == $phys_ptr_cast(L#t1, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node) == $rd_phys_ptr(_dryad_S2#2, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_keys(l1), @_vcc_intset_union(sll_keys(*((l1->next))), @_vcc_intset_singleton(*((l1->key)))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_list_len_next(l1), unchecked+(sll_list_len_next(*((l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(rsrtl(l1), &&(&&(rsrtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, rsrtl_reach(*((l1->next)))))), >=(*((l1->key)), sll_max_key(*((l1->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(rsrtl_reach(l1), @_vcc_oset_union(rsrtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll(l1), &&(sll(*((l1->next))), unchecked!(@_vcc_oset_in(l1, sll_reach(*((l1->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_reach(l1), @_vcc_oset_union(sll_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_max_key(l1), @\int_max(*((l1->key)), sll_max_key(*((l1->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_min_key(l1), @\int_min(*((l1->key)), sll_min_key(*((l1->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(srtl(l1), &&(&&(srtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, srtl_reach(*((l1->next)))))), <=(*((l1->key)), sll_min_key(*((l1->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(srtl_reach(l1), @_vcc_oset_union(srtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_keys(l0), @_vcc_intset_union(sll_keys(*((l0->next))), @_vcc_intset_singleton(*((l0->key)))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l0, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_list_len_next(l0), unchecked+(sll_list_len_next(*((l0->next))), 1))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l0, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(rsrtl(l0), &&(&&(rsrtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, rsrtl_reach(*((l0->next)))))), >=(*((l0->key)), sll_max_key(*((l0->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(rsrtl_reach(l0), @_vcc_oset_union(rsrtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll(l0), &&(sll(*((l0->next))), unchecked!(@_vcc_oset_in(l0, sll_reach(*((l0->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_reach(l0), @_vcc_oset_union(sll_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_max_key(l0), @\int_max(*((l0->key)), sll_max_key(*((l0->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_min_key(l0), @\int_min(*((l0->key)), sll_min_key(*((l0->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(srtl(l0), &&(&&(srtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, srtl_reach(*((l0->next)))))), <=(*((l0->key)), sll_min_key(*((l0->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(srtl_reach(l0), @_vcc_oset_union(srtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_keys(curr), @_vcc_intset_union(sll_keys(*((curr->next))), @_vcc_intset_singleton(*((curr->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_list_len_next(curr), unchecked+(sll_list_len_next(*((curr->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(rsrtl(curr), &&(&&(rsrtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, rsrtl_reach(*((curr->next)))))), >=(*((curr->key)), sll_max_key(*((curr->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(rsrtl_reach(curr), @_vcc_oset_union(rsrtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll(curr), &&(sll(*((curr->next))), unchecked!(@_vcc_oset_in(curr, sll_reach(*((curr->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_reach(curr), @_vcc_oset_union(sll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_max_key(curr), @\int_max(*((curr->key)), sll_max_key(*((curr->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_min_key(curr), @\int_min(*((curr->key)), sll_min_key(*((curr->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(srtl(curr), &&(&&(srtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, srtl_reach(*((curr->next)))))), <=(*((curr->key)), sll_min_key(*((curr->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(srtl_reach(curr), @_vcc_oset_union(srtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_keys(lpt), @_vcc_intset_union(sll_keys(*((lpt->next))), @_vcc_intset_singleton(*((lpt->key)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#lpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_list_len_next(lpt), unchecked+(sll_list_len_next(*((lpt->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#lpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(rsrtl(lpt), &&(&&(rsrtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, rsrtl_reach(*((lpt->next)))))), >=(*((lpt->key)), sll_max_key(*((lpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(rsrtl_reach(lpt), @_vcc_oset_union(rsrtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll(lpt), &&(sll(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, sll_reach(*((lpt->next)))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_reach(lpt), @_vcc_oset_union(sll_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_max_key(lpt), @\int_max(*((lpt->key)), sll_max_key(*((lpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_min_key(lpt), @\int_min(*((lpt->key)), sll_min_key(*((lpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(srtl(lpt), &&(&&(srtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, srtl_reach(*((lpt->next)))))), <=(*((lpt->key)), sll_min_key(*((lpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(srtl_reach(lpt), @_vcc_oset_union(srtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_keys(rpt), @_vcc_intset_union(sll_keys(*((rpt->next))), @_vcc_intset_singleton(*((rpt->key)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#rpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_list_len_next(rpt), unchecked+(sll_list_len_next(*((rpt->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#rpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(rsrtl(rpt), &&(&&(rsrtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, rsrtl_reach(*((rpt->next)))))), >=(*((rpt->key)), sll_max_key(*((rpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(rsrtl_reach(rpt), @_vcc_oset_union(rsrtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll(rpt), &&(sll(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, sll_reach(*((rpt->next)))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_reach(rpt), @_vcc_oset_union(sll_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_max_key(rpt), @\int_max(*((rpt->key)), sll_max_key(*((rpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_min_key(rpt), @\int_min(*((rpt->key)), sll_min_key(*((rpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(srtl(rpt), &&(&&(srtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, srtl_reach(*((rpt->next)))))), <=(*((rpt->key)), sll_min_key(*((rpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(srtl_reach(rpt), @_vcc_oset_union(srtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_keys(t2), @_vcc_intset_union(sll_keys(*((t2->next))), @_vcc_intset_singleton(*((t2->key)))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_list_len_next(t2), unchecked+(sll_list_len_next(*((t2->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(rsrtl(t2), &&(&&(rsrtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, rsrtl_reach(*((t2->next)))))), >=(*((t2->key)), sll_max_key(*((t2->next))))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(rsrtl_reach(t2), @_vcc_oset_union(rsrtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll(t2), &&(sll(*((t2->next))), unchecked!(@_vcc_oset_in(t2, sll_reach(*((t2->next)))))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_reach(t2), @_vcc_oset_union(sll_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_max_key(t2), @\int_max(*((t2->key)), sll_max_key(*((t2->next)))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_min_key(t2), @\int_min(*((t2->key)), sll_min_key(*((t2->next)))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(srtl(t2), &&(&&(srtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, srtl_reach(*((t2->next)))))), <=(*((t2->key)), sll_min_key(*((t2->next))))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(srtl_reach(t2), @_vcc_oset_union(srtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_keys(t1), @_vcc_intset_union(sll_keys(*((t1->next))), @_vcc_intset_singleton(*((t1->key)))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_list_len_next(t1), unchecked+(sll_list_len_next(*((t1->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(rsrtl(t1), &&(&&(rsrtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, rsrtl_reach(*((t1->next)))))), >=(*((t1->key)), sll_max_key(*((t1->next))))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(rsrtl_reach(t1), @_vcc_oset_union(rsrtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll(t1), &&(sll(*((t1->next))), unchecked!(@_vcc_oset_in(t1, sll_reach(*((t1->next)))))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_reach(t1), @_vcc_oset_union(sll_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_max_key(t1), @\int_max(*((t1->key)), sll_max_key(*((t1->next)))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_min_key(t1), @\int_min(*((t1->key)), sll_min_key(*((t1->next)))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(srtl(t1), &&(&&(srtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, srtl_reach(*((t1->next)))))), <=(*((t1->key)), sll_min_key(*((t1->next))))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(srtl_reach(t1), @_vcc_oset_union(srtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_keys(rpt), @_vcc_intset_union(sll_keys(*((rpt->next))), @_vcc_intset_singleton(*((rpt->key)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#rpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_list_len_next(rpt), unchecked+(sll_list_len_next(*((rpt->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#rpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(rsrtl(rpt), &&(&&(rsrtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, rsrtl_reach(*((rpt->next)))))), >=(*((rpt->key)), sll_max_key(*((rpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(rsrtl_reach(rpt), @_vcc_oset_union(rsrtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll(rpt), &&(sll(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, sll_reach(*((rpt->next)))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_reach(rpt), @_vcc_oset_union(sll_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_max_key(rpt), @\int_max(*((rpt->key)), sll_max_key(*((rpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_min_key(rpt), @\int_min(*((rpt->key)), sll_min_key(*((rpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(srtl(rpt), &&(&&(srtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, srtl_reach(*((rpt->next)))))), <=(*((rpt->key)), sll_min_key(*((rpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(srtl_reach(rpt), @_vcc_oset_union(srtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // _math \state _dryad_S4; 
    // _dryad_S4 := @_vcc_current_state(@state); 
    SL#_dryad_S4 := $current_state($s);
    // _math \state stmtexpr8#18; 
    // stmtexpr8#18 := _dryad_S4; 
    stmtexpr8#18 := SL#_dryad_S4;
    // non-pure function
    // t2 := quick_sort(l); 
    call L#t2 := quick_sort($phys_ptr_cast(P#l, ^s_node));
    assume $full_stop_ext(#tok$3^67.14, $s);
    // _math \state _dryad_S5; 
    // _dryad_S5 := @_vcc_current_state(@state); 
    SL#_dryad_S5 := $current_state($s);
    // _math \state stmtexpr9#19; 
    // stmtexpr9#19 := _dryad_S5; 
    stmtexpr9#19 := SL#_dryad_S5;
    // assume @_vcc_oset_disjoint(srtl_reach(t2), @_vcc_oset_diff(_dryad_G1, old(_dryad_S4, sll_reach(l)))); 
    assume $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)), $oset_diff(SL#_dryad_G1, F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))));
    // _math \oset res_srtl_reach#2; 
    // res_srtl_reach#2 := srtl_reach(t2); 
    call res_srtl_reach#2 := srtl_reach($phys_ptr_cast(L#t2, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _dryad_G1 := @_vcc_oset_union(res_srtl_reach#2, @_vcc_oset_diff(_dryad_G1, pure(old(_dryad_S4, sll_reach(l))))); 
    SL#_dryad_G1 := $oset_union(res_srtl_reach#2, $oset_diff(SL#_dryad_G1, F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))));
    // _math \oset stmtexpr10#20; 
    // stmtexpr10#20 := _dryad_G1; 
    stmtexpr10#20 := SL#_dryad_G1;
    // assume ==(glob_reach(), _dryad_G1); 
    assume F#glob_reach() == SL#_dryad_G1;
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l1))), ==(old(_dryad_S4, sll_keys(l1)), old(_dryad_S5, sll_keys(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l1))), ==(old(_dryad_S4, sll_list_len_next(l1)), old(_dryad_S5, sll_list_len_next(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, rsrtl_reach(l1))), ==(old(_dryad_S4, rsrtl(l1)), old(_dryad_S5, rsrtl(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, rsrtl_reach(l1))), ==(old(_dryad_S4, rsrtl_reach(l1)), old(_dryad_S5, rsrtl_reach(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l1))), ==(old(_dryad_S4, sll(l1)), old(_dryad_S5, sll(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l1))), ==(old(_dryad_S4, sll_reach(l1)), old(_dryad_S5, sll_reach(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l1))), ==(old(_dryad_S4, sll_max_key(l1)), old(_dryad_S5, sll_max_key(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l1))), ==(old(_dryad_S4, sll_min_key(l1)), old(_dryad_S5, sll_min_key(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, srtl_reach(l1))), ==(old(_dryad_S4, srtl(l1)), old(_dryad_S5, srtl(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, srtl_reach(l1))), ==(old(_dryad_S4, srtl_reach(l1)), old(_dryad_S5, srtl_reach(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l1, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l0))), ==(old(_dryad_S4, sll_keys(l0)), old(_dryad_S5, sll_keys(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l0))), ==(old(_dryad_S4, sll_list_len_next(l0)), old(_dryad_S5, sll_list_len_next(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, rsrtl_reach(l0))), ==(old(_dryad_S4, rsrtl(l0)), old(_dryad_S5, rsrtl(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, rsrtl_reach(l0))), ==(old(_dryad_S4, rsrtl_reach(l0)), old(_dryad_S5, rsrtl_reach(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l0))), ==(old(_dryad_S4, sll(l0)), old(_dryad_S5, sll(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l0))), ==(old(_dryad_S4, sll_reach(l0)), old(_dryad_S5, sll_reach(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l0))), ==(old(_dryad_S4, sll_max_key(l0)), old(_dryad_S5, sll_max_key(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l0))), ==(old(_dryad_S4, sll_min_key(l0)), old(_dryad_S5, sll_min_key(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, srtl_reach(l0))), ==(old(_dryad_S4, srtl(l0)), old(_dryad_S5, srtl(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, srtl_reach(l0))), ==(old(_dryad_S4, srtl_reach(l0)), old(_dryad_S5, srtl_reach(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(SL#l0, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(curr))), ==(old(_dryad_S4, sll_keys(curr)), old(_dryad_S5, sll_keys(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(curr))), ==(old(_dryad_S4, sll_list_len_next(curr)), old(_dryad_S5, sll_list_len_next(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, rsrtl_reach(curr))), ==(old(_dryad_S4, rsrtl(curr)), old(_dryad_S5, rsrtl(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, rsrtl_reach(curr))), ==(old(_dryad_S4, rsrtl_reach(curr)), old(_dryad_S5, rsrtl_reach(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(curr))), ==(old(_dryad_S4, sll(curr)), old(_dryad_S5, sll(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(curr))), ==(old(_dryad_S4, sll_reach(curr)), old(_dryad_S5, sll_reach(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(curr))), ==(old(_dryad_S4, sll_max_key(curr)), old(_dryad_S5, sll_max_key(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(curr))), ==(old(_dryad_S4, sll_min_key(curr)), old(_dryad_S5, sll_min_key(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, srtl_reach(curr))), ==(old(_dryad_S4, srtl(curr)), old(_dryad_S5, srtl(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, srtl_reach(curr))), ==(old(_dryad_S4, srtl_reach(curr)), old(_dryad_S5, srtl_reach(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(lpt))), ==(old(_dryad_S4, sll_keys(lpt)), old(_dryad_S5, sll_keys(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(lpt))), ==(old(_dryad_S4, sll_list_len_next(lpt)), old(_dryad_S5, sll_list_len_next(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, rsrtl_reach(lpt))), ==(old(_dryad_S4, rsrtl(lpt)), old(_dryad_S5, rsrtl(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, rsrtl_reach(lpt))), ==(old(_dryad_S4, rsrtl_reach(lpt)), old(_dryad_S5, rsrtl_reach(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(lpt))), ==(old(_dryad_S4, sll(lpt)), old(_dryad_S5, sll(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(lpt))), ==(old(_dryad_S4, sll_reach(lpt)), old(_dryad_S5, sll_reach(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(lpt))), ==(old(_dryad_S4, sll_max_key(lpt)), old(_dryad_S5, sll_max_key(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(lpt))), ==(old(_dryad_S4, sll_min_key(lpt)), old(_dryad_S5, sll_min_key(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, srtl_reach(lpt))), ==(old(_dryad_S4, srtl(lpt)), old(_dryad_S5, srtl(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, srtl_reach(lpt))), ==(old(_dryad_S4, srtl_reach(lpt)), old(_dryad_S5, srtl_reach(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#lpt, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(rpt))), ==(old(_dryad_S4, sll_keys(rpt)), old(_dryad_S5, sll_keys(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(rpt))), ==(old(_dryad_S4, sll_list_len_next(rpt)), old(_dryad_S5, sll_list_len_next(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, rsrtl_reach(rpt))), ==(old(_dryad_S4, rsrtl(rpt)), old(_dryad_S5, rsrtl(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, rsrtl_reach(rpt))), ==(old(_dryad_S4, rsrtl_reach(rpt)), old(_dryad_S5, rsrtl_reach(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(rpt))), ==(old(_dryad_S4, sll(rpt)), old(_dryad_S5, sll(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(rpt))), ==(old(_dryad_S4, sll_reach(rpt)), old(_dryad_S5, sll_reach(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(rpt))), ==(old(_dryad_S4, sll_max_key(rpt)), old(_dryad_S5, sll_max_key(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(rpt))), ==(old(_dryad_S4, sll_min_key(rpt)), old(_dryad_S5, sll_min_key(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, srtl_reach(rpt))), ==(old(_dryad_S4, srtl(rpt)), old(_dryad_S5, srtl(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, srtl_reach(rpt))), ==(old(_dryad_S4, srtl_reach(rpt)), old(_dryad_S5, srtl_reach(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#rpt, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(tmp))), ==(old(_dryad_S4, sll_keys(tmp)), old(_dryad_S5, sll_keys(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(tmp))), ==(old(_dryad_S4, sll_list_len_next(tmp)), old(_dryad_S5, sll_list_len_next(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, rsrtl_reach(tmp))), ==(old(_dryad_S4, rsrtl(tmp)), old(_dryad_S5, rsrtl(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, rsrtl_reach(tmp))), ==(old(_dryad_S4, rsrtl_reach(tmp)), old(_dryad_S5, rsrtl_reach(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(tmp))), ==(old(_dryad_S4, sll(tmp)), old(_dryad_S5, sll(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(tmp))), ==(old(_dryad_S4, sll_reach(tmp)), old(_dryad_S5, sll_reach(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(tmp))), ==(old(_dryad_S4, sll_max_key(tmp)), old(_dryad_S5, sll_max_key(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(tmp))), ==(old(_dryad_S4, sll_min_key(tmp)), old(_dryad_S5, sll_min_key(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, srtl_reach(tmp))), ==(old(_dryad_S4, srtl(tmp)), old(_dryad_S5, srtl(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, srtl_reach(tmp))), ==(old(_dryad_S4, srtl_reach(tmp)), old(_dryad_S5, srtl_reach(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(t1))), ==(old(_dryad_S4, sll_keys(t1)), old(_dryad_S5, sll_keys(t1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(t1))), ==(old(_dryad_S4, sll_list_len_next(t1)), old(_dryad_S5, sll_list_len_next(t1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, rsrtl_reach(t1))), ==(old(_dryad_S4, rsrtl(t1)), old(_dryad_S5, rsrtl(t1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, rsrtl_reach(t1))), ==(old(_dryad_S4, rsrtl_reach(t1)), old(_dryad_S5, rsrtl_reach(t1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(t1))), ==(old(_dryad_S4, sll(t1)), old(_dryad_S5, sll(t1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(t1))), ==(old(_dryad_S4, sll_reach(t1)), old(_dryad_S5, sll_reach(t1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(t1))), ==(old(_dryad_S4, sll_max_key(t1)), old(_dryad_S5, sll_max_key(t1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(t1))), ==(old(_dryad_S4, sll_min_key(t1)), old(_dryad_S5, sll_min_key(t1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, srtl_reach(t1))), ==(old(_dryad_S4, srtl(t1)), old(_dryad_S5, srtl(t1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, srtl_reach(t1))), ==(old(_dryad_S4, srtl_reach(t1)), old(_dryad_S5, srtl_reach(t1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#t1, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l))), ==(old(_dryad_S4, sll_keys(l)), old(_dryad_S5, sll_keys(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l))), ==(old(_dryad_S4, sll_list_len_next(l)), old(_dryad_S5, sll_list_len_next(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, rsrtl_reach(l))), ==(old(_dryad_S4, rsrtl(l)), old(_dryad_S5, rsrtl(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, rsrtl_reach(l))), ==(old(_dryad_S4, rsrtl_reach(l)), old(_dryad_S5, rsrtl_reach(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l))), ==(old(_dryad_S4, sll(l)), old(_dryad_S5, sll(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l))), ==(old(_dryad_S4, sll_reach(l)), old(_dryad_S5, sll_reach(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l))), ==(old(_dryad_S4, sll_max_key(l)), old(_dryad_S5, sll_max_key(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, sll_reach(l))), ==(old(_dryad_S4, sll_min_key(l)), old(_dryad_S5, sll_min_key(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, srtl_reach(l))), ==(old(_dryad_S4, srtl(l)), old(_dryad_S5, srtl(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S4, sll_reach(l)), old(_dryad_S4, srtl_reach(l))), ==(old(_dryad_S4, srtl_reach(l)), old(_dryad_S5, srtl_reach(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_keys(l1), @_vcc_intset_union(sll_keys(*((l1->next))), @_vcc_intset_singleton(*((l1->key)))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_list_len_next(l1), unchecked+(sll_list_len_next(*((l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(rsrtl(l1), &&(&&(rsrtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, rsrtl_reach(*((l1->next)))))), >=(*((l1->key)), sll_max_key(*((l1->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(rsrtl_reach(l1), @_vcc_oset_union(rsrtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll(l1), &&(sll(*((l1->next))), unchecked!(@_vcc_oset_in(l1, sll_reach(*((l1->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_reach(l1), @_vcc_oset_union(sll_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_max_key(l1), @\int_max(*((l1->key)), sll_max_key(*((l1->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_min_key(l1), @\int_min(*((l1->key)), sll_min_key(*((l1->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(srtl(l1), &&(&&(srtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, srtl_reach(*((l1->next)))))), <=(*((l1->key)), sll_min_key(*((l1->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(srtl_reach(l1), @_vcc_oset_union(srtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_keys(l0), @_vcc_intset_union(sll_keys(*((l0->next))), @_vcc_intset_singleton(*((l0->key)))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l0, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_list_len_next(l0), unchecked+(sll_list_len_next(*((l0->next))), 1))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l0, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(rsrtl(l0), &&(&&(rsrtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, rsrtl_reach(*((l0->next)))))), >=(*((l0->key)), sll_max_key(*((l0->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(rsrtl_reach(l0), @_vcc_oset_union(rsrtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll(l0), &&(sll(*((l0->next))), unchecked!(@_vcc_oset_in(l0, sll_reach(*((l0->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_reach(l0), @_vcc_oset_union(sll_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_max_key(l0), @\int_max(*((l0->key)), sll_max_key(*((l0->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_min_key(l0), @\int_min(*((l0->key)), sll_min_key(*((l0->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(srtl(l0), &&(&&(srtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, srtl_reach(*((l0->next)))))), <=(*((l0->key)), sll_min_key(*((l0->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(srtl_reach(l0), @_vcc_oset_union(srtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_keys(curr), @_vcc_intset_union(sll_keys(*((curr->next))), @_vcc_intset_singleton(*((curr->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_list_len_next(curr), unchecked+(sll_list_len_next(*((curr->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(rsrtl(curr), &&(&&(rsrtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, rsrtl_reach(*((curr->next)))))), >=(*((curr->key)), sll_max_key(*((curr->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(rsrtl_reach(curr), @_vcc_oset_union(rsrtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll(curr), &&(sll(*((curr->next))), unchecked!(@_vcc_oset_in(curr, sll_reach(*((curr->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_reach(curr), @_vcc_oset_union(sll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_max_key(curr), @\int_max(*((curr->key)), sll_max_key(*((curr->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_min_key(curr), @\int_min(*((curr->key)), sll_min_key(*((curr->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(srtl(curr), &&(&&(srtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, srtl_reach(*((curr->next)))))), <=(*((curr->key)), sll_min_key(*((curr->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(srtl_reach(curr), @_vcc_oset_union(srtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_keys(lpt), @_vcc_intset_union(sll_keys(*((lpt->next))), @_vcc_intset_singleton(*((lpt->key)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#lpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_list_len_next(lpt), unchecked+(sll_list_len_next(*((lpt->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#lpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(rsrtl(lpt), &&(&&(rsrtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, rsrtl_reach(*((lpt->next)))))), >=(*((lpt->key)), sll_max_key(*((lpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(rsrtl_reach(lpt), @_vcc_oset_union(rsrtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll(lpt), &&(sll(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, sll_reach(*((lpt->next)))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_reach(lpt), @_vcc_oset_union(sll_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_max_key(lpt), @\int_max(*((lpt->key)), sll_max_key(*((lpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_min_key(lpt), @\int_min(*((lpt->key)), sll_min_key(*((lpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(srtl(lpt), &&(&&(srtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, srtl_reach(*((lpt->next)))))), <=(*((lpt->key)), sll_min_key(*((lpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(srtl_reach(lpt), @_vcc_oset_union(srtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_keys(rpt), @_vcc_intset_union(sll_keys(*((rpt->next))), @_vcc_intset_singleton(*((rpt->key)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#rpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_list_len_next(rpt), unchecked+(sll_list_len_next(*((rpt->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#rpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(rsrtl(rpt), &&(&&(rsrtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, rsrtl_reach(*((rpt->next)))))), >=(*((rpt->key)), sll_max_key(*((rpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(rsrtl_reach(rpt), @_vcc_oset_union(rsrtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll(rpt), &&(sll(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, sll_reach(*((rpt->next)))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_reach(rpt), @_vcc_oset_union(sll_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_max_key(rpt), @\int_max(*((rpt->key)), sll_max_key(*((rpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_min_key(rpt), @\int_min(*((rpt->key)), sll_min_key(*((rpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(srtl(rpt), &&(&&(srtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, srtl_reach(*((rpt->next)))))), <=(*((rpt->key)), sll_min_key(*((rpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(srtl_reach(rpt), @_vcc_oset_union(srtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_keys(t2), @_vcc_intset_union(sll_keys(*((t2->next))), @_vcc_intset_singleton(*((t2->key)))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_list_len_next(t2), unchecked+(sll_list_len_next(*((t2->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(rsrtl(t2), &&(&&(rsrtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, rsrtl_reach(*((t2->next)))))), >=(*((t2->key)), sll_max_key(*((t2->next))))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(rsrtl_reach(t2), @_vcc_oset_union(rsrtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll(t2), &&(sll(*((t2->next))), unchecked!(@_vcc_oset_in(t2, sll_reach(*((t2->next)))))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_reach(t2), @_vcc_oset_union(sll_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_max_key(t2), @\int_max(*((t2->key)), sll_max_key(*((t2->next)))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_min_key(t2), @\int_min(*((t2->key)), sll_min_key(*((t2->next)))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(srtl(t2), &&(&&(srtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, srtl_reach(*((t2->next)))))), <=(*((t2->key)), sll_min_key(*((t2->next))))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(srtl_reach(t2), @_vcc_oset_union(srtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_keys(t1), @_vcc_intset_union(sll_keys(*((t1->next))), @_vcc_intset_singleton(*((t1->key)))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_list_len_next(t1), unchecked+(sll_list_len_next(*((t1->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(rsrtl(t1), &&(&&(rsrtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, rsrtl_reach(*((t1->next)))))), >=(*((t1->key)), sll_max_key(*((t1->next))))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(rsrtl_reach(t1), @_vcc_oset_union(rsrtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll(t1), &&(sll(*((t1->next))), unchecked!(@_vcc_oset_in(t1, sll_reach(*((t1->next)))))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_reach(t1), @_vcc_oset_union(sll_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_max_key(t1), @\int_max(*((t1->key)), sll_max_key(*((t1->next)))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_min_key(t1), @\int_min(*((t1->key)), sll_min_key(*((t1->next)))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(srtl(t1), &&(&&(srtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, srtl_reach(*((t1->next)))))), <=(*((t1->key)), sll_min_key(*((t1->next))))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(srtl_reach(t1), @_vcc_oset_union(srtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(!(@_vcc_oset_in(l1, old(_dryad_S4, sll_reach(l)))), ==(*((l1->key)), old(_dryad_S4, *((l1->key))))); 
    assume !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(!(@_vcc_oset_in(l1, old(_dryad_S4, sll_reach(l)))), @_vcc_ptr_eq_pure(*((l1->next)), old(_dryad_S4, *((l1->next))))); 
    assume !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_oset_in(l0, old(_dryad_S4, sll_reach(l)))), ==(*((l0->key)), old(_dryad_S4, *((l0->key))))); 
    assume !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(!(@_vcc_oset_in(l0, old(_dryad_S4, sll_reach(l)))), @_vcc_ptr_eq_pure(*((l0->next)), old(_dryad_S4, *((l0->next))))); 
    assume !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_oset_in(curr, old(_dryad_S4, sll_reach(l)))), ==(*((curr->key)), old(_dryad_S4, *((curr->key))))); 
    assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(!(@_vcc_oset_in(curr, old(_dryad_S4, sll_reach(l)))), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S4, *((curr->next))))); 
    assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_oset_in(lpt, old(_dryad_S4, sll_reach(l)))), ==(*((lpt->key)), old(_dryad_S4, *((lpt->key))))); 
    assume !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(!(@_vcc_oset_in(lpt, old(_dryad_S4, sll_reach(l)))), @_vcc_ptr_eq_pure(*((lpt->next)), old(_dryad_S4, *((lpt->next))))); 
    assume !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_oset_in(rpt, old(_dryad_S4, sll_reach(l)))), ==(*((rpt->key)), old(_dryad_S4, *((rpt->key))))); 
    assume !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(!(@_vcc_oset_in(rpt, old(_dryad_S4, sll_reach(l)))), @_vcc_ptr_eq_pure(*((rpt->next)), old(_dryad_S4, *((rpt->next))))); 
    assume !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_oset_in(tmp, old(_dryad_S4, sll_reach(l)))), ==(*((tmp->key)), old(_dryad_S4, *((tmp->key))))); 
    assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(!(@_vcc_oset_in(tmp, old(_dryad_S4, sll_reach(l)))), @_vcc_ptr_eq_pure(*((tmp->next)), old(_dryad_S4, *((tmp->next))))); 
    assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_oset_in(t1, old(_dryad_S4, sll_reach(l)))), ==(*((t1->key)), old(_dryad_S4, *((t1->key))))); 
    assume !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#t1, ^s_node));
    // assume ==>(!(@_vcc_oset_in(t1, old(_dryad_S4, sll_reach(l)))), @_vcc_ptr_eq_pure(*((t1->next)), old(_dryad_S4, *((t1->next))))); 
    assume !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_oset_in(l, old(_dryad_S4, sll_reach(l)))), ==(*((l->key)), old(_dryad_S4, *((l->key))))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(!(@_vcc_oset_in(l, old(_dryad_S4, sll_reach(l)))), @_vcc_ptr_eq_pure(*((l->next)), old(_dryad_S4, *((l->next))))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#l, ^s_node))) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node);
    assume true;
    // if (@_vcc_ptr_eq_null(lpt)) ...
    if ($is_null($phys_ptr_cast(L#lpt, ^s_node)))
    {
      anon9:
        // return t2; 
        $result := $phys_ptr_cast(L#t2, ^s_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon10:
        // assert @_vcc_possibly_unreachable; 
        assert {:PossiblyUnreachable true} true;
    }

  anon14:
    // _math \state _dryad_S6; 
    // _dryad_S6 := @_vcc_current_state(@state); 
    SL#_dryad_S6 := $current_state($s);
    // _math \state stmtexpr11#21; 
    // stmtexpr11#21 := _dryad_S6; 
    stmtexpr11#21 := SL#_dryad_S6;
    // non-pure function
    // t1 := quick_sort(lpt); 
    call L#t1 := quick_sort($phys_ptr_cast(L#lpt, ^s_node));
    assume $full_stop_ext(#tok$3^72.14, $s);
    // _math \state _dryad_S7; 
    // _dryad_S7 := @_vcc_current_state(@state); 
    SL#_dryad_S7 := $current_state($s);
    // _math \state stmtexpr12#22; 
    // stmtexpr12#22 := _dryad_S7; 
    stmtexpr12#22 := SL#_dryad_S7;
    // assume @_vcc_oset_disjoint(srtl_reach(t1), @_vcc_oset_diff(_dryad_G1, old(_dryad_S6, sll_reach(lpt)))); 
    assume $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)), $oset_diff(SL#_dryad_G1, F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))));
    // _math \oset res_srtl_reach#3; 
    // res_srtl_reach#3 := srtl_reach(t1); 
    call res_srtl_reach#3 := srtl_reach($phys_ptr_cast(L#t1, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _dryad_G1 := @_vcc_oset_union(res_srtl_reach#3, @_vcc_oset_diff(_dryad_G1, pure(old(_dryad_S6, sll_reach(lpt))))); 
    SL#_dryad_G1 := $oset_union(res_srtl_reach#3, $oset_diff(SL#_dryad_G1, F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))));
    // _math \oset stmtexpr13#23; 
    // stmtexpr13#23 := _dryad_G1; 
    stmtexpr13#23 := SL#_dryad_G1;
    // assume ==(glob_reach(), _dryad_G1); 
    assume F#glob_reach() == SL#_dryad_G1;
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l1))), ==(old(_dryad_S6, sll_keys(l1)), old(_dryad_S7, sll_keys(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l1))), ==(old(_dryad_S6, sll_list_len_next(l1)), old(_dryad_S7, sll_list_len_next(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, rsrtl_reach(l1))), ==(old(_dryad_S6, rsrtl(l1)), old(_dryad_S7, rsrtl(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, rsrtl_reach(l1))), ==(old(_dryad_S6, rsrtl_reach(l1)), old(_dryad_S7, rsrtl_reach(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l1))), ==(old(_dryad_S6, sll(l1)), old(_dryad_S7, sll(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l1))), ==(old(_dryad_S6, sll_reach(l1)), old(_dryad_S7, sll_reach(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l1))), ==(old(_dryad_S6, sll_max_key(l1)), old(_dryad_S7, sll_max_key(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l1))), ==(old(_dryad_S6, sll_min_key(l1)), old(_dryad_S7, sll_min_key(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, srtl_reach(l1))), ==(old(_dryad_S6, srtl(l1)), old(_dryad_S7, srtl(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, srtl_reach(l1))), ==(old(_dryad_S6, srtl_reach(l1)), old(_dryad_S7, srtl_reach(l1)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l1, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l0))), ==(old(_dryad_S6, sll_keys(l0)), old(_dryad_S7, sll_keys(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l0))), ==(old(_dryad_S6, sll_list_len_next(l0)), old(_dryad_S7, sll_list_len_next(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, rsrtl_reach(l0))), ==(old(_dryad_S6, rsrtl(l0)), old(_dryad_S7, rsrtl(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, rsrtl_reach(l0))), ==(old(_dryad_S6, rsrtl_reach(l0)), old(_dryad_S7, rsrtl_reach(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l0))), ==(old(_dryad_S6, sll(l0)), old(_dryad_S7, sll(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l0))), ==(old(_dryad_S6, sll_reach(l0)), old(_dryad_S7, sll_reach(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l0))), ==(old(_dryad_S6, sll_max_key(l0)), old(_dryad_S7, sll_max_key(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l0))), ==(old(_dryad_S6, sll_min_key(l0)), old(_dryad_S7, sll_min_key(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, srtl_reach(l0))), ==(old(_dryad_S6, srtl(l0)), old(_dryad_S7, srtl(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, srtl_reach(l0))), ==(old(_dryad_S6, srtl_reach(l0)), old(_dryad_S7, srtl_reach(l0)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#l0, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(curr))), ==(old(_dryad_S6, sll_keys(curr)), old(_dryad_S7, sll_keys(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(curr))), ==(old(_dryad_S6, sll_list_len_next(curr)), old(_dryad_S7, sll_list_len_next(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, rsrtl_reach(curr))), ==(old(_dryad_S6, rsrtl(curr)), old(_dryad_S7, rsrtl(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, rsrtl_reach(curr))), ==(old(_dryad_S6, rsrtl_reach(curr)), old(_dryad_S7, rsrtl_reach(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(curr))), ==(old(_dryad_S6, sll(curr)), old(_dryad_S7, sll(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(curr))), ==(old(_dryad_S6, sll_reach(curr)), old(_dryad_S7, sll_reach(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(curr))), ==(old(_dryad_S6, sll_max_key(curr)), old(_dryad_S7, sll_max_key(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(curr))), ==(old(_dryad_S6, sll_min_key(curr)), old(_dryad_S7, sll_min_key(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, srtl_reach(curr))), ==(old(_dryad_S6, srtl(curr)), old(_dryad_S7, srtl(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, srtl_reach(curr))), ==(old(_dryad_S6, srtl_reach(curr)), old(_dryad_S7, srtl_reach(curr)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(lpt))), ==(old(_dryad_S6, sll_keys(lpt)), old(_dryad_S7, sll_keys(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(lpt))), ==(old(_dryad_S6, sll_list_len_next(lpt)), old(_dryad_S7, sll_list_len_next(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, rsrtl_reach(lpt))), ==(old(_dryad_S6, rsrtl(lpt)), old(_dryad_S7, rsrtl(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, rsrtl_reach(lpt))), ==(old(_dryad_S6, rsrtl_reach(lpt)), old(_dryad_S7, rsrtl_reach(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(lpt))), ==(old(_dryad_S6, sll(lpt)), old(_dryad_S7, sll(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(lpt))), ==(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S7, sll_reach(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(lpt))), ==(old(_dryad_S6, sll_max_key(lpt)), old(_dryad_S7, sll_max_key(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(lpt))), ==(old(_dryad_S6, sll_min_key(lpt)), old(_dryad_S7, sll_min_key(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, srtl_reach(lpt))), ==(old(_dryad_S6, srtl(lpt)), old(_dryad_S7, srtl(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, srtl_reach(lpt))), ==(old(_dryad_S6, srtl_reach(lpt)), old(_dryad_S7, srtl_reach(lpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(rpt))), ==(old(_dryad_S6, sll_keys(rpt)), old(_dryad_S7, sll_keys(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(rpt))), ==(old(_dryad_S6, sll_list_len_next(rpt)), old(_dryad_S7, sll_list_len_next(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, rsrtl_reach(rpt))), ==(old(_dryad_S6, rsrtl(rpt)), old(_dryad_S7, rsrtl(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, rsrtl_reach(rpt))), ==(old(_dryad_S6, rsrtl_reach(rpt)), old(_dryad_S7, rsrtl_reach(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(rpt))), ==(old(_dryad_S6, sll(rpt)), old(_dryad_S7, sll(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(rpt))), ==(old(_dryad_S6, sll_reach(rpt)), old(_dryad_S7, sll_reach(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(rpt))), ==(old(_dryad_S6, sll_max_key(rpt)), old(_dryad_S7, sll_max_key(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(rpt))), ==(old(_dryad_S6, sll_min_key(rpt)), old(_dryad_S7, sll_min_key(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, srtl_reach(rpt))), ==(old(_dryad_S6, srtl(rpt)), old(_dryad_S7, srtl(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, srtl_reach(rpt))), ==(old(_dryad_S6, srtl_reach(rpt)), old(_dryad_S7, srtl_reach(rpt)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#rpt, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(tmp))), ==(old(_dryad_S6, sll_keys(tmp)), old(_dryad_S7, sll_keys(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(tmp))), ==(old(_dryad_S6, sll_list_len_next(tmp)), old(_dryad_S7, sll_list_len_next(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, rsrtl_reach(tmp))), ==(old(_dryad_S6, rsrtl(tmp)), old(_dryad_S7, rsrtl(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, rsrtl_reach(tmp))), ==(old(_dryad_S6, rsrtl_reach(tmp)), old(_dryad_S7, rsrtl_reach(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(tmp))), ==(old(_dryad_S6, sll(tmp)), old(_dryad_S7, sll(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(tmp))), ==(old(_dryad_S6, sll_reach(tmp)), old(_dryad_S7, sll_reach(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(tmp))), ==(old(_dryad_S6, sll_max_key(tmp)), old(_dryad_S7, sll_max_key(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(tmp))), ==(old(_dryad_S6, sll_min_key(tmp)), old(_dryad_S7, sll_min_key(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, srtl_reach(tmp))), ==(old(_dryad_S6, srtl(tmp)), old(_dryad_S7, srtl(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, srtl_reach(tmp))), ==(old(_dryad_S6, srtl_reach(tmp)), old(_dryad_S7, srtl_reach(tmp)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(t2))), ==(old(_dryad_S6, sll_keys(t2)), old(_dryad_S7, sll_keys(t2)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(t2))), ==(old(_dryad_S6, sll_list_len_next(t2)), old(_dryad_S7, sll_list_len_next(t2)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, rsrtl_reach(t2))), ==(old(_dryad_S6, rsrtl(t2)), old(_dryad_S7, rsrtl(t2)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, rsrtl_reach(t2))), ==(old(_dryad_S6, rsrtl_reach(t2)), old(_dryad_S7, rsrtl_reach(t2)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(t2))), ==(old(_dryad_S6, sll(t2)), old(_dryad_S7, sll(t2)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(t2))), ==(old(_dryad_S6, sll_reach(t2)), old(_dryad_S7, sll_reach(t2)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(t2))), ==(old(_dryad_S6, sll_max_key(t2)), old(_dryad_S7, sll_max_key(t2)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(t2))), ==(old(_dryad_S6, sll_min_key(t2)), old(_dryad_S7, sll_min_key(t2)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, srtl_reach(t2))), ==(old(_dryad_S6, srtl(t2)), old(_dryad_S7, srtl(t2)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, srtl_reach(t2))), ==(old(_dryad_S6, srtl_reach(t2)), old(_dryad_S7, srtl_reach(t2)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#t2, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l))), ==(old(_dryad_S6, sll_keys(l)), old(_dryad_S7, sll_keys(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l))), ==(old(_dryad_S6, sll_list_len_next(l)), old(_dryad_S7, sll_list_len_next(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, rsrtl_reach(l))), ==(old(_dryad_S6, rsrtl(l)), old(_dryad_S7, rsrtl(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, rsrtl_reach(l))), ==(old(_dryad_S6, rsrtl_reach(l)), old(_dryad_S7, rsrtl_reach(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l))), ==(old(_dryad_S6, sll(l)), old(_dryad_S7, sll(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l))), ==(old(_dryad_S6, sll_reach(l)), old(_dryad_S7, sll_reach(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l))), ==(old(_dryad_S6, sll_max_key(l)), old(_dryad_S7, sll_max_key(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, sll_reach(l))), ==(old(_dryad_S6, sll_min_key(l)), old(_dryad_S7, sll_min_key(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, srtl_reach(l))), ==(old(_dryad_S6, srtl(l)), old(_dryad_S7, srtl(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_oset_disjoint(old(_dryad_S6, sll_reach(lpt)), old(_dryad_S6, srtl_reach(l))), ==(old(_dryad_S6, srtl_reach(l)), old(_dryad_S7, srtl_reach(l)))); 
    assume $oset_disjoint(F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node)), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#l, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_keys(l1), @_vcc_intset_union(sll_keys(*((l1->next))), @_vcc_intset_singleton(*((l1->key)))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_list_len_next(l1), unchecked+(sll_list_len_next(*((l1->next))), 1))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(rsrtl(l1), &&(&&(rsrtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, rsrtl_reach(*((l1->next)))))), >=(*((l1->key)), sll_max_key(*((l1->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(rsrtl_reach(l1), @_vcc_oset_union(rsrtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll(l1), &&(sll(*((l1->next))), unchecked!(@_vcc_oset_in(l1, sll_reach(*((l1->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(sll_reach(l1), @_vcc_oset_union(sll_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_max_key(l1), @\int_max(*((l1->key)), sll_max_key(*((l1->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(sll_min_key(l1), @\int_min(*((l1->key)), sll_min_key(*((l1->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l1), @_vcc_ptr_neq_null(*((l1->next)))), ==(srtl(l1), &&(&&(srtl(*((l1->next))), unchecked!(@_vcc_oset_in(l1, srtl_reach(*((l1->next)))))), <=(*((l1->key)), sll_min_key(*((l1->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l1), ==(srtl_reach(l1), @_vcc_oset_union(srtl_reach(*((l1->next))), @_vcc_oset_singleton(l1)))); 
    assume $non_null($phys_ptr_cast(SL#l1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_keys(l0), @_vcc_intset_union(sll_keys(*((l0->next))), @_vcc_intset_singleton(*((l0->key)))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#l0, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_list_len_next(l0), unchecked+(sll_list_len_next(*((l0->next))), 1))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#l0, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(rsrtl(l0), &&(&&(rsrtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, rsrtl_reach(*((l0->next)))))), >=(*((l0->key)), sll_max_key(*((l0->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(rsrtl_reach(l0), @_vcc_oset_union(rsrtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll(l0), &&(sll(*((l0->next))), unchecked!(@_vcc_oset_in(l0, sll_reach(*((l0->next)))))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(sll_reach(l0), @_vcc_oset_union(sll_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_max_key(l0), @\int_max(*((l0->key)), sll_max_key(*((l0->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(sll_min_key(l0), @\int_min(*((l0->key)), sll_min_key(*((l0->next)))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#l0, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l0), @_vcc_ptr_neq_null(*((l0->next)))), ==(srtl(l0), &&(&&(srtl(*((l0->next))), unchecked!(@_vcc_oset_in(l0, srtl_reach(*((l0->next)))))), <=(*((l0->key)), sll_min_key(*((l0->next))))))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#l0, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l0), ==(srtl_reach(l0), @_vcc_oset_union(srtl_reach(*((l0->next))), @_vcc_oset_singleton(l0)))); 
    assume $non_null($phys_ptr_cast(SL#l0, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#l0, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#l0, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_keys(curr), @_vcc_intset_union(sll_keys(*((curr->next))), @_vcc_intset_singleton(*((curr->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_list_len_next(curr), unchecked+(sll_list_len_next(*((curr->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(rsrtl(curr), &&(&&(rsrtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, rsrtl_reach(*((curr->next)))))), >=(*((curr->key)), sll_max_key(*((curr->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(rsrtl_reach(curr), @_vcc_oset_union(rsrtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll(curr), &&(sll(*((curr->next))), unchecked!(@_vcc_oset_in(curr, sll_reach(*((curr->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(sll_reach(curr), @_vcc_oset_union(sll_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_max_key(curr), @\int_max(*((curr->key)), sll_max_key(*((curr->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(sll_min_key(curr), @\int_min(*((curr->key)), sll_min_key(*((curr->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr), @_vcc_ptr_neq_null(*((curr->next)))), ==(srtl(curr), &&(&&(srtl(*((curr->next))), unchecked!(@_vcc_oset_in(curr, srtl_reach(*((curr->next)))))), <=(*((curr->key)), sll_min_key(*((curr->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr), ==(srtl_reach(curr), @_vcc_oset_union(srtl_reach(*((curr->next))), @_vcc_oset_singleton(curr)))); 
    assume $non_null($phys_ptr_cast(L#curr, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_keys(lpt), @_vcc_intset_union(sll_keys(*((lpt->next))), @_vcc_intset_singleton(*((lpt->key)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#lpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_list_len_next(lpt), unchecked+(sll_list_len_next(*((lpt->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#lpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(rsrtl(lpt), &&(&&(rsrtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, rsrtl_reach(*((lpt->next)))))), >=(*((lpt->key)), sll_max_key(*((lpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(rsrtl_reach(lpt), @_vcc_oset_union(rsrtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll(lpt), &&(sll(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, sll_reach(*((lpt->next)))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(sll_reach(lpt), @_vcc_oset_union(sll_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_max_key(lpt), @\int_max(*((lpt->key)), sll_max_key(*((lpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(sll_min_key(lpt), @\int_min(*((lpt->key)), sll_min_key(*((lpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#lpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(lpt), @_vcc_ptr_neq_null(*((lpt->next)))), ==(srtl(lpt), &&(&&(srtl(*((lpt->next))), unchecked!(@_vcc_oset_in(lpt, srtl_reach(*((lpt->next)))))), <=(*((lpt->key)), sll_min_key(*((lpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#lpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(lpt), ==(srtl_reach(lpt), @_vcc_oset_union(srtl_reach(*((lpt->next))), @_vcc_oset_singleton(lpt)))); 
    assume $non_null($phys_ptr_cast(L#lpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#lpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#lpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_keys(rpt), @_vcc_intset_union(sll_keys(*((rpt->next))), @_vcc_intset_singleton(*((rpt->key)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#rpt, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_list_len_next(rpt), unchecked+(sll_list_len_next(*((rpt->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#rpt, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(rsrtl(rpt), &&(&&(rsrtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, rsrtl_reach(*((rpt->next)))))), >=(*((rpt->key)), sll_max_key(*((rpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(rsrtl_reach(rpt), @_vcc_oset_union(rsrtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll(rpt), &&(sll(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, sll_reach(*((rpt->next)))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(sll_reach(rpt), @_vcc_oset_union(sll_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_max_key(rpt), @\int_max(*((rpt->key)), sll_max_key(*((rpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(sll_min_key(rpt), @\int_min(*((rpt->key)), sll_min_key(*((rpt->next)))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#rpt, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(rpt), @_vcc_ptr_neq_null(*((rpt->next)))), ==(srtl(rpt), &&(&&(srtl(*((rpt->next))), unchecked!(@_vcc_oset_in(rpt, srtl_reach(*((rpt->next)))))), <=(*((rpt->key)), sll_min_key(*((rpt->next))))))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#rpt, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(rpt), ==(srtl_reach(rpt), @_vcc_oset_union(srtl_reach(*((rpt->next))), @_vcc_oset_singleton(rpt)))); 
    assume $non_null($phys_ptr_cast(L#rpt, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#rpt, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#rpt, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
    assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_keys(t2), @_vcc_intset_union(sll_keys(*((t2->next))), @_vcc_intset_singleton(*((t2->key)))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_list_len_next(t2), unchecked+(sll_list_len_next(*((t2->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(rsrtl(t2), &&(&&(rsrtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, rsrtl_reach(*((t2->next)))))), >=(*((t2->key)), sll_max_key(*((t2->next))))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(rsrtl_reach(t2), @_vcc_oset_union(rsrtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll(t2), &&(sll(*((t2->next))), unchecked!(@_vcc_oset_in(t2, sll_reach(*((t2->next)))))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(sll_reach(t2), @_vcc_oset_union(sll_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_max_key(t2), @\int_max(*((t2->key)), sll_max_key(*((t2->next)))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(sll_min_key(t2), @\int_min(*((t2->key)), sll_min_key(*((t2->next)))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t2), @_vcc_ptr_neq_null(*((t2->next)))), ==(srtl(t2), &&(&&(srtl(*((t2->next))), unchecked!(@_vcc_oset_in(t2, srtl_reach(*((t2->next)))))), <=(*((t2->key)), sll_min_key(*((t2->next))))))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t2), ==(srtl_reach(t2), @_vcc_oset_union(srtl_reach(*((t2->next))), @_vcc_oset_singleton(t2)))); 
    assume $non_null($phys_ptr_cast(L#t2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t2, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_keys(t1), @_vcc_intset_union(sll_keys(*((t1->next))), @_vcc_intset_singleton(*((t1->key)))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#t1, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_list_len_next(t1), unchecked+(sll_list_len_next(*((t1->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#t1, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(rsrtl(t1), &&(&&(rsrtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, rsrtl_reach(*((t1->next)))))), >=(*((t1->key)), sll_max_key(*((t1->next))))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(rsrtl_reach(t1), @_vcc_oset_union(rsrtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll(t1), &&(sll(*((t1->next))), unchecked!(@_vcc_oset_in(t1, sll_reach(*((t1->next)))))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(sll_reach(t1), @_vcc_oset_union(sll_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_max_key(t1), @\int_max(*((t1->key)), sll_max_key(*((t1->next)))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(sll_min_key(t1), @\int_min(*((t1->key)), sll_min_key(*((t1->next)))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#t1, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(t1), @_vcc_ptr_neq_null(*((t1->next)))), ==(srtl(t1), &&(&&(srtl(*((t1->next))), unchecked!(@_vcc_oset_in(t1, srtl_reach(*((t1->next)))))), <=(*((t1->key)), sll_min_key(*((t1->next))))))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#t1, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#t1, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#t1, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(t1), ==(srtl_reach(t1), @_vcc_oset_union(srtl_reach(*((t1->next))), @_vcc_oset_singleton(t1)))); 
    assume $non_null($phys_ptr_cast(L#t1, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#t1, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t1, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#t1, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_keys(l), @_vcc_intset_union(sll_keys(*((l->next))), @_vcc_intset_singleton(*((l->key)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#l, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_list_len_next(l), unchecked+(sll_list_len_next(*((l->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#l, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(rsrtl(l), &&(&&(rsrtl(*((l->next))), unchecked!(@_vcc_oset_in(l, rsrtl_reach(*((l->next)))))), >=(*((l->key)), sll_max_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(rsrtl_reach(l), @_vcc_oset_union(rsrtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll(l), &&(sll(*((l->next))), unchecked!(@_vcc_oset_in(l, sll_reach(*((l->next)))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#l, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(sll_reach(l), @_vcc_oset_union(sll_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_max_key(l), @\int_max(*((l->key)), sll_max_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(sll_min_key(l), @\int_min(*((l->key)), sll_min_key(*((l->next)))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#l, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(l), @_vcc_ptr_neq_null(*((l->next)))), ==(srtl(l), &&(&&(srtl(*((l->next))), unchecked!(@_vcc_oset_in(l, srtl_reach(*((l->next)))))), <=(*((l->key)), sll_min_key(*((l->next))))))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#l, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#l, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(l), ==(srtl_reach(l), @_vcc_oset_union(srtl_reach(*((l->next))), @_vcc_oset_singleton(l)))); 
    assume $non_null($phys_ptr_cast(P#l, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#l, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#l, ^s_node)));
    // assume ==>(!(@_vcc_oset_in(l1, old(_dryad_S6, sll_reach(lpt)))), ==(*((l1->key)), old(_dryad_S6, *((l1->key))))); 
    assume !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l1, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(SL#l1, ^s_node));
    // assume ==>(!(@_vcc_oset_in(l1, old(_dryad_S6, sll_reach(lpt)))), @_vcc_ptr_eq_pure(*((l1->next)), old(_dryad_S6, *((l1->next))))); 
    assume !$oset_in($phys_ptr_cast(SL#l1, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(SL#l1, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_oset_in(l0, old(_dryad_S6, sll_reach(lpt)))), ==(*((l0->key)), old(_dryad_S6, *((l0->key))))); 
    assume !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#l0, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(SL#l0, ^s_node));
    // assume ==>(!(@_vcc_oset_in(l0, old(_dryad_S6, sll_reach(lpt)))), @_vcc_ptr_eq_pure(*((l0->next)), old(_dryad_S6, *((l0->next))))); 
    assume !$oset_in($phys_ptr_cast(SL#l0, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(SL#l0, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_oset_in(curr, old(_dryad_S6, sll_reach(lpt)))), ==(*((curr->key)), old(_dryad_S6, *((curr->key))))); 
    assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#curr, ^s_node));
    // assume ==>(!(@_vcc_oset_in(curr, old(_dryad_S6, sll_reach(lpt)))), @_vcc_ptr_eq_pure(*((curr->next)), old(_dryad_S6, *((curr->next))))); 
    assume !$oset_in($phys_ptr_cast(L#curr, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#curr, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_oset_in(lpt, old(_dryad_S6, sll_reach(lpt)))), ==(*((lpt->key)), old(_dryad_S6, *((lpt->key))))); 
    assume !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#lpt, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#lpt, ^s_node));
    // assume ==>(!(@_vcc_oset_in(lpt, old(_dryad_S6, sll_reach(lpt)))), @_vcc_ptr_eq_pure(*((lpt->next)), old(_dryad_S6, *((lpt->next))))); 
    assume !$oset_in($phys_ptr_cast(L#lpt, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#lpt, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_oset_in(rpt, old(_dryad_S6, sll_reach(lpt)))), ==(*((rpt->key)), old(_dryad_S6, *((rpt->key))))); 
    assume !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#rpt, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#rpt, ^s_node));
    // assume ==>(!(@_vcc_oset_in(rpt, old(_dryad_S6, sll_reach(lpt)))), @_vcc_ptr_eq_pure(*((rpt->next)), old(_dryad_S6, *((rpt->next))))); 
    assume !$oset_in($phys_ptr_cast(L#rpt, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#rpt, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_oset_in(tmp, old(_dryad_S6, sll_reach(lpt)))), ==(*((tmp->key)), old(_dryad_S6, *((tmp->key))))); 
    assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#tmp, ^s_node));
    // assume ==>(!(@_vcc_oset_in(tmp, old(_dryad_S6, sll_reach(lpt)))), @_vcc_ptr_eq_pure(*((tmp->next)), old(_dryad_S6, *((tmp->next))))); 
    assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_oset_in(t2, old(_dryad_S6, sll_reach(lpt)))), ==(*((t2->key)), old(_dryad_S6, *((t2->key))))); 
    assume !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#t2, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(L#t2, ^s_node));
    // assume ==>(!(@_vcc_oset_in(t2, old(_dryad_S6, sll_reach(lpt)))), @_vcc_ptr_eq_pure(*((t2->next)), old(_dryad_S6, *((t2->next))))); 
    assume !$oset_in($phys_ptr_cast(L#t2, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(L#t2, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(lpt)))), ==(*((l->key)), old(_dryad_S6, *((l->key))))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#l, ^s_node)) == $rd_inv(SL#_dryad_S6, s_node.key, $phys_ptr_cast(P#l, ^s_node));
    // assume ==>(!(@_vcc_oset_in(l, old(_dryad_S6, sll_reach(lpt)))), @_vcc_ptr_eq_pure(*((l->next)), old(_dryad_S6, *((l->next))))); 
    assume !$oset_in($phys_ptr_cast(P#l, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#lpt, ^s_node))) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S6, s_node.next, $phys_ptr_cast(P#l, ^s_node), ^s_node);
    // struct s_node* res_concat_sorted#4; 
    // res_concat_sorted#4 := concat_sorted(t1, t2); 
    call res_concat_sorted#4 := concat_sorted($phys_ptr_cast(L#t1, ^s_node), $phys_ptr_cast(L#t2, ^s_node));
    assume $full_stop_ext(#tok$3^73.9, $s);
    // return res_concat_sorted#4; 
    $result := $phys_ptr_cast(res_concat_sorted#4, ^s_node);
    assume true;
    assert $position_marker();
    goto #exit;

  anon15:
    // skip

  #exit:
}



axiom (forall Q#__vcc_state$2^687.9#tc2#1685: $state, Q#x$2^687.9#dt1#1628: $ptr :: {:weight 10} { F#srtl(Q#__vcc_state$2^687.9#tc2#1685, $phys_ptr_cast(Q#x$2^687.9#dt1#1628, ^s_node)) } { F#sll(Q#__vcc_state$2^687.9#tc2#1685, $phys_ptr_cast(Q#x$2^687.9#dt1#1628, ^s_node)) } $good_state(Q#__vcc_state$2^687.9#tc2#1685) && true ==> F#srtl(Q#__vcc_state$2^687.9#tc2#1685, $phys_ptr_cast(Q#x$2^687.9#dt1#1628, ^s_node)) ==> F#sll(Q#__vcc_state$2^687.9#tc2#1685, $phys_ptr_cast(Q#x$2^687.9#dt1#1628, ^s_node)));

axiom (forall Q#__vcc_state$2^688.9#tc2#1686: $state, Q#x$2^688.9#dt1#1629: $ptr :: {:weight 10} { F#rsrtl(Q#__vcc_state$2^688.9#tc2#1686, $phys_ptr_cast(Q#x$2^688.9#dt1#1629, ^s_node)) } { F#sll(Q#__vcc_state$2^688.9#tc2#1686, $phys_ptr_cast(Q#x$2^688.9#dt1#1629, ^s_node)) } $good_state(Q#__vcc_state$2^688.9#tc2#1686) && true ==> F#rsrtl(Q#__vcc_state$2^688.9#tc2#1686, $phys_ptr_cast(Q#x$2^688.9#dt1#1629, ^s_node)) ==> F#sll(Q#__vcc_state$2^688.9#tc2#1686, $phys_ptr_cast(Q#x$2^688.9#dt1#1629, ^s_node)));

axiom (forall Q#__vcc_state$2^689.9#tc2#1687: $state, Q#x$2^689.9#dt1#1630: $ptr :: {:weight 10} { F#sll_reach(Q#__vcc_state$2^689.9#tc2#1687, $phys_ptr_cast(Q#x$2^689.9#dt1#1630, ^s_node)) } { F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1687, $phys_ptr_cast(Q#x$2^689.9#dt1#1630, ^s_node)) } $good_state(Q#__vcc_state$2^689.9#tc2#1687) && true ==> F#sll_reach(Q#__vcc_state$2^689.9#tc2#1687, $phys_ptr_cast(Q#x$2^689.9#dt1#1630, ^s_node)) == F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1687, $phys_ptr_cast(Q#x$2^689.9#dt1#1630, ^s_node)));

axiom (forall Q#__vcc_state$2^690.9#tc2#1688: $state, Q#x$2^690.9#dt1#1631: $ptr :: {:weight 10} { F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1688, $phys_ptr_cast(Q#x$2^690.9#dt1#1631, ^s_node)) } { F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1688, $phys_ptr_cast(Q#x$2^690.9#dt1#1631, ^s_node)) } $good_state(Q#__vcc_state$2^690.9#tc2#1688) && true ==> F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1688, $phys_ptr_cast(Q#x$2^690.9#dt1#1631, ^s_node)) == F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1688, $phys_ptr_cast(Q#x$2^690.9#dt1#1631, ^s_node)));

axiom (forall Q#__vcc_state$2^691.9#tc2#1689: $state, Q#x$2^691.9#dt1#1632: $ptr, Q#y$2^691.9#dt1#1633: $ptr :: {:weight 10} { F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1689, $phys_ptr_cast(Q#x$2^691.9#dt1#1632, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1633, ^s_node)) } { F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1689, $phys_ptr_cast(Q#x$2^691.9#dt1#1632, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1633, ^s_node)) } $good_state(Q#__vcc_state$2^691.9#tc2#1689) && true ==> F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1689, $phys_ptr_cast(Q#x$2^691.9#dt1#1632, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1633, ^s_node)) == F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1689, $phys_ptr_cast(Q#x$2^691.9#dt1#1632, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1633, ^s_node)));

const unique l#public: $label;

axiom $type_code_is(2, ^$#state_t);

const unique #tok$3^73.9: $token;

const unique #tok$3^72.14: $token;

const unique #tok$3^67.14: $token;

const unique #tok$3^65.2: $token;

const unique #tok$3^58.4: $token;

const unique #tok$3^55.4: $token;

const unique #tok$3^35.2: $token;

const unique #tok$3^28.2: $token;

const unique #tok$3^18.34: $token;

const unique #tok$3^17.29: $token;

const unique #tok$4^0.0: $token;

const unique #file^?3Cno?20file?3E: $token;

axiom $file_name_is(4, #file^?3Cno?20file?3E);

const unique #tok$3^10.3: $token;

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Csorted?2Dsll?5Cquick_sort.c: $token;

axiom $file_name_is(3, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Csorted?2Dsll?5Cquick_sort.c);

const unique #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Csorted?2Dsll?5Cdryad_srtl.h: $token;

axiom $file_name_is(2, #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Csorted?2Dsll?5Cdryad_srtl.h);

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h: $token;

axiom $file_name_is(1, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h);

const unique #distTp1: $ctype;

axiom #distTp1 == $ptr_to(^s_node);
