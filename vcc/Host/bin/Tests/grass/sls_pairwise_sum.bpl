axiom $arch_ptr_size == 8;

axiom $arch_spec_ptr_start == $max.u8;

const unique ^$##thread_id: $ctype;

axiom $def_math_type(^$##thread_id);

type $##thread_id;

const unique ^$##club: $ctype;

axiom $def_math_type(^$##club);

type $##club;

const unique ^s_node: $ctype;

axiom $is_span_sequential(^s_node);

axiom $def_struct_type(^s_node, 16, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^s_node) } $inv2(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^s_node) } $inv2_without_lemmas(#s1, #s2, #p, ^s_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^s_node)) } $in(q, $composite_extent(s, p, ^s_node)) == (q == p));

const unique s_node.key: $field;

axiom $def_phys_field(^s_node, s_node.key, ^^i4, false, 0);

const unique s_node.next: $field;

axiom $def_phys_field(^s_node, s_node.next, $ptr_to(^s_node), false, 8);

function F#glob_reach() : $oset;

const unique cf#glob_reach: $pure_function;

axiom $function_arg_type(cf#glob_reach, 0, ^$#oset);

procedure glob_reach() returns ($result: $oset);
  free ensures $result == F#glob_reach();
  free ensures $call_transition(old($s), $s);



const unique ^$#_purecall_handler#1: $ctype;

axiom $def_fnptr_type(^$#_purecall_handler#1);

type $#_purecall_handler#1;

const unique ^$#_invalid_parameter_handler#2: $ctype;

axiom $def_fnptr_type(^$#_invalid_parameter_handler#2);

type $#_invalid_parameter_handler#2;

const unique ^$#sls_pairwise_sum.c..36263#3: $ctype;

axiom $def_fnptr_type(^$#sls_pairwise_sum.c..36263#3);

type $#sls_pairwise_sum.c..36263#3;

const unique ^$#_PtFuncCompare#4: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#4);

type $#_PtFuncCompare#4;

const unique ^$#_PtFuncCompare#5: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#5);

type $#_PtFuncCompare#5;

const unique ^$#_PtFuncCompare#6: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#6);

type $#_PtFuncCompare#6;

const unique ^$#_PtFuncCompare#7: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#7);

type $#_PtFuncCompare#7;

const unique ^$#_onexit_t#8: $ctype;

axiom $def_fnptr_type(^$#_onexit_t#8);

type $#_onexit_t#8;

function F##int_max(SP#x: int, SP#y: int) : int;

const unique cf##int_max: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_max(SP#x, SP#y) } $in_range_i4(F##int_max(SP#x, SP#y)));

axiom $function_arg_type(cf##int_max, 0, ^^i4);

axiom $function_arg_type(cf##int_max, 1, ^^i4);

axiom $function_arg_type(cf##int_max, 2, ^^i4);

procedure #int_max(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_max(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F##int_min(SP#x: int, SP#y: int) : int;

const unique cf##int_min: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_min(SP#x, SP#y) } $in_range_i4(F##int_min(SP#x, SP#y)));

axiom $function_arg_type(cf##int_min, 0, ^^i4);

axiom $function_arg_type(cf##int_min, 1, ^^i4);

axiom $function_arg_type(cf##int_min, 2, ^^i4);

procedure #int_min(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_min(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F#sll(#s: $state, SP#hd: $ptr) : bool;

const unique cf#sll: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll(#s, SP#hd) } 1 < $decreases_level ==> $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll(#s, SP#hd));

axiom $function_arg_type(cf#sll, 0, ^^bool);

axiom $function_arg_type(cf#sll, 1, $ptr_to(^s_node));

procedure sll(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  free ensures $result == F#sll($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#srtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#srtl(#s, SP#hd)));

axiom $function_arg_type(cf#srtl, 0, ^^bool);

axiom $function_arg_type(cf#srtl, 1, $ptr_to(^s_node));

procedure srtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#srtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl(#s: $state, SP#hd: $ptr) : bool;

const unique cf#rsrtl: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl(#s, SP#hd) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#rsrtl(#s, SP#hd)));

axiom $function_arg_type(cf#rsrtl, 0, ^^bool);

axiom $function_arg_type(cf#rsrtl, 1, $ptr_to(^s_node));

procedure rsrtl(SP#hd: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result;
  free ensures $result == F#rsrtl($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#sll_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#sll_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_reach, 1, $ptr_to(^s_node));

procedure sll_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#sll_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#srtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#srtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#srtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#srtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#srtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_reach, 1, $ptr_to(^s_node));

procedure srtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#srtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#rsrtl_reach(#s: $state, SP#hd: $ptr) : $oset;

const unique cf#rsrtl_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#rsrtl_reach(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#rsrtl_reach(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#rsrtl_reach(#s, SP#hd) == $oset_empty()));

axiom $function_arg_type(cf#rsrtl_reach, 0, ^$#oset);

axiom $function_arg_type(cf#rsrtl_reach, 1, $ptr_to(^s_node));

procedure rsrtl_reach(SP#hd: $ptr) returns ($result: $oset);
  ensures ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result)) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $oset_empty());
  free ensures $result == F#rsrtl_reach($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_keys(#s: $state, SP#hd: $ptr) : $intset;

const unique cf#sll_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_keys(#s, SP#hd) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_keys(#s, SP#hd))) && ($is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> F#sll_keys(#s, SP#hd) == $intset_empty()));

axiom $function_arg_type(cf#sll_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_keys, 1, $ptr_to(^s_node));

procedure sll_keys(SP#hd: $ptr) returns ($result: $intset);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  ensures $is_null($phys_ptr_cast(SP#hd, ^s_node)) ==> $result == $intset_empty();
  free ensures $result == F#sll_keys($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_min_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_min_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_min_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_min_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_min_key, 1, $ptr_to(^s_node));

procedure sll_min_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_min_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_max_key(#s: $state, SP#hd: $ptr) : int;

const unique cf#sll_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr :: { F#sll_max_key(#s, SP#hd) } 1 < $decreases_level ==> $in_range_i4(F#sll_max_key(#s, SP#hd)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> F#sll_max_key(#s, SP#hd) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_max_key, 1, $ptr_to(^s_node));

procedure sll_max_key(SP#hd: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node)) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_max_key($s, SP#hd);
  free ensures $call_transition(old($s), $s);



function F#sll_list_len_next(#s: $state, SP#x: $ptr) : int;

const unique cf#sll_list_len_next: $pure_function;

axiom (forall #s: $state, SP#x: $ptr :: { F#sll_list_len_next(#s, SP#x) } 1 < $decreases_level ==> $in_range_nat(F#sll_list_len_next(#s, SP#x)) && ($non_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) > 0) && ($is_null($phys_ptr_cast(SP#x, ^s_node)) ==> F#sll_list_len_next(#s, SP#x) == 0));

axiom $function_arg_type(cf#sll_list_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_list_len_next, 1, $ptr_to(^s_node));

procedure sll_list_len_next(SP#x: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $non_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result > 0;
  ensures $is_null($phys_ptr_cast(SP#x, ^s_node)) ==> $result == 0;
  free ensures $result == F#sll_list_len_next($s, SP#x);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#sll_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg(#s, SP#hd, SP#tl) == F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg(#s, SP#hd, SP#tl)) && (F#sll_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && F#sll(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node)))) && (F#sll_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1)));

axiom $function_arg_type(cf#sll_lseg, 0, ^^bool);

axiom $function_arg_type(cf#sll_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg, 2, $ptr_to(^s_node));

procedure sll_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#sll($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#hd, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) ==> F#sll_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1);
  free ensures $result == F#sll_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : bool;

const unique cf#srtl_lseg: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, SP#hd, SP#tl) == F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, SP#hd, SP#tl)) && (F#srtl_lseg(#s, SP#hd, SP#tl) ==> $oset_disjoint(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && F#srtl(#s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key(#s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl(#s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next(#s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key(#s, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && (F#srtl_lseg(#s, SP#hd, SP#tl) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))));

axiom $function_arg_type(cf#srtl_lseg, 0, ^^bool);

axiom $function_arg_type(cf#srtl_lseg, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg, 2, $ptr_to(^s_node));

procedure srtl_lseg(SP#hd: $ptr, SP#tl: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result;
  ensures $result ==> $oset_disjoint(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)));
  ensures $result && F#srtl($s, $phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= F#sll_min_key($s, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SP#hd, ^s_node)) && F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_keys($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), F#sll_list_len_next($s, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node)) == F#sll_max_key($s, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && !$oset_in($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node), F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) <= $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $oset_singleton($phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)), 1) && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  ensures $result && $non_null($phys_ptr_cast(SP#tl, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) && F#srtl_lseg_reach($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $oset_singleton($phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_keys($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node))) && F#sll_lseg_len_next($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == 1 && F#sll_lseg_min_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node)) && F#sll_lseg_max_key($s, $phys_ptr_cast(SP#hd, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#tl, ^s_node), ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#tl, ^s_node));
  free ensures $result == F#srtl_lseg($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#sll_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == F#sll_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#sll_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#sll_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_reach, 2, $ptr_to(^s_node));

procedure sll_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#sll_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#srtl_lseg_reach(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $oset;

const unique cf#srtl_lseg_reach: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#srtl_lseg_reach(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == F#srtl_reach(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#srtl_lseg_reach(#s, SP#hd, SP#tl) == $oset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), F#srtl_lseg_reach(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#srtl_lseg_reach, 0, ^$#oset);

axiom $function_arg_type(cf#srtl_lseg_reach, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#srtl_lseg_reach, 2, $ptr_to(^s_node));

procedure srtl_lseg_reach(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $oset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#srtl_reach($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $oset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $oset_in($phys_ptr_cast(SP#hd, ^s_node), $result);
  free ensures $result == F#srtl_lseg_reach($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_keys(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : $intset;

const unique cf#sll_lseg_keys: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_keys(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == F#sll_keys(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_keys(#s, SP#hd, SP#tl) == $intset_empty()) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), F#sll_lseg_keys(#s, SP#hd, SP#tl))));

axiom $function_arg_type(cf#sll_lseg_keys, 0, ^$#intset);

axiom $function_arg_type(cf#sll_lseg_keys, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_keys, 2, $ptr_to(^s_node));

procedure sll_lseg_keys(SP#hd: $ptr, SP#tl: $ptr) returns ($result: $intset);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_keys($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $intset_empty();
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $intset_in($rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node)), $result);
  free ensures $result == F#sll_lseg_keys($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_min_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_min_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_min_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_min_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == F#sll_min_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_min_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_min_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_min_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_min_key, 2, $ptr_to(^s_node));

procedure sll_lseg_min_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_min_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_min_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_max_key(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_max_key: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_max_key(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_i4(F#sll_lseg_max_key(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == F#sll_max_key(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr(#s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_max_key(#s, SP#hd, SP#tl) == $rd_inv(#s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node))));

axiom $function_arg_type(cf#sll_lseg_max_key, 0, ^^i4);

axiom $function_arg_type(cf#sll_lseg_max_key, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_max_key, 2, $ptr_to(^s_node));

procedure sll_lseg_max_key(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_max_key($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SP#hd, ^s_node), ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == $rd_inv($s, s_node.key, $phys_ptr_cast(SP#hd, ^s_node));
  free ensures $result == F#sll_lseg_max_key($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



function F#sll_lseg_len_next(#s: $state, SP#hd: $ptr, SP#tl: $ptr) : int;

const unique cf#sll_lseg_len_next: $pure_function;

axiom (forall #s: $state, SP#hd: $ptr, SP#tl: $ptr :: { F#sll_lseg_len_next(#s, SP#hd, SP#tl) } 1 < $decreases_level ==> $in_range_nat(F#sll_lseg_len_next(#s, SP#hd, SP#tl)) && ($is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == F#sll_list_len_next(#s, $phys_ptr_cast(SP#hd, ^s_node))) && ($phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) == 0) && ($non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> F#sll_lseg_len_next(#s, SP#hd, SP#tl) > 0));

axiom $function_arg_type(cf#sll_lseg_len_next, 0, ^^nat);

axiom $function_arg_type(cf#sll_lseg_len_next, 1, $ptr_to(^s_node));

axiom $function_arg_type(cf#sll_lseg_len_next, 2, $ptr_to(^s_node));

procedure sll_lseg_len_next(SP#hd: $ptr, SP#tl: $ptr) returns ($result: int);
  free ensures $in_range_nat($result);
  ensures $is_null($phys_ptr_cast(SP#tl, ^s_node)) ==> $result == F#sll_list_len_next($s, $phys_ptr_cast(SP#hd, ^s_node));
  ensures $phys_ptr_cast(SP#hd, ^s_node) == $phys_ptr_cast(SP#tl, ^s_node) ==> $result == 0;
  ensures $non_null($phys_ptr_cast(SP#hd, ^s_node)) && $phys_ptr_cast(SP#hd, ^s_node) != $phys_ptr_cast(SP#tl, ^s_node) ==> $result > 0;
  free ensures $result == F#sll_lseg_len_next($s, SP#hd, SP#tl);
  free ensures $call_transition(old($s), $s);



procedure sls_pairwise_sum(P#x: $ptr, P#y: $ptr) returns ($result: $ptr);
  requires F#srtl($s, $phys_ptr_cast(P#x, ^s_node));
  requires F#srtl($s, $phys_ptr_cast(P#y, ^s_node));
  requires $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)));
  modifies $s, $cev_pc;
  ensures F#srtl($s, $phys_ptr_cast(P#x, ^s_node));
  ensures F#srtl($s, $phys_ptr_cast(P#y, ^s_node));
  ensures $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)));
  ensures F#srtl($s, $phys_ptr_cast($result, ^s_node));
  ensures $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast($result, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



implementation sls_pairwise_sum(P#x: $ptr, P#y: $ptr) returns ($result: $ptr)
{
  var stmtexpr10#18: $state;
  var SL#_dryad_S13: $state;
  var stmtexpr9#17: $state;
  var SL#_dryad_S12: $state;
  var stmtexpr8#16: $state;
  var SL#_dryad_S11: $state;
  var stmtexpr7#15: $state;
  var SL#_dryad_S10: $state;
  var stmtexpr6#14: $state;
  var SL#_dryad_S9: $state;
  var stmtexpr5#13: $state;
  var SL#_dryad_S8: $state;
  var stmtexpr4#12: $state;
  var SL#_dryad_S7: $state;
  var stmtexpr3#11: $oset;
  var stmtexpr2#10: $state;
  var SL#_dryad_S6: $state;
  var stmtexpr1#9: $ptr;
  var SL#curr_y3: $ptr;
  var stmtexpr0#8: $ptr;
  var SL#curr_x2: $ptr;
  var L#tmp: $ptr;
  var ite#2: bool;
  var loopState#0: $state;
  var stmtexpr8#27: $state;
  var SL#_dryad_S5: $state;
  var stmtexpr7#26: $state;
  var SL#_dryad_S4: $state;
  var stmtexpr6#25: $state;
  var SL#_dryad_S3: $state;
  var stmtexpr5#24: $state;
  var SL#_dryad_S2: $state;
  var stmtexpr4#23: $state;
  var SL#_dryad_S1: $state;
  var stmtexpr3#22: $oset;
  var stmtexpr2#21: $state;
  var SL#_dryad_S0: $state;
  var ite#1: bool;
  var res_srtl_reach#7: $oset;
  var res_srtl_reach#6: $oset;
  var SL#ALL_REACH: $oset;
  var L#curr_x: $ptr;
  var L#curr_y: $ptr;
  var L#z: $ptr;
  var L#last_z: $ptr;
  var L#z_key: int where $in_range_i4(L#z_key);
  var stmtexpr1#20: $oset;
  var stmtexpr0#19: $oset;
  var res_srtl_reach#5: $oset;
  var res_srtl_reach#4: $oset;
  var SL#_dryad_G1: $oset;
  var SL#_dryad_G0: $oset;
  var #wrTime$3^3.3: int;
  var #stackframe: int;

// INV:PTR: P#x, P#y, L#curr_x, L#curr_y, L#z, L#last_z
// INV:INT: L#z_key

  anon9:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$3^3.3, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$3^3.3 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$3^3.3, (lambda #p: $ptr :: false));
    // assume true
    // assume true
    // assume @decreases_level_is(2147483647); 
    assume 2147483647 == $decreases_level;
    // assume true
    //  --- Dryad annotated function --- 
    // _math \oset _dryad_G0; 
    // _math \oset _dryad_G1; 
    // _math \oset res_srtl_reach#4; 
    // res_srtl_reach#4 := srtl_reach(x); 
    call res_srtl_reach#4 := srtl_reach($phys_ptr_cast(P#x, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset res_srtl_reach#5; 
    // res_srtl_reach#5 := srtl_reach(y); 
    call res_srtl_reach#5 := srtl_reach($phys_ptr_cast(P#y, ^s_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _dryad_G0 := @_vcc_oset_union(res_srtl_reach#4, res_srtl_reach#5); 
    SL#_dryad_G0 := $oset_union(res_srtl_reach#4, res_srtl_reach#5);
    // _math \oset stmtexpr0#19; 
    // stmtexpr0#19 := _dryad_G0; 
    stmtexpr0#19 := SL#_dryad_G0;
    // _dryad_G1 := _dryad_G0; 
    SL#_dryad_G1 := SL#_dryad_G0;
    // _math \oset stmtexpr1#20; 
    // stmtexpr1#20 := _dryad_G1; 
    stmtexpr1#20 := SL#_dryad_G1;
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // int32_t z_key; 
    // struct s_node* last_z; 
    // struct s_node* z; 
    // struct s_node* curr_y; 
    // struct s_node* curr_x; 
    // _math \oset ALL_REACH; 
    // assume ==>(@_vcc_ptr_neq_null(x), &&(@_vcc_mutable(@state, x), @writes_check(x))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> $mutable($s, $phys_ptr_cast(P#x, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(y), &&(@_vcc_mutable(@state, y), @writes_check(y))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> $mutable($s, $phys_ptr_cast(P#y, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(P#y, ^s_node));
    // _math \oset res_srtl_reach#6; 
    // res_srtl_reach#6 := srtl_reach(x); 
    call res_srtl_reach#6 := srtl_reach($phys_ptr_cast(P#x, ^s_node));
    assume $full_stop_ext(#tok$3^17.41, $s);
    // _math \oset res_srtl_reach#7; 
    // res_srtl_reach#7 := srtl_reach(y); 
    call res_srtl_reach#7 := srtl_reach($phys_ptr_cast(P#y, ^s_node));
    assume $full_stop_ext(#tok$3^17.56, $s);
    // ALL_REACH := @_vcc_oset_union(res_srtl_reach#6, res_srtl_reach#7); 
    SL#ALL_REACH := $oset_union(res_srtl_reach#6, res_srtl_reach#7);
    // _Bool ite#1; 
    // ite#1 := ||(@_vcc_ptr_eq_null(x), @_vcc_ptr_eq_null(y)); 
    ite#1 := $is_null($phys_ptr_cast(P#x, ^s_node)) || $is_null($phys_ptr_cast(P#y, ^s_node));
    assume true;
    // if (ite#1) ...
    if (ite#1)
    {
      anon1:
        // return (struct s_node*)@null; 
        $result := $phys_ptr_cast($null, ^s_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon2:
        // assert @_vcc_possibly_unreachable; 
        assert {:PossiblyUnreachable true} true;
    }

  anon10:
    // curr_x := x; 
    L#curr_x := $phys_ptr_cast(P#x, ^s_node);
    // assert sll_lseg(curr_x, curr_x); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume sll_lseg(curr_x, curr_x); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert srtl_lseg(curr_x, curr_x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume srtl_lseg(curr_x, curr_x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert sll_lseg(curr_y, curr_y); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume sll_lseg(curr_y, curr_y); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert srtl_lseg(curr_y, curr_y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume srtl_lseg(curr_y, curr_y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert sll_lseg(z, z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume sll_lseg(z, z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert srtl_lseg(z, z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume srtl_lseg(z, z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert sll_lseg(last_z, last_z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume sll_lseg(last_z, last_z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert srtl_lseg(last_z, last_z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume srtl_lseg(last_z, last_z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert sll_lseg(y, y); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume sll_lseg(y, y); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert srtl_lseg(y, y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume srtl_lseg(y, y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert sll_lseg(x, x); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume sll_lseg(x, x); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assert srtl_lseg(x, x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume srtl_lseg(x, x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // curr_y := y; 
    L#curr_y := $phys_ptr_cast(P#y, ^s_node);
    // assert sll_lseg(curr_x, curr_x); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume sll_lseg(curr_x, curr_x); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert srtl_lseg(curr_x, curr_x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume srtl_lseg(curr_x, curr_x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert sll_lseg(curr_y, curr_y); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume sll_lseg(curr_y, curr_y); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert srtl_lseg(curr_y, curr_y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume srtl_lseg(curr_y, curr_y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert sll_lseg(z, z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume sll_lseg(z, z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert srtl_lseg(z, z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume srtl_lseg(z, z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert sll_lseg(last_z, last_z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume sll_lseg(last_z, last_z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert srtl_lseg(last_z, last_z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume srtl_lseg(last_z, last_z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert sll_lseg(y, y); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume sll_lseg(y, y); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert srtl_lseg(y, y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume srtl_lseg(y, y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert sll_lseg(x, x); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume sll_lseg(x, x); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assert srtl_lseg(x, x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume srtl_lseg(x, x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // _math \state _dryad_S0; 
    // _dryad_S0 := @_vcc_current_state(@state); 
    SL#_dryad_S0 := $current_state($s);
    // _math \state stmtexpr2#21; 
    // stmtexpr2#21 := _dryad_S0; 
    stmtexpr2#21 := SL#_dryad_S0;
    // z := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
    call L#z := $alloc(^s_node);
    assume $full_stop_ext(#tok$3^23.14, $s);
    // assume !(@_vcc_oset_in(z, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
    // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(z)); 
    SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // _math \oset stmtexpr3#22; 
    // stmtexpr3#22 := _dryad_G1; 
    stmtexpr3#22 := SL#_dryad_G1;
    // assume ==(glob_reach(), _dryad_G1); 
    assume F#glob_reach() == SL#_dryad_G1;
    // _math \state _dryad_S1; 
    // _dryad_S1 := @_vcc_current_state(@state); 
    SL#_dryad_S1 := $current_state($s);
    // _math \state stmtexpr4#23; 
    // stmtexpr4#23 := _dryad_S1; 
    stmtexpr4#23 := SL#_dryad_S1;
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll_keys(curr_x)), old(_dryad_S1, sll_keys(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll_list_len_next(curr_x)), old(_dryad_S1, sll_list_len_next(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(curr_x)))), ==(old(_dryad_S0, rsrtl(curr_x)), old(_dryad_S1, rsrtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(curr_x)))), ==(old(_dryad_S0, rsrtl_reach(curr_x)), old(_dryad_S1, rsrtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll(curr_x)), old(_dryad_S1, sll(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll_reach(curr_x)), old(_dryad_S1, sll_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll_max_key(curr_x)), old(_dryad_S1, sll_max_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_x)))), ==(old(_dryad_S0, sll_min_key(curr_x)), old(_dryad_S1, sll_min_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(curr_x)))), ==(old(_dryad_S0, srtl(curr_x)), old(_dryad_S1, srtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(curr_x)))), ==(old(_dryad_S0, srtl_reach(curr_x)), old(_dryad_S1, srtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll_keys(curr_y)), old(_dryad_S1, sll_keys(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll_list_len_next(curr_y)), old(_dryad_S1, sll_list_len_next(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(curr_y)))), ==(old(_dryad_S0, rsrtl(curr_y)), old(_dryad_S1, rsrtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(curr_y)))), ==(old(_dryad_S0, rsrtl_reach(curr_y)), old(_dryad_S1, rsrtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll(curr_y)), old(_dryad_S1, sll(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll_reach(curr_y)), old(_dryad_S1, sll_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll_max_key(curr_y)), old(_dryad_S1, sll_max_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(curr_y)))), ==(old(_dryad_S0, sll_min_key(curr_y)), old(_dryad_S1, sll_min_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(curr_y)))), ==(old(_dryad_S0, srtl(curr_y)), old(_dryad_S1, srtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(curr_y)))), ==(old(_dryad_S0, srtl_reach(curr_y)), old(_dryad_S1, srtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll_keys(last_z)), old(_dryad_S1, sll_keys(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll_list_len_next(last_z)), old(_dryad_S1, sll_list_len_next(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(last_z)))), ==(old(_dryad_S0, rsrtl(last_z)), old(_dryad_S1, rsrtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(last_z)))), ==(old(_dryad_S0, rsrtl_reach(last_z)), old(_dryad_S1, rsrtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll(last_z)), old(_dryad_S1, sll(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll_reach(last_z)), old(_dryad_S1, sll_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll_max_key(last_z)), old(_dryad_S1, sll_max_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(last_z)))), ==(old(_dryad_S0, sll_min_key(last_z)), old(_dryad_S1, sll_min_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(last_z)))), ==(old(_dryad_S0, srtl(last_z)), old(_dryad_S1, srtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(last_z)))), ==(old(_dryad_S0, srtl_reach(last_z)), old(_dryad_S1, srtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll_keys(y)), old(_dryad_S1, sll_keys(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll_list_len_next(y)), old(_dryad_S1, sll_list_len_next(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(y)))), ==(old(_dryad_S0, rsrtl(y)), old(_dryad_S1, rsrtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(y)))), ==(old(_dryad_S0, rsrtl_reach(y)), old(_dryad_S1, rsrtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll(y)), old(_dryad_S1, sll(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll_reach(y)), old(_dryad_S1, sll_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll_max_key(y)), old(_dryad_S1, sll_max_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(y)))), ==(old(_dryad_S0, sll_min_key(y)), old(_dryad_S1, sll_min_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(y)))), ==(old(_dryad_S0, srtl(y)), old(_dryad_S1, srtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(y)))), ==(old(_dryad_S0, srtl_reach(y)), old(_dryad_S1, srtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll_keys(x)), old(_dryad_S1, sll_keys(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll_list_len_next(x)), old(_dryad_S1, sll_list_len_next(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(x)))), ==(old(_dryad_S0, rsrtl(x)), old(_dryad_S1, rsrtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, rsrtl_reach(x)))), ==(old(_dryad_S0, rsrtl_reach(x)), old(_dryad_S1, rsrtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll(x)), old(_dryad_S1, sll(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll_reach(x)), old(_dryad_S1, sll_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll_max_key(x)), old(_dryad_S1, sll_max_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, sll_reach(x)))), ==(old(_dryad_S0, sll_min_key(x)), old(_dryad_S1, sll_min_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(x)))), ==(old(_dryad_S0, srtl(x)), old(_dryad_S1, srtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S0, srtl_reach(x)))), ==(old(_dryad_S0, srtl_reach(x)), old(_dryad_S1, srtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S0, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S1, $phys_ptr_cast(P#x, ^s_node));
    // assume @_vcc_ptr_neq_null(z); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node));
    // assume unchecked!(@_vcc_oset_in(z, ALL_REACH)); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), SL#ALL_REACH);
    // ALL_REACH := @_vcc_oset_union(ALL_REACH, @_vcc_oset_singleton(z)); 
    SL#ALL_REACH := $oset_union(SL#ALL_REACH, $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // last_z := z; 
    L#last_z := $phys_ptr_cast(L#z, ^s_node);
    // assert sll_lseg(curr_x, curr_x); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume sll_lseg(curr_x, curr_x); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert srtl_lseg(curr_x, curr_x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assume srtl_lseg(curr_x, curr_x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
    // assert sll_lseg(curr_y, curr_y); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume sll_lseg(curr_y, curr_y); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert srtl_lseg(curr_y, curr_y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assume srtl_lseg(curr_y, curr_y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
    // assert sll_lseg(z, z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume sll_lseg(z, z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert srtl_lseg(z, z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assume srtl_lseg(z, z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
    // assert sll_lseg(last_z, last_z); 
    assert F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume sll_lseg(last_z, last_z); 
    assume F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert srtl_lseg(last_z, last_z); 
    assert F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assume srtl_lseg(last_z, last_z); 
    assume F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
    // assert sll_lseg(y, y); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume sll_lseg(y, y); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert srtl_lseg(y, y); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assume srtl_lseg(y, y); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
    // assert sll_lseg(x, x); 
    assert F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume sll_lseg(x, x); 
    assume F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assert srtl_lseg(x, x); 
    assert F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assume srtl_lseg(x, x); 
    assume F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
    // assert @reads_check_normal((curr_x->key)); 
    assert $thread_local($s, $phys_ptr_cast(L#curr_x, ^s_node));
    // assert @reads_check_normal((curr_y->key)); 
    assert $thread_local($s, $phys_ptr_cast(L#curr_y, ^s_node));
    // z_key := unchecked+(*((curr_x->key)), *((curr_y->key))); 
    L#z_key := $unchk_add(^^i4, $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)));
    // _math \state _dryad_S2; 
    // _dryad_S2 := @_vcc_current_state(@state); 
    SL#_dryad_S2 := $current_state($s);
    // _math \state stmtexpr5#24; 
    // stmtexpr5#24 := _dryad_S2; 
    stmtexpr5#24 := SL#_dryad_S2;
    // assert @prim_writes_check((z->key)); 
    assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#z, ^s_node), s_node.key));
    // *(z->key) := z_key; 
    call $write_int(s_node.key, $phys_ptr_cast(L#z, ^s_node), L#z_key);
    assume $full_stop_ext(#tok$3^29.3, $s);
    // _math \state _dryad_S3; 
    // _dryad_S3 := @_vcc_current_state(@state); 
    SL#_dryad_S3 := $current_state($s);
    // _math \state stmtexpr6#25; 
    // stmtexpr6#25 := _dryad_S3; 
    stmtexpr6#25 := SL#_dryad_S3;
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll_keys(*((z->next)))), old(_dryad_S3, sll_keys(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll_keys(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll_list_len_next(*((z->next)))), old(_dryad_S3, sll_list_len_next(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(*((z->next)))))), ==(old(_dryad_S2, rsrtl(*((z->next)))), old(_dryad_S3, rsrtl(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#rsrtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(*((z->next)))))), ==(old(_dryad_S2, rsrtl_reach(*((z->next)))), old(_dryad_S3, rsrtl_reach(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll(*((z->next)))), old(_dryad_S3, sll(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll_reach(*((z->next)))), old(_dryad_S3, sll_reach(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll_max_key(*((z->next)))), old(_dryad_S3, sll_max_key(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll_max_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(*((z->next)))))), ==(old(_dryad_S2, sll_min_key(*((z->next)))), old(_dryad_S3, sll_min_key(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#sll_min_key(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(*((z->next)))))), ==(old(_dryad_S2, srtl(*((z->next)))), old(_dryad_S3, srtl(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#srtl(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#srtl(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(*((z->next)))))), ==(old(_dryad_S2, srtl_reach(*((z->next)))), old(_dryad_S3, srtl_reach(*((z->next)))))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) == F#srtl_reach(SL#_dryad_S3, $rd_phys_ptr(SL#_dryad_S3, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(curr_x)), old(_dryad_S3, sll_list_len_next(curr_x))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(curr_x)), old(_dryad_S3, rsrtl_reach(curr_x))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==(old(_dryad_S2, sll(curr_x)), old(_dryad_S3, sll(curr_x))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(curr_x)), old(_dryad_S3, sll_reach(curr_x))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(curr_x)), old(_dryad_S3, srtl_reach(curr_x))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(curr_y)), old(_dryad_S3, sll_list_len_next(curr_y))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(curr_y)), old(_dryad_S3, rsrtl_reach(curr_y))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==(old(_dryad_S2, sll(curr_y)), old(_dryad_S3, sll(curr_y))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(curr_y)), old(_dryad_S3, sll_reach(curr_y))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(curr_y)), old(_dryad_S3, srtl_reach(curr_y))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(z)), old(_dryad_S3, sll_list_len_next(z))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#z, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(z)), old(_dryad_S3, rsrtl_reach(z))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#z, ^s_node));
    // assume ==(old(_dryad_S2, sll(z)), old(_dryad_S3, sll(z))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#z, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(z)), old(_dryad_S3, sll_reach(z))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#z, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(z)), old(_dryad_S3, srtl_reach(z))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#z, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(last_z)), old(_dryad_S3, sll_list_len_next(last_z))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(last_z)), old(_dryad_S3, rsrtl_reach(last_z))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==(old(_dryad_S2, sll(last_z)), old(_dryad_S3, sll(last_z))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(last_z)), old(_dryad_S3, sll_reach(last_z))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(last_z)), old(_dryad_S3, srtl_reach(last_z))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(y)), old(_dryad_S3, sll_list_len_next(y))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(y)), old(_dryad_S3, rsrtl_reach(y))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==(old(_dryad_S2, sll(y)), old(_dryad_S3, sll(y))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(y)), old(_dryad_S3, sll_reach(y))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(y)), old(_dryad_S3, srtl_reach(y))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==(old(_dryad_S2, sll_list_len_next(x)), old(_dryad_S3, sll_list_len_next(x))); 
    assume F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==(old(_dryad_S2, rsrtl_reach(x)), old(_dryad_S3, rsrtl_reach(x))); 
    assume F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==(old(_dryad_S2, sll(x)), old(_dryad_S3, sll(x))); 
    assume F#sll(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==(old(_dryad_S2, sll_reach(x)), old(_dryad_S3, sll_reach(x))); 
    assume F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==(old(_dryad_S2, srtl_reach(x)), old(_dryad_S3, srtl_reach(x))); 
    assume F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll_keys(curr_x)), old(_dryad_S3, sll_keys(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll_list_len_next(curr_x)), old(_dryad_S3, sll_list_len_next(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(curr_x)))), ==(old(_dryad_S2, rsrtl(curr_x)), old(_dryad_S3, rsrtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(curr_x)))), ==(old(_dryad_S2, rsrtl_reach(curr_x)), old(_dryad_S3, rsrtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll(curr_x)), old(_dryad_S3, sll(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll_reach(curr_x)), old(_dryad_S3, sll_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll_max_key(curr_x)), old(_dryad_S3, sll_max_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_x)))), ==(old(_dryad_S2, sll_min_key(curr_x)), old(_dryad_S3, sll_min_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(curr_x)))), ==(old(_dryad_S2, srtl(curr_x)), old(_dryad_S3, srtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(curr_x)))), ==(old(_dryad_S2, srtl_reach(curr_x)), old(_dryad_S3, srtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll_keys(curr_y)), old(_dryad_S3, sll_keys(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll_list_len_next(curr_y)), old(_dryad_S3, sll_list_len_next(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(curr_y)))), ==(old(_dryad_S2, rsrtl(curr_y)), old(_dryad_S3, rsrtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(curr_y)))), ==(old(_dryad_S2, rsrtl_reach(curr_y)), old(_dryad_S3, rsrtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll(curr_y)), old(_dryad_S3, sll(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll_reach(curr_y)), old(_dryad_S3, sll_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll_max_key(curr_y)), old(_dryad_S3, sll_max_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(curr_y)))), ==(old(_dryad_S2, sll_min_key(curr_y)), old(_dryad_S3, sll_min_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(curr_y)))), ==(old(_dryad_S2, srtl(curr_y)), old(_dryad_S3, srtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(curr_y)))), ==(old(_dryad_S2, srtl_reach(curr_y)), old(_dryad_S3, srtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll_keys(last_z)), old(_dryad_S3, sll_keys(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll_list_len_next(last_z)), old(_dryad_S3, sll_list_len_next(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(last_z)))), ==(old(_dryad_S2, rsrtl(last_z)), old(_dryad_S3, rsrtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(last_z)))), ==(old(_dryad_S2, rsrtl_reach(last_z)), old(_dryad_S3, rsrtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll(last_z)), old(_dryad_S3, sll(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll_reach(last_z)), old(_dryad_S3, sll_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll_max_key(last_z)), old(_dryad_S3, sll_max_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(last_z)))), ==(old(_dryad_S2, sll_min_key(last_z)), old(_dryad_S3, sll_min_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(last_z)))), ==(old(_dryad_S2, srtl(last_z)), old(_dryad_S3, srtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(last_z)))), ==(old(_dryad_S2, srtl_reach(last_z)), old(_dryad_S3, srtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll_keys(y)), old(_dryad_S3, sll_keys(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll_list_len_next(y)), old(_dryad_S3, sll_list_len_next(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(y)))), ==(old(_dryad_S2, rsrtl(y)), old(_dryad_S3, rsrtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(y)))), ==(old(_dryad_S2, rsrtl_reach(y)), old(_dryad_S3, rsrtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll(y)), old(_dryad_S3, sll(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll_reach(y)), old(_dryad_S3, sll_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll_max_key(y)), old(_dryad_S3, sll_max_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(y)))), ==(old(_dryad_S2, sll_min_key(y)), old(_dryad_S3, sll_min_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(y)))), ==(old(_dryad_S2, srtl(y)), old(_dryad_S3, srtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(y)))), ==(old(_dryad_S2, srtl_reach(y)), old(_dryad_S3, srtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll_keys(x)), old(_dryad_S3, sll_keys(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll_list_len_next(x)), old(_dryad_S3, sll_list_len_next(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(x)))), ==(old(_dryad_S2, rsrtl(x)), old(_dryad_S3, rsrtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, rsrtl_reach(x)))), ==(old(_dryad_S2, rsrtl_reach(x)), old(_dryad_S3, rsrtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll(x)), old(_dryad_S3, sll(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll_reach(x)), old(_dryad_S3, sll_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll_max_key(x)), old(_dryad_S3, sll_max_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, sll_reach(x)))), ==(old(_dryad_S2, sll_min_key(x)), old(_dryad_S3, sll_min_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(x)))), ==(old(_dryad_S2, srtl(x)), old(_dryad_S3, srtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S2, srtl_reach(x)))), ==(old(_dryad_S2, srtl_reach(x)), old(_dryad_S3, srtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_x)), ==(*((curr_x->key)), old(_dryad_S2, *((curr_x->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_x)), @_vcc_ptr_eq_pure(*((curr_x->next)), old(_dryad_S2, *((curr_x->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_y)), ==(*((curr_y->key)), old(_dryad_S2, *((curr_y->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_y)), @_vcc_ptr_eq_pure(*((curr_y->next)), old(_dryad_S2, *((curr_y->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, last_z)), ==(*((last_z->key)), old(_dryad_S2, *((last_z->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, last_z)), @_vcc_ptr_eq_pure(*((last_z->next)), old(_dryad_S2, *((last_z->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, y)), ==(*((y->key)), old(_dryad_S2, *((y->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, y)), @_vcc_ptr_eq_pure(*((y->next)), old(_dryad_S2, *((y->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, x)), ==(*((x->key)), old(_dryad_S2, *((x->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) == $rd_inv(SL#_dryad_S2, s_node.key, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, x)), @_vcc_ptr_eq_pure(*((x->next)), old(_dryad_S2, *((x->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S2, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==(*((z->key)), +(*((curr_x->key)), *((curr_y->key)))); 
    assume $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) + $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
    // _math \state _dryad_S4; 
    // _dryad_S4 := @_vcc_current_state(@state); 
    SL#_dryad_S4 := $current_state($s);
    // _math \state stmtexpr7#26; 
    // stmtexpr7#26 := _dryad_S4; 
    stmtexpr7#26 := SL#_dryad_S4;
    // assert @prim_writes_check((z->next)); 
    assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#z, ^s_node), s_node.next));
    // *(z->next) := (struct s_node*)@null; 
    call $write_int(s_node.next, $phys_ptr_cast(L#z, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
    assume $full_stop_ext(#tok$3^31.3, $s);
    // _math \state _dryad_S5; 
    // _dryad_S5 := @_vcc_current_state(@state); 
    SL#_dryad_S5 := $current_state($s);
    // _math \state stmtexpr8#27; 
    // stmtexpr8#27 := _dryad_S5; 
    stmtexpr8#27 := SL#_dryad_S5;
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll_keys(curr_x)), old(_dryad_S5, sll_keys(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll_list_len_next(curr_x)), old(_dryad_S5, sll_list_len_next(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(curr_x)))), ==(old(_dryad_S4, rsrtl(curr_x)), old(_dryad_S5, rsrtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(curr_x)))), ==(old(_dryad_S4, rsrtl_reach(curr_x)), old(_dryad_S5, rsrtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll(curr_x)), old(_dryad_S5, sll(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll_reach(curr_x)), old(_dryad_S5, sll_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll_max_key(curr_x)), old(_dryad_S5, sll_max_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_x)))), ==(old(_dryad_S4, sll_min_key(curr_x)), old(_dryad_S5, sll_min_key(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(curr_x)))), ==(old(_dryad_S4, srtl(curr_x)), old(_dryad_S5, srtl(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(curr_x)))), ==(old(_dryad_S4, srtl_reach(curr_x)), old(_dryad_S5, srtl_reach(curr_x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll_keys(curr_y)), old(_dryad_S5, sll_keys(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll_list_len_next(curr_y)), old(_dryad_S5, sll_list_len_next(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(curr_y)))), ==(old(_dryad_S4, rsrtl(curr_y)), old(_dryad_S5, rsrtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(curr_y)))), ==(old(_dryad_S4, rsrtl_reach(curr_y)), old(_dryad_S5, rsrtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll(curr_y)), old(_dryad_S5, sll(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll_reach(curr_y)), old(_dryad_S5, sll_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll_max_key(curr_y)), old(_dryad_S5, sll_max_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(curr_y)))), ==(old(_dryad_S4, sll_min_key(curr_y)), old(_dryad_S5, sll_min_key(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(curr_y)))), ==(old(_dryad_S4, srtl(curr_y)), old(_dryad_S5, srtl(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(curr_y)))), ==(old(_dryad_S4, srtl_reach(curr_y)), old(_dryad_S5, srtl_reach(curr_y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll_keys(last_z)), old(_dryad_S5, sll_keys(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll_list_len_next(last_z)), old(_dryad_S5, sll_list_len_next(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(last_z)))), ==(old(_dryad_S4, rsrtl(last_z)), old(_dryad_S5, rsrtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(last_z)))), ==(old(_dryad_S4, rsrtl_reach(last_z)), old(_dryad_S5, rsrtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll(last_z)), old(_dryad_S5, sll(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll_reach(last_z)), old(_dryad_S5, sll_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll_max_key(last_z)), old(_dryad_S5, sll_max_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(last_z)))), ==(old(_dryad_S4, sll_min_key(last_z)), old(_dryad_S5, sll_min_key(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(last_z)))), ==(old(_dryad_S4, srtl(last_z)), old(_dryad_S5, srtl(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(last_z)))), ==(old(_dryad_S4, srtl_reach(last_z)), old(_dryad_S5, srtl_reach(last_z)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll_keys(y)), old(_dryad_S5, sll_keys(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll_list_len_next(y)), old(_dryad_S5, sll_list_len_next(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(y)))), ==(old(_dryad_S4, rsrtl(y)), old(_dryad_S5, rsrtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(y)))), ==(old(_dryad_S4, rsrtl_reach(y)), old(_dryad_S5, rsrtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll(y)), old(_dryad_S5, sll(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll_reach(y)), old(_dryad_S5, sll_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll_max_key(y)), old(_dryad_S5, sll_max_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(y)))), ==(old(_dryad_S4, sll_min_key(y)), old(_dryad_S5, sll_min_key(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(y)))), ==(old(_dryad_S4, srtl(y)), old(_dryad_S5, srtl(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(y)))), ==(old(_dryad_S4, srtl_reach(y)), old(_dryad_S5, srtl_reach(y)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll_keys(x)), old(_dryad_S5, sll_keys(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll_list_len_next(x)), old(_dryad_S5, sll_list_len_next(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(x)))), ==(old(_dryad_S4, rsrtl(x)), old(_dryad_S5, rsrtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, rsrtl_reach(x)))), ==(old(_dryad_S4, rsrtl_reach(x)), old(_dryad_S5, rsrtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll(x)), old(_dryad_S5, sll(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll_reach(x)), old(_dryad_S5, sll_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll_max_key(x)), old(_dryad_S5, sll_max_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, sll_reach(x)))), ==(old(_dryad_S4, sll_min_key(x)), old(_dryad_S5, sll_min_key(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(x)))), ==(old(_dryad_S4, srtl(x)), old(_dryad_S5, srtl(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(unchecked!(@_vcc_oset_in(z, old(_dryad_S4, srtl_reach(x)))), ==(old(_dryad_S4, srtl_reach(x)), old(_dryad_S5, srtl_reach(x)))); 
    assume !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S5, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_x)), ==(*((curr_x->key)), old(_dryad_S4, *((curr_x->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_x)), @_vcc_ptr_eq_pure(*((curr_x->next)), old(_dryad_S4, *((curr_x->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_y)), ==(*((curr_y->key)), old(_dryad_S4, *((curr_y->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, curr_y)), @_vcc_ptr_eq_pure(*((curr_y->next)), old(_dryad_S4, *((curr_y->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, last_z)), ==(*((last_z->key)), old(_dryad_S4, *((last_z->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(L#last_z, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, last_z)), @_vcc_ptr_eq_pure(*((last_z->next)), old(_dryad_S4, *((last_z->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, y)), ==(*((y->key)), old(_dryad_S4, *((y->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(P#y, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, y)), @_vcc_ptr_eq_pure(*((y->next)), old(_dryad_S4, *((y->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node);
    // assume ==>(!(@_vcc_ptr_eq_pure(z, x)), ==(*((x->key)), old(_dryad_S4, *((x->key))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) == $rd_inv(SL#_dryad_S4, s_node.key, $phys_ptr_cast(P#x, ^s_node));
    // assume ==>(!(@_vcc_ptr_eq_pure(z, x)), @_vcc_ptr_eq_pure(*((x->next)), old(_dryad_S4, *((x->next))))); 
    assume !($phys_ptr_cast(L#z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S4, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node);
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), &&(@_vcc_mutable(@state, curr_x), @writes_check(curr_x))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_x, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_x, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), &&(@_vcc_mutable(@state, curr_y), @writes_check(curr_y))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_y, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_y, ^s_node));
    // assume ==>(@_vcc_ptr_neq_null(last_z), &&(@_vcc_mutable(@state, last_z), @writes_check(last_z))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#last_z, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#last_z, ^s_node));
    loopState#0 := $s;
    assume true;
    while (true)
// INV:BEGIN
      invariant F#srtl($s, $phys_ptr_cast(P#x, ^s_node));
      invariant F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node));
      invariant F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
      invariant $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)), F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
      invariant F#srtl($s, $phys_ptr_cast(L#z, ^s_node));
      invariant F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node));
      invariant F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
      invariant $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)), F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
      invariant F#srtl($s, $phys_ptr_cast(P#y, ^s_node));
      invariant F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node));
      invariant F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
      invariant $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)), F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
      invariant $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)));
      invariant $oset_disjoint(F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)), F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)));
      invariant $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) + $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
      invariant $is_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
// INV:END
      invariant $oset_subset(F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), SL#ALL_REACH);
      invariant $oset_subset(F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)), SL#ALL_REACH);
      invariant $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_x, ^s_node));
      invariant $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_x, ^s_node));
      invariant $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_y, ^s_node));
      invariant $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_y, ^s_node));
      invariant $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#last_z, ^s_node));
      invariant $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#last_z, ^s_node));
    {
      anon7:
        assume $writes_nothing(old($s), $s);
        assume $timestamp_post(loopState#0, $s);
        assume $full_stop_ext(#tok$3^35.3, $s);
        // assume @_vcc_meta_eq(old(@prestate, @state), @state); 
        assume $meta_eq(loopState#0, $s);
        // _Bool ite#2; 
        // assert @reads_check_normal((curr_x->next)); 
        assert $thread_local($s, $phys_ptr_cast(L#curr_x, ^s_node));
        assume true;
        // if (@_vcc_ptr_neq_null(*((curr_x->next)))) ...
        if ($non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)))
        {
          anon3:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // assert @reads_check_normal((curr_y->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#curr_y, ^s_node));
            // ite#2 := @_vcc_ptr_neq_null(*((curr_y->next))); 
            ite#2 := $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node));
        }
        else
        {
          anon4:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // ite#2 := false; 
            ite#2 := false;
        }

      anon8:
        assume true;
        // if (ite#2) ...
        if (ite#2)
        {
          anon5:
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg(z, last_z), &&(sll_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), last_z)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_reach(z, last_z), @_vcc_oset_union(sll_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_keys(z, last_z), @_vcc_intset_union(sll_lseg_keys(*((z->next)), last_z), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_len_next(z, last_z), unchecked+(sll_lseg_len_next(*((z->next)), last_z), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_max_key(z, last_z), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_min_key(z, last_z), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(srtl_lseg(z, last_z), &&(&&(srtl_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), last_z)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), last_z))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(srtl_lseg_reach(z, last_z), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // struct s_node* tmp; 
            // tmp := last_z; 
            L#tmp := $phys_ptr_cast(L#last_z, ^s_node);
            // assert sll_lseg(tmp, tmp); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume sll_lseg(tmp, tmp); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assert srtl_lseg(tmp, tmp); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume srtl_lseg(tmp, tmp); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#tmp, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assert sll_lseg(curr_x, curr_x); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume sll_lseg(curr_x, curr_x); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assert srtl_lseg(curr_x, curr_x); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume srtl_lseg(curr_x, curr_x); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assert sll_lseg(curr_y, curr_y); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume sll_lseg(curr_y, curr_y); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assert srtl_lseg(curr_y, curr_y); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume srtl_lseg(curr_y, curr_y); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assert sll_lseg(z, z); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
            // assume sll_lseg(z, z); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
            // assert srtl_lseg(z, z); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
            // assume srtl_lseg(z, z); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#z, ^s_node));
            // assert sll_lseg(last_z, last_z); 
            assert F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume sll_lseg(last_z, last_z); 
            assume F#sll_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assert srtl_lseg(last_z, last_z); 
            assert F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume srtl_lseg(last_z, last_z); 
            assume F#srtl_lseg($s, $phys_ptr_cast(L#last_z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assert sll_lseg(y, y); 
            assert F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
            // assume sll_lseg(y, y); 
            assume F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
            // assert srtl_lseg(y, y); 
            assert F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
            // assume srtl_lseg(y, y); 
            assume F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(P#y, ^s_node));
            // assert sll_lseg(x, x); 
            assert F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
            // assume sll_lseg(x, x); 
            assume F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
            // assert srtl_lseg(x, x); 
            assert F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
            // assume srtl_lseg(x, x); 
            assume F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(P#x, ^s_node));
            // struct s_node* curr_x2; 
            // curr_x2 := curr_x; 
            SL#curr_x2 := $phys_ptr_cast(L#curr_x, ^s_node);
            // struct s_node* stmtexpr0#8; 
            // stmtexpr0#8 := curr_x2; 
            stmtexpr0#8 := $phys_ptr_cast(SL#curr_x2, ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), ==(sll_lseg(curr_x, *((curr_x->next))), &&(sll_lseg(*((curr_x->next)), *((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_lseg_reach(*((curr_x->next)), *((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), ==(sll_lseg_reach(curr_x, *((curr_x->next))), @_vcc_oset_union(sll_lseg_reach(*((curr_x->next)), *((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), ==(sll_lseg_keys(curr_x, *((curr_x->next))), @_vcc_intset_union(sll_lseg_keys(*((curr_x->next)), *((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), ==(sll_lseg_len_next(curr_x, *((curr_x->next))), unchecked+(sll_lseg_len_next(*((curr_x->next)), *((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), @_vcc_ptr_neq_pure(*((curr_x->next)), *((curr_x->next)))), ==(sll_lseg_max_key(curr_x, *((curr_x->next))), @\int_max(*((curr_x->key)), sll_lseg_max_key(*((curr_x->next)), *((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), @_vcc_ptr_neq_pure(*((curr_x->next)), *((curr_x->next)))), ==(sll_lseg_min_key(curr_x, *((curr_x->next))), @\int_min(*((curr_x->key)), sll_lseg_min_key(*((curr_x->next)), *((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), @_vcc_ptr_neq_pure(*((curr_x->next)), *((curr_x->next)))), ==(srtl_lseg(curr_x, *((curr_x->next))), &&(&&(srtl_lseg(*((curr_x->next)), *((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_lseg_reach(*((curr_x->next)), *((curr_x->next)))))), <=(*((curr_x->key)), sll_lseg_min_key(*((curr_x->next)), *((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_pure(curr_x, *((curr_x->next)))), ==(srtl_lseg_reach(curr_x, *((curr_x->next))), @_vcc_oset_union(srtl_lseg_reach(*((curr_x->next)), *((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $phys_ptr_cast(L#curr_x, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#curr_x, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assert @reads_check_normal((curr_x->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#curr_x, ^s_node));
            // curr_x := *((curr_x->next)); 
            L#curr_x := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // struct s_node* curr_y3; 
            // curr_y3 := curr_y; 
            SL#curr_y3 := $phys_ptr_cast(L#curr_y, ^s_node);
            // struct s_node* stmtexpr1#9; 
            // stmtexpr1#9 := curr_y3; 
            stmtexpr1#9 := $phys_ptr_cast(SL#curr_y3, ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), ==(sll_lseg(curr_y, *((curr_y->next))), &&(sll_lseg(*((curr_y->next)), *((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_lseg_reach(*((curr_y->next)), *((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), ==(sll_lseg_reach(curr_y, *((curr_y->next))), @_vcc_oset_union(sll_lseg_reach(*((curr_y->next)), *((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), ==(sll_lseg_keys(curr_y, *((curr_y->next))), @_vcc_intset_union(sll_lseg_keys(*((curr_y->next)), *((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), ==(sll_lseg_len_next(curr_y, *((curr_y->next))), unchecked+(sll_lseg_len_next(*((curr_y->next)), *((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), @_vcc_ptr_neq_pure(*((curr_y->next)), *((curr_y->next)))), ==(sll_lseg_max_key(curr_y, *((curr_y->next))), @\int_max(*((curr_y->key)), sll_lseg_max_key(*((curr_y->next)), *((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), @_vcc_ptr_neq_pure(*((curr_y->next)), *((curr_y->next)))), ==(sll_lseg_min_key(curr_y, *((curr_y->next))), @\int_min(*((curr_y->key)), sll_lseg_min_key(*((curr_y->next)), *((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), @_vcc_ptr_neq_pure(*((curr_y->next)), *((curr_y->next)))), ==(srtl_lseg(curr_y, *((curr_y->next))), &&(&&(srtl_lseg(*((curr_y->next)), *((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_lseg_reach(*((curr_y->next)), *((curr_y->next)))))), <=(*((curr_y->key)), sll_lseg_min_key(*((curr_y->next)), *((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_pure(curr_y, *((curr_y->next)))), ==(srtl_lseg_reach(curr_y, *((curr_y->next))), @_vcc_oset_union(srtl_lseg_reach(*((curr_y->next)), *((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $phys_ptr_cast(L#curr_y, ^s_node) != $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#curr_y, ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node), $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assert @reads_check_normal((curr_y->next)); 
            assert $thread_local($s, $phys_ptr_cast(L#curr_y, ^s_node));
            // curr_y := *((curr_y->next)); 
            L#curr_y := $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // _math \state _dryad_S6; 
            // _dryad_S6 := @_vcc_current_state(@state); 
            SL#_dryad_S6 := $current_state($s);
            // _math \state stmtexpr2#10; 
            // stmtexpr2#10 := _dryad_S6; 
            stmtexpr2#10 := SL#_dryad_S6;
            // last_z := _vcc_alloc(@_vcc_typeof((struct s_node*)@null)); 
            call L#last_z := $alloc(^s_node);
            assume $full_stop_ext(#tok$3^70.14, $s);
            // assume !(@_vcc_oset_in(last_z, @_vcc_oset_union(_dryad_G0, _dryad_G1))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), $oset_union(SL#_dryad_G0, SL#_dryad_G1));
            // _dryad_G1 := @_vcc_oset_union(_dryad_G0, @_vcc_oset_singleton(last_z)); 
            SL#_dryad_G1 := $oset_union(SL#_dryad_G0, $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // _math \oset stmtexpr3#11; 
            // stmtexpr3#11 := _dryad_G1; 
            stmtexpr3#11 := SL#_dryad_G1;
            // assume ==(glob_reach(), _dryad_G1); 
            assume F#glob_reach() == SL#_dryad_G1;
            // _math \state _dryad_S7; 
            // _dryad_S7 := @_vcc_current_state(@state); 
            SL#_dryad_S7 := $current_state($s);
            // _math \state stmtexpr4#12; 
            // stmtexpr4#12 := _dryad_S7; 
            stmtexpr4#12 := SL#_dryad_S7;
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_keys(curr_y3), @_vcc_intset_union(sll_keys(*((curr_y3->next))), @_vcc_intset_singleton(*((curr_y3->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_list_len_next(curr_y3), unchecked+(sll_list_len_next(*((curr_y3->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(rsrtl(curr_y3), &&(&&(rsrtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, rsrtl_reach(*((curr_y3->next)))))), >=(*((curr_y3->key)), sll_max_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(rsrtl_reach(curr_y3), @_vcc_oset_union(rsrtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll(curr_y3), &&(sll(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, sll_reach(*((curr_y3->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_reach(curr_y3), @_vcc_oset_union(sll_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_max_key(curr_y3), @\int_max(*((curr_y3->key)), sll_max_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_min_key(curr_y3), @\int_min(*((curr_y3->key)), sll_min_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(srtl(curr_y3), &&(&&(srtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, srtl_reach(*((curr_y3->next)))))), <=(*((curr_y3->key)), sll_min_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(srtl_reach(curr_y3), @_vcc_oset_union(srtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_keys(curr_x2), @_vcc_intset_union(sll_keys(*((curr_x2->next))), @_vcc_intset_singleton(*((curr_x2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_list_len_next(curr_x2), unchecked+(sll_list_len_next(*((curr_x2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(rsrtl(curr_x2), &&(&&(rsrtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, rsrtl_reach(*((curr_x2->next)))))), >=(*((curr_x2->key)), sll_max_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(rsrtl_reach(curr_x2), @_vcc_oset_union(rsrtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll(curr_x2), &&(sll(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, sll_reach(*((curr_x2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_reach(curr_x2), @_vcc_oset_union(sll_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_max_key(curr_x2), @\int_max(*((curr_x2->key)), sll_max_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_min_key(curr_x2), @\int_min(*((curr_x2->key)), sll_min_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(srtl(curr_x2), &&(&&(srtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, srtl_reach(*((curr_x2->next)))))), <=(*((curr_x2->key)), sll_min_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(srtl_reach(curr_x2), @_vcc_oset_union(srtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg(z, last_z), &&(sll_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), last_z)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_reach(z, last_z), @_vcc_oset_union(sll_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_keys(z, last_z), @_vcc_intset_union(sll_lseg_keys(*((z->next)), last_z), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_len_next(z, last_z), unchecked+(sll_lseg_len_next(*((z->next)), last_z), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_max_key(z, last_z), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_min_key(z, last_z), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(srtl_lseg(z, last_z), &&(&&(srtl_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), last_z)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), last_z))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(srtl_lseg_reach(z, last_z), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg(z, tmp), &&(sll_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), tmp)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_reach(z, tmp), @_vcc_oset_union(sll_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_keys(z, tmp), @_vcc_intset_union(sll_lseg_keys(*((z->next)), tmp), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_len_next(z, tmp), unchecked+(sll_lseg_len_next(*((z->next)), tmp), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_max_key(z, tmp), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_min_key(z, tmp), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(srtl_lseg(z, tmp), &&(&&(srtl_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), tmp)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), tmp))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(srtl_lseg_reach(z, tmp), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll_keys(curr_y3)), old(_dryad_S7, sll_keys(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll_list_len_next(curr_y3)), old(_dryad_S7, sll_list_len_next(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_y3)))), ==(old(_dryad_S6, rsrtl(curr_y3)), old(_dryad_S7, rsrtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_y3)))), ==(old(_dryad_S6, rsrtl_reach(curr_y3)), old(_dryad_S7, rsrtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll(curr_y3)), old(_dryad_S7, sll(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll_reach(curr_y3)), old(_dryad_S7, sll_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll_max_key(curr_y3)), old(_dryad_S7, sll_max_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y3)))), ==(old(_dryad_S6, sll_min_key(curr_y3)), old(_dryad_S7, sll_min_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_y3)))), ==(old(_dryad_S6, srtl(curr_y3)), old(_dryad_S7, srtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_y3)))), ==(old(_dryad_S6, srtl_reach(curr_y3)), old(_dryad_S7, srtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll_keys(curr_x2)), old(_dryad_S7, sll_keys(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll_list_len_next(curr_x2)), old(_dryad_S7, sll_list_len_next(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_x2)))), ==(old(_dryad_S6, rsrtl(curr_x2)), old(_dryad_S7, rsrtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_x2)))), ==(old(_dryad_S6, rsrtl_reach(curr_x2)), old(_dryad_S7, rsrtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll(curr_x2)), old(_dryad_S7, sll(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll_reach(curr_x2)), old(_dryad_S7, sll_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll_max_key(curr_x2)), old(_dryad_S7, sll_max_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x2)))), ==(old(_dryad_S6, sll_min_key(curr_x2)), old(_dryad_S7, sll_min_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_x2)))), ==(old(_dryad_S6, srtl(curr_x2)), old(_dryad_S7, srtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_x2)))), ==(old(_dryad_S6, srtl_reach(curr_x2)), old(_dryad_S7, srtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll_keys(tmp)), old(_dryad_S7, sll_keys(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll_list_len_next(tmp)), old(_dryad_S7, sll_list_len_next(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(tmp)))), ==(old(_dryad_S6, rsrtl(tmp)), old(_dryad_S7, rsrtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(tmp)))), ==(old(_dryad_S6, rsrtl_reach(tmp)), old(_dryad_S7, rsrtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll(tmp)), old(_dryad_S7, sll(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll_reach(tmp)), old(_dryad_S7, sll_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll_max_key(tmp)), old(_dryad_S7, sll_max_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(tmp)))), ==(old(_dryad_S6, sll_min_key(tmp)), old(_dryad_S7, sll_min_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(tmp)))), ==(old(_dryad_S6, srtl(tmp)), old(_dryad_S7, srtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(tmp)))), ==(old(_dryad_S6, srtl_reach(tmp)), old(_dryad_S7, srtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll_keys(curr_x)), old(_dryad_S7, sll_keys(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll_list_len_next(curr_x)), old(_dryad_S7, sll_list_len_next(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_x)))), ==(old(_dryad_S6, rsrtl(curr_x)), old(_dryad_S7, rsrtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_x)))), ==(old(_dryad_S6, rsrtl_reach(curr_x)), old(_dryad_S7, rsrtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll(curr_x)), old(_dryad_S7, sll(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll_reach(curr_x)), old(_dryad_S7, sll_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll_max_key(curr_x)), old(_dryad_S7, sll_max_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_x)))), ==(old(_dryad_S6, sll_min_key(curr_x)), old(_dryad_S7, sll_min_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_x)))), ==(old(_dryad_S6, srtl(curr_x)), old(_dryad_S7, srtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_x)))), ==(old(_dryad_S6, srtl_reach(curr_x)), old(_dryad_S7, srtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll_keys(curr_y)), old(_dryad_S7, sll_keys(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll_list_len_next(curr_y)), old(_dryad_S7, sll_list_len_next(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_y)))), ==(old(_dryad_S6, rsrtl(curr_y)), old(_dryad_S7, rsrtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(curr_y)))), ==(old(_dryad_S6, rsrtl_reach(curr_y)), old(_dryad_S7, rsrtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll(curr_y)), old(_dryad_S7, sll(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll_reach(curr_y)), old(_dryad_S7, sll_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll_max_key(curr_y)), old(_dryad_S7, sll_max_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(curr_y)))), ==(old(_dryad_S6, sll_min_key(curr_y)), old(_dryad_S7, sll_min_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_y)))), ==(old(_dryad_S6, srtl(curr_y)), old(_dryad_S7, srtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(curr_y)))), ==(old(_dryad_S6, srtl_reach(curr_y)), old(_dryad_S7, srtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll_keys(z)), old(_dryad_S7, sll_keys(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll_list_len_next(z)), old(_dryad_S7, sll_list_len_next(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(z)))), ==(old(_dryad_S6, rsrtl(z)), old(_dryad_S7, rsrtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(z)))), ==(old(_dryad_S6, rsrtl_reach(z)), old(_dryad_S7, rsrtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll(z)), old(_dryad_S7, sll(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll_reach(z)), old(_dryad_S7, sll_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll_max_key(z)), old(_dryad_S7, sll_max_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(z)))), ==(old(_dryad_S6, sll_min_key(z)), old(_dryad_S7, sll_min_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(z)))), ==(old(_dryad_S6, srtl(z)), old(_dryad_S7, srtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(z)))), ==(old(_dryad_S6, srtl_reach(z)), old(_dryad_S7, srtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll_keys(y)), old(_dryad_S7, sll_keys(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll_list_len_next(y)), old(_dryad_S7, sll_list_len_next(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(y)))), ==(old(_dryad_S6, rsrtl(y)), old(_dryad_S7, rsrtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(y)))), ==(old(_dryad_S6, rsrtl_reach(y)), old(_dryad_S7, rsrtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll(y)), old(_dryad_S7, sll(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll_reach(y)), old(_dryad_S7, sll_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll_max_key(y)), old(_dryad_S7, sll_max_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(y)))), ==(old(_dryad_S6, sll_min_key(y)), old(_dryad_S7, sll_min_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(y)))), ==(old(_dryad_S6, srtl(y)), old(_dryad_S7, srtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(y)))), ==(old(_dryad_S6, srtl_reach(y)), old(_dryad_S7, srtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll_keys(x)), old(_dryad_S7, sll_keys(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll_list_len_next(x)), old(_dryad_S7, sll_list_len_next(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(x)))), ==(old(_dryad_S6, rsrtl(x)), old(_dryad_S7, rsrtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, rsrtl_reach(x)))), ==(old(_dryad_S6, rsrtl_reach(x)), old(_dryad_S7, rsrtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll(x)), old(_dryad_S7, sll(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll_reach(x)), old(_dryad_S7, sll_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll_max_key(x)), old(_dryad_S7, sll_max_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_reach(x)))), ==(old(_dryad_S6, sll_min_key(x)), old(_dryad_S7, sll_min_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(x)))), ==(old(_dryad_S6, srtl(x)), old(_dryad_S7, srtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_reach(x)))), ==(old(_dryad_S6, srtl_reach(x)), old(_dryad_S7, srtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg(y, curr_y)), old(_dryad_S7, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_reach(y, curr_y)), old(_dryad_S7, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_keys(y, curr_y)), old(_dryad_S7, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_len_next(y, curr_y)), old(_dryad_S7, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_max_key(y, curr_y)), old(_dryad_S7, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_min_key(y, curr_y)), old(_dryad_S7, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, srtl_lseg(y, curr_y)), old(_dryad_S7, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, srtl_lseg_reach(y, curr_y)), old(_dryad_S7, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg(z, last_z)), old(_dryad_S7, sll_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg_reach(z, last_z)), old(_dryad_S7, sll_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg_keys(z, last_z)), old(_dryad_S7, sll_lseg_keys(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg_len_next(z, last_z)), old(_dryad_S7, sll_lseg_len_next(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg_max_key(z, last_z)), old(_dryad_S7, sll_lseg_max_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S6, sll_lseg_min_key(z, last_z)), old(_dryad_S7, sll_lseg_min_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S6, srtl_lseg(z, last_z)), old(_dryad_S7, srtl_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S6, srtl_lseg_reach(z, last_z)), old(_dryad_S7, srtl_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg(x, curr_x)), old(_dryad_S7, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_reach(x, curr_x)), old(_dryad_S7, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_keys(x, curr_x)), old(_dryad_S7, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_len_next(x, curr_x)), old(_dryad_S7, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_max_key(x, curr_x)), old(_dryad_S7, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_min_key(x, curr_x)), old(_dryad_S7, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, srtl_lseg(x, curr_x)), old(_dryad_S7, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, srtl_lseg_reach(x, curr_x)), old(_dryad_S7, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg(z, tmp)), old(_dryad_S7, sll_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg_reach(z, tmp)), old(_dryad_S7, sll_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg_keys(z, tmp)), old(_dryad_S7, sll_lseg_keys(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg_len_next(z, tmp)), old(_dryad_S7, sll_lseg_len_next(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg_max_key(z, tmp)), old(_dryad_S7, sll_lseg_max_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S6, sll_lseg_min_key(z, tmp)), old(_dryad_S7, sll_lseg_min_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S6, srtl_lseg(z, tmp)), old(_dryad_S7, srtl_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S6, srtl_lseg_reach(z, tmp)), old(_dryad_S7, srtl_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg(x, curr_x)), old(_dryad_S7, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_reach(x, curr_x)), old(_dryad_S7, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_keys(x, curr_x)), old(_dryad_S7, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_len_next(x, curr_x)), old(_dryad_S7, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_max_key(x, curr_x)), old(_dryad_S7, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, sll_lseg_min_key(x, curr_x)), old(_dryad_S7, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, srtl_lseg(x, curr_x)), old(_dryad_S7, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S6, srtl_lseg_reach(x, curr_x)), old(_dryad_S7, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg(y, curr_y)), old(_dryad_S7, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_reach(y, curr_y)), old(_dryad_S7, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_keys(y, curr_y)), old(_dryad_S7, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_len_next(y, curr_y)), old(_dryad_S7, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_max_key(y, curr_y)), old(_dryad_S7, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, sll_lseg_min_key(y, curr_y)), old(_dryad_S7, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, srtl_lseg(y, curr_y)), old(_dryad_S7, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S6, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S6, srtl_lseg_reach(y, curr_y)), old(_dryad_S7, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S6, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S7, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume @_vcc_ptr_neq_null(last_z); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node));
            // assume unchecked!(@_vcc_oset_in(last_z, ALL_REACH)); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), SL#ALL_REACH);
            // ALL_REACH := @_vcc_oset_union(ALL_REACH, @_vcc_oset_singleton(last_z)); 
            SL#ALL_REACH := $oset_union(SL#ALL_REACH, $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // _math \state _dryad_S8; 
            // _dryad_S8 := @_vcc_current_state(@state); 
            SL#_dryad_S8 := $current_state($s);
            // _math \state stmtexpr5#13; 
            // stmtexpr5#13 := _dryad_S8; 
            stmtexpr5#13 := SL#_dryad_S8;
            // assert @prim_writes_check((last_z->next)); 
            assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#last_z, ^s_node), s_node.next));
            // *(last_z->next) := (struct s_node*)@null; 
            call $write_int(s_node.next, $phys_ptr_cast(L#last_z, ^s_node), $ptr_to_int($phys_ptr_cast($null, ^s_node)));
            assume $full_stop_ext(#tok$3^75.5, $s);
            // _math \state _dryad_S9; 
            // _dryad_S9 := @_vcc_current_state(@state); 
            SL#_dryad_S9 := $current_state($s);
            // _math \state stmtexpr6#14; 
            // stmtexpr6#14 := _dryad_S9; 
            stmtexpr6#14 := SL#_dryad_S9;
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll_keys(curr_y3)), old(_dryad_S9, sll_keys(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll_list_len_next(curr_y3)), old(_dryad_S9, sll_list_len_next(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_y3)))), ==(old(_dryad_S8, rsrtl(curr_y3)), old(_dryad_S9, rsrtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_y3)))), ==(old(_dryad_S8, rsrtl_reach(curr_y3)), old(_dryad_S9, rsrtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll(curr_y3)), old(_dryad_S9, sll(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll_reach(curr_y3)), old(_dryad_S9, sll_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll_max_key(curr_y3)), old(_dryad_S9, sll_max_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y3)))), ==(old(_dryad_S8, sll_min_key(curr_y3)), old(_dryad_S9, sll_min_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_y3)))), ==(old(_dryad_S8, srtl(curr_y3)), old(_dryad_S9, srtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_y3)))), ==(old(_dryad_S8, srtl_reach(curr_y3)), old(_dryad_S9, srtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll_keys(curr_x2)), old(_dryad_S9, sll_keys(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll_list_len_next(curr_x2)), old(_dryad_S9, sll_list_len_next(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_x2)))), ==(old(_dryad_S8, rsrtl(curr_x2)), old(_dryad_S9, rsrtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_x2)))), ==(old(_dryad_S8, rsrtl_reach(curr_x2)), old(_dryad_S9, rsrtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll(curr_x2)), old(_dryad_S9, sll(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll_reach(curr_x2)), old(_dryad_S9, sll_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll_max_key(curr_x2)), old(_dryad_S9, sll_max_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x2)))), ==(old(_dryad_S8, sll_min_key(curr_x2)), old(_dryad_S9, sll_min_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_x2)))), ==(old(_dryad_S8, srtl(curr_x2)), old(_dryad_S9, srtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_x2)))), ==(old(_dryad_S8, srtl_reach(curr_x2)), old(_dryad_S9, srtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll_keys(tmp)), old(_dryad_S9, sll_keys(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll_list_len_next(tmp)), old(_dryad_S9, sll_list_len_next(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(tmp)))), ==(old(_dryad_S8, rsrtl(tmp)), old(_dryad_S9, rsrtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(tmp)))), ==(old(_dryad_S8, rsrtl_reach(tmp)), old(_dryad_S9, rsrtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll(tmp)), old(_dryad_S9, sll(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll_reach(tmp)), old(_dryad_S9, sll_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll_max_key(tmp)), old(_dryad_S9, sll_max_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(tmp)))), ==(old(_dryad_S8, sll_min_key(tmp)), old(_dryad_S9, sll_min_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(tmp)))), ==(old(_dryad_S8, srtl(tmp)), old(_dryad_S9, srtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(tmp)))), ==(old(_dryad_S8, srtl_reach(tmp)), old(_dryad_S9, srtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll_keys(curr_x)), old(_dryad_S9, sll_keys(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll_list_len_next(curr_x)), old(_dryad_S9, sll_list_len_next(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_x)))), ==(old(_dryad_S8, rsrtl(curr_x)), old(_dryad_S9, rsrtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_x)))), ==(old(_dryad_S8, rsrtl_reach(curr_x)), old(_dryad_S9, rsrtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll(curr_x)), old(_dryad_S9, sll(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll_reach(curr_x)), old(_dryad_S9, sll_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll_max_key(curr_x)), old(_dryad_S9, sll_max_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_x)))), ==(old(_dryad_S8, sll_min_key(curr_x)), old(_dryad_S9, sll_min_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_x)))), ==(old(_dryad_S8, srtl(curr_x)), old(_dryad_S9, srtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_x)))), ==(old(_dryad_S8, srtl_reach(curr_x)), old(_dryad_S9, srtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll_keys(curr_y)), old(_dryad_S9, sll_keys(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll_list_len_next(curr_y)), old(_dryad_S9, sll_list_len_next(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_y)))), ==(old(_dryad_S8, rsrtl(curr_y)), old(_dryad_S9, rsrtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(curr_y)))), ==(old(_dryad_S8, rsrtl_reach(curr_y)), old(_dryad_S9, rsrtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll(curr_y)), old(_dryad_S9, sll(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll_reach(curr_y)), old(_dryad_S9, sll_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll_max_key(curr_y)), old(_dryad_S9, sll_max_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(curr_y)))), ==(old(_dryad_S8, sll_min_key(curr_y)), old(_dryad_S9, sll_min_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_y)))), ==(old(_dryad_S8, srtl(curr_y)), old(_dryad_S9, srtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(curr_y)))), ==(old(_dryad_S8, srtl_reach(curr_y)), old(_dryad_S9, srtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll_keys(z)), old(_dryad_S9, sll_keys(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll_list_len_next(z)), old(_dryad_S9, sll_list_len_next(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(z)))), ==(old(_dryad_S8, rsrtl(z)), old(_dryad_S9, rsrtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(z)))), ==(old(_dryad_S8, rsrtl_reach(z)), old(_dryad_S9, rsrtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll(z)), old(_dryad_S9, sll(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll_reach(z)), old(_dryad_S9, sll_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll_max_key(z)), old(_dryad_S9, sll_max_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(z)))), ==(old(_dryad_S8, sll_min_key(z)), old(_dryad_S9, sll_min_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(z)))), ==(old(_dryad_S8, srtl(z)), old(_dryad_S9, srtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(z)))), ==(old(_dryad_S8, srtl_reach(z)), old(_dryad_S9, srtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll_keys(y)), old(_dryad_S9, sll_keys(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll_list_len_next(y)), old(_dryad_S9, sll_list_len_next(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(y)))), ==(old(_dryad_S8, rsrtl(y)), old(_dryad_S9, rsrtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(y)))), ==(old(_dryad_S8, rsrtl_reach(y)), old(_dryad_S9, rsrtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll(y)), old(_dryad_S9, sll(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll_reach(y)), old(_dryad_S9, sll_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll_max_key(y)), old(_dryad_S9, sll_max_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(y)))), ==(old(_dryad_S8, sll_min_key(y)), old(_dryad_S9, sll_min_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(y)))), ==(old(_dryad_S8, srtl(y)), old(_dryad_S9, srtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(y)))), ==(old(_dryad_S8, srtl_reach(y)), old(_dryad_S9, srtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll_keys(x)), old(_dryad_S9, sll_keys(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll_list_len_next(x)), old(_dryad_S9, sll_list_len_next(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(x)))), ==(old(_dryad_S8, rsrtl(x)), old(_dryad_S9, rsrtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, rsrtl_reach(x)))), ==(old(_dryad_S8, rsrtl_reach(x)), old(_dryad_S9, rsrtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll(x)), old(_dryad_S9, sll(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll_reach(x)), old(_dryad_S9, sll_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll_max_key(x)), old(_dryad_S9, sll_max_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_reach(x)))), ==(old(_dryad_S8, sll_min_key(x)), old(_dryad_S9, sll_min_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(x)))), ==(old(_dryad_S8, srtl(x)), old(_dryad_S9, srtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_reach(x)))), ==(old(_dryad_S8, srtl_reach(x)), old(_dryad_S9, srtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg(y, curr_y)), old(_dryad_S9, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_reach(y, curr_y)), old(_dryad_S9, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_keys(y, curr_y)), old(_dryad_S9, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_len_next(y, curr_y)), old(_dryad_S9, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_max_key(y, curr_y)), old(_dryad_S9, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_min_key(y, curr_y)), old(_dryad_S9, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, srtl_lseg(y, curr_y)), old(_dryad_S9, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, srtl_lseg_reach(y, curr_y)), old(_dryad_S9, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg(z, last_z)), old(_dryad_S9, sll_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg_reach(z, last_z)), old(_dryad_S9, sll_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg_keys(z, last_z)), old(_dryad_S9, sll_lseg_keys(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg_len_next(z, last_z)), old(_dryad_S9, sll_lseg_len_next(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg_max_key(z, last_z)), old(_dryad_S9, sll_lseg_max_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S8, sll_lseg_min_key(z, last_z)), old(_dryad_S9, sll_lseg_min_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S8, srtl_lseg(z, last_z)), old(_dryad_S9, srtl_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S8, srtl_lseg_reach(z, last_z)), old(_dryad_S9, srtl_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg(x, curr_x)), old(_dryad_S9, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_reach(x, curr_x)), old(_dryad_S9, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_keys(x, curr_x)), old(_dryad_S9, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_len_next(x, curr_x)), old(_dryad_S9, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_max_key(x, curr_x)), old(_dryad_S9, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_min_key(x, curr_x)), old(_dryad_S9, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, srtl_lseg(x, curr_x)), old(_dryad_S9, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, srtl_lseg_reach(x, curr_x)), old(_dryad_S9, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg(z, tmp)), old(_dryad_S9, sll_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg_reach(z, tmp)), old(_dryad_S9, sll_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg_keys(z, tmp)), old(_dryad_S9, sll_lseg_keys(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg_len_next(z, tmp)), old(_dryad_S9, sll_lseg_len_next(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg_max_key(z, tmp)), old(_dryad_S9, sll_lseg_max_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S8, sll_lseg_min_key(z, tmp)), old(_dryad_S9, sll_lseg_min_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S8, srtl_lseg(z, tmp)), old(_dryad_S9, srtl_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S8, srtl_lseg_reach(z, tmp)), old(_dryad_S9, srtl_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg(x, curr_x)), old(_dryad_S9, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_reach(x, curr_x)), old(_dryad_S9, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_keys(x, curr_x)), old(_dryad_S9, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_len_next(x, curr_x)), old(_dryad_S9, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_max_key(x, curr_x)), old(_dryad_S9, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, sll_lseg_min_key(x, curr_x)), old(_dryad_S9, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, srtl_lseg(x, curr_x)), old(_dryad_S9, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S8, srtl_lseg_reach(x, curr_x)), old(_dryad_S9, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg(y, curr_y)), old(_dryad_S9, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_reach(y, curr_y)), old(_dryad_S9, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_keys(y, curr_y)), old(_dryad_S9, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_len_next(y, curr_y)), old(_dryad_S9, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_max_key(y, curr_y)), old(_dryad_S9, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, sll_lseg_min_key(y, curr_y)), old(_dryad_S9, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, srtl_lseg(y, curr_y)), old(_dryad_S9, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S8, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S8, srtl_lseg_reach(y, curr_y)), old(_dryad_S9, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S8, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S9, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y3)), ==(*((curr_y3->key)), old(_dryad_S8, *((curr_y3->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y3)), @_vcc_ptr_eq_pure(*((curr_y3->next)), old(_dryad_S8, *((curr_y3->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x2)), ==(*((curr_x2->key)), old(_dryad_S8, *((curr_x2->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x2)), @_vcc_ptr_eq_pure(*((curr_x2->next)), old(_dryad_S8, *((curr_x2->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, tmp)), ==(*((tmp->key)), old(_dryad_S8, *((tmp->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, tmp)), @_vcc_ptr_eq_pure(*((tmp->next)), old(_dryad_S8, *((tmp->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x)), ==(*((curr_x->key)), old(_dryad_S8, *((curr_x->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x)), @_vcc_ptr_eq_pure(*((curr_x->next)), old(_dryad_S8, *((curr_x->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y)), ==(*((curr_y->key)), old(_dryad_S8, *((curr_y->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y)), @_vcc_ptr_eq_pure(*((curr_y->next)), old(_dryad_S8, *((curr_y->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, z)), ==(*((z->key)), old(_dryad_S8, *((z->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, z)), @_vcc_ptr_eq_pure(*((z->next)), old(_dryad_S8, *((z->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, y)), ==(*((y->key)), old(_dryad_S8, *((y->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, y)), @_vcc_ptr_eq_pure(*((y->next)), old(_dryad_S8, *((y->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, x)), ==(*((x->key)), old(_dryad_S8, *((x->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) == $rd_inv(SL#_dryad_S8, s_node.key, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, x)), @_vcc_ptr_eq_pure(*((x->next)), old(_dryad_S8, *((x->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S8, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_keys(curr_y3), @_vcc_intset_union(sll_keys(*((curr_y3->next))), @_vcc_intset_singleton(*((curr_y3->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_list_len_next(curr_y3), unchecked+(sll_list_len_next(*((curr_y3->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(rsrtl(curr_y3), &&(&&(rsrtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, rsrtl_reach(*((curr_y3->next)))))), >=(*((curr_y3->key)), sll_max_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(rsrtl_reach(curr_y3), @_vcc_oset_union(rsrtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll(curr_y3), &&(sll(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, sll_reach(*((curr_y3->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_reach(curr_y3), @_vcc_oset_union(sll_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_max_key(curr_y3), @\int_max(*((curr_y3->key)), sll_max_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_min_key(curr_y3), @\int_min(*((curr_y3->key)), sll_min_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(srtl(curr_y3), &&(&&(srtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, srtl_reach(*((curr_y3->next)))))), <=(*((curr_y3->key)), sll_min_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(srtl_reach(curr_y3), @_vcc_oset_union(srtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_keys(curr_x2), @_vcc_intset_union(sll_keys(*((curr_x2->next))), @_vcc_intset_singleton(*((curr_x2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_list_len_next(curr_x2), unchecked+(sll_list_len_next(*((curr_x2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(rsrtl(curr_x2), &&(&&(rsrtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, rsrtl_reach(*((curr_x2->next)))))), >=(*((curr_x2->key)), sll_max_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(rsrtl_reach(curr_x2), @_vcc_oset_union(rsrtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll(curr_x2), &&(sll(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, sll_reach(*((curr_x2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_reach(curr_x2), @_vcc_oset_union(sll_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_max_key(curr_x2), @\int_max(*((curr_x2->key)), sll_max_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_min_key(curr_x2), @\int_min(*((curr_x2->key)), sll_min_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(srtl(curr_x2), &&(&&(srtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, srtl_reach(*((curr_x2->next)))))), <=(*((curr_x2->key)), sll_min_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(srtl_reach(curr_x2), @_vcc_oset_union(srtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg(z, tmp), &&(sll_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), tmp)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_reach(z, tmp), @_vcc_oset_union(sll_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_keys(z, tmp), @_vcc_intset_union(sll_lseg_keys(*((z->next)), tmp), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_len_next(z, tmp), unchecked+(sll_lseg_len_next(*((z->next)), tmp), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_max_key(z, tmp), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_min_key(z, tmp), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(srtl_lseg(z, tmp), &&(&&(srtl_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), tmp)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), tmp))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(srtl_lseg_reach(z, tmp), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assert @reads_check_normal((curr_x->key)); 
            assert $thread_local($s, $phys_ptr_cast(L#curr_x, ^s_node));
            // assert @reads_check_normal((curr_y->key)); 
            assert $thread_local($s, $phys_ptr_cast(L#curr_y, ^s_node));
            // z_key := unchecked+(*((curr_x->key)), *((curr_y->key))); 
            L#z_key := $unchk_add(^^i4, $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)));
            // _math \state _dryad_S10; 
            // _dryad_S10 := @_vcc_current_state(@state); 
            SL#_dryad_S10 := $current_state($s);
            // _math \state stmtexpr7#15; 
            // stmtexpr7#15 := _dryad_S10; 
            stmtexpr7#15 := SL#_dryad_S10;
            // assert @prim_writes_check((last_z->key)); 
            assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#last_z, ^s_node), s_node.key));
            // *(last_z->key) := z_key; 
            call $write_int(s_node.key, $phys_ptr_cast(L#last_z, ^s_node), L#z_key);
            assume $full_stop_ext(#tok$3^77.5, $s);
            // _math \state _dryad_S11; 
            // _dryad_S11 := @_vcc_current_state(@state); 
            SL#_dryad_S11 := $current_state($s);
            // _math \state stmtexpr8#16; 
            // stmtexpr8#16 := _dryad_S11; 
            stmtexpr8#16 := SL#_dryad_S11;
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll_keys(*((last_z->next)))), old(_dryad_S11, sll_keys(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll_keys(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll_list_len_next(*((last_z->next)))), old(_dryad_S11, sll_list_len_next(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(*((last_z->next)))))), ==(old(_dryad_S10, rsrtl(*((last_z->next)))), old(_dryad_S11, rsrtl(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#rsrtl(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(*((last_z->next)))))), ==(old(_dryad_S10, rsrtl_reach(*((last_z->next)))), old(_dryad_S11, rsrtl_reach(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll(*((last_z->next)))), old(_dryad_S11, sll(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll_reach(*((last_z->next)))), old(_dryad_S11, sll_reach(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll_reach(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll_max_key(*((last_z->next)))), old(_dryad_S11, sll_max_key(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll_max_key(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(*((last_z->next)))))), ==(old(_dryad_S10, sll_min_key(*((last_z->next)))), old(_dryad_S11, sll_min_key(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#sll_min_key(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(*((last_z->next)))))), ==(old(_dryad_S10, srtl(*((last_z->next)))), old(_dryad_S11, srtl(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#srtl(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#srtl(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(*((last_z->next)))))), ==(old(_dryad_S10, srtl_reach(*((last_z->next)))), old(_dryad_S11, srtl_reach(*((last_z->next)))))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) == F#srtl_reach(SL#_dryad_S11, $rd_phys_ptr(SL#_dryad_S11, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(curr_y3)), old(_dryad_S11, sll_list_len_next(curr_y3))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(curr_y3)), old(_dryad_S11, rsrtl_reach(curr_y3))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==(old(_dryad_S10, sll(curr_y3)), old(_dryad_S11, sll(curr_y3))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(curr_y3)), old(_dryad_S11, sll_reach(curr_y3))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(curr_y3)), old(_dryad_S11, srtl_reach(curr_y3))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(curr_x2)), old(_dryad_S11, sll_list_len_next(curr_x2))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(curr_x2)), old(_dryad_S11, rsrtl_reach(curr_x2))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==(old(_dryad_S10, sll(curr_x2)), old(_dryad_S11, sll(curr_x2))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(curr_x2)), old(_dryad_S11, sll_reach(curr_x2))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(curr_x2)), old(_dryad_S11, srtl_reach(curr_x2))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(tmp)), old(_dryad_S11, sll_list_len_next(tmp))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(tmp)), old(_dryad_S11, rsrtl_reach(tmp))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==(old(_dryad_S10, sll(tmp)), old(_dryad_S11, sll(tmp))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(tmp)), old(_dryad_S11, sll_reach(tmp))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(tmp)), old(_dryad_S11, srtl_reach(tmp))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(curr_x)), old(_dryad_S11, sll_list_len_next(curr_x))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(curr_x)), old(_dryad_S11, rsrtl_reach(curr_x))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==(old(_dryad_S10, sll(curr_x)), old(_dryad_S11, sll(curr_x))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(curr_x)), old(_dryad_S11, sll_reach(curr_x))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(curr_x)), old(_dryad_S11, srtl_reach(curr_x))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(curr_y)), old(_dryad_S11, sll_list_len_next(curr_y))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(curr_y)), old(_dryad_S11, rsrtl_reach(curr_y))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==(old(_dryad_S10, sll(curr_y)), old(_dryad_S11, sll(curr_y))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(curr_y)), old(_dryad_S11, sll_reach(curr_y))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(curr_y)), old(_dryad_S11, srtl_reach(curr_y))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(z)), old(_dryad_S11, sll_list_len_next(z))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(z)), old(_dryad_S11, rsrtl_reach(z))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==(old(_dryad_S10, sll(z)), old(_dryad_S11, sll(z))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(z)), old(_dryad_S11, sll_reach(z))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(z)), old(_dryad_S11, srtl_reach(z))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(last_z)), old(_dryad_S11, sll_list_len_next(last_z))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(last_z)), old(_dryad_S11, rsrtl_reach(last_z))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==(old(_dryad_S10, sll(last_z)), old(_dryad_S11, sll(last_z))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(last_z)), old(_dryad_S11, sll_reach(last_z))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(last_z)), old(_dryad_S11, srtl_reach(last_z))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(y)), old(_dryad_S11, sll_list_len_next(y))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(y)), old(_dryad_S11, rsrtl_reach(y))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==(old(_dryad_S10, sll(y)), old(_dryad_S11, sll(y))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(y)), old(_dryad_S11, sll_reach(y))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(y)), old(_dryad_S11, srtl_reach(y))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==(old(_dryad_S10, sll_list_len_next(x)), old(_dryad_S11, sll_list_len_next(x))); 
            assume F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==(old(_dryad_S10, rsrtl_reach(x)), old(_dryad_S11, rsrtl_reach(x))); 
            assume F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==(old(_dryad_S10, sll(x)), old(_dryad_S11, sll(x))); 
            assume F#sll(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==(old(_dryad_S10, sll_reach(x)), old(_dryad_S11, sll_reach(x))); 
            assume F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==(old(_dryad_S10, srtl_reach(x)), old(_dryad_S11, srtl_reach(x))); 
            assume F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll_keys(curr_y3)), old(_dryad_S11, sll_keys(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll_list_len_next(curr_y3)), old(_dryad_S11, sll_list_len_next(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_y3)))), ==(old(_dryad_S10, rsrtl(curr_y3)), old(_dryad_S11, rsrtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_y3)))), ==(old(_dryad_S10, rsrtl_reach(curr_y3)), old(_dryad_S11, rsrtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll(curr_y3)), old(_dryad_S11, sll(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll_reach(curr_y3)), old(_dryad_S11, sll_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll_max_key(curr_y3)), old(_dryad_S11, sll_max_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y3)))), ==(old(_dryad_S10, sll_min_key(curr_y3)), old(_dryad_S11, sll_min_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_y3)))), ==(old(_dryad_S10, srtl(curr_y3)), old(_dryad_S11, srtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_y3)))), ==(old(_dryad_S10, srtl_reach(curr_y3)), old(_dryad_S11, srtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll_keys(curr_x2)), old(_dryad_S11, sll_keys(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll_list_len_next(curr_x2)), old(_dryad_S11, sll_list_len_next(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_x2)))), ==(old(_dryad_S10, rsrtl(curr_x2)), old(_dryad_S11, rsrtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_x2)))), ==(old(_dryad_S10, rsrtl_reach(curr_x2)), old(_dryad_S11, rsrtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll(curr_x2)), old(_dryad_S11, sll(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll_reach(curr_x2)), old(_dryad_S11, sll_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll_max_key(curr_x2)), old(_dryad_S11, sll_max_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x2)))), ==(old(_dryad_S10, sll_min_key(curr_x2)), old(_dryad_S11, sll_min_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_x2)))), ==(old(_dryad_S10, srtl(curr_x2)), old(_dryad_S11, srtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_x2)))), ==(old(_dryad_S10, srtl_reach(curr_x2)), old(_dryad_S11, srtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll_keys(tmp)), old(_dryad_S11, sll_keys(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll_list_len_next(tmp)), old(_dryad_S11, sll_list_len_next(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(tmp)))), ==(old(_dryad_S10, rsrtl(tmp)), old(_dryad_S11, rsrtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(tmp)))), ==(old(_dryad_S10, rsrtl_reach(tmp)), old(_dryad_S11, rsrtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll(tmp)), old(_dryad_S11, sll(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll_reach(tmp)), old(_dryad_S11, sll_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll_max_key(tmp)), old(_dryad_S11, sll_max_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(tmp)))), ==(old(_dryad_S10, sll_min_key(tmp)), old(_dryad_S11, sll_min_key(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(tmp)))), ==(old(_dryad_S10, srtl(tmp)), old(_dryad_S11, srtl(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(tmp)))), ==(old(_dryad_S10, srtl_reach(tmp)), old(_dryad_S11, srtl_reach(tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll_keys(curr_x)), old(_dryad_S11, sll_keys(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll_list_len_next(curr_x)), old(_dryad_S11, sll_list_len_next(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_x)))), ==(old(_dryad_S10, rsrtl(curr_x)), old(_dryad_S11, rsrtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_x)))), ==(old(_dryad_S10, rsrtl_reach(curr_x)), old(_dryad_S11, rsrtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll(curr_x)), old(_dryad_S11, sll(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll_reach(curr_x)), old(_dryad_S11, sll_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll_max_key(curr_x)), old(_dryad_S11, sll_max_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_x)))), ==(old(_dryad_S10, sll_min_key(curr_x)), old(_dryad_S11, sll_min_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_x)))), ==(old(_dryad_S10, srtl(curr_x)), old(_dryad_S11, srtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_x)))), ==(old(_dryad_S10, srtl_reach(curr_x)), old(_dryad_S11, srtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll_keys(curr_y)), old(_dryad_S11, sll_keys(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll_list_len_next(curr_y)), old(_dryad_S11, sll_list_len_next(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_y)))), ==(old(_dryad_S10, rsrtl(curr_y)), old(_dryad_S11, rsrtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(curr_y)))), ==(old(_dryad_S10, rsrtl_reach(curr_y)), old(_dryad_S11, rsrtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll(curr_y)), old(_dryad_S11, sll(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll_reach(curr_y)), old(_dryad_S11, sll_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll_max_key(curr_y)), old(_dryad_S11, sll_max_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(curr_y)))), ==(old(_dryad_S10, sll_min_key(curr_y)), old(_dryad_S11, sll_min_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_y)))), ==(old(_dryad_S10, srtl(curr_y)), old(_dryad_S11, srtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(curr_y)))), ==(old(_dryad_S10, srtl_reach(curr_y)), old(_dryad_S11, srtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll_keys(z)), old(_dryad_S11, sll_keys(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll_list_len_next(z)), old(_dryad_S11, sll_list_len_next(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(z)))), ==(old(_dryad_S10, rsrtl(z)), old(_dryad_S11, rsrtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(z)))), ==(old(_dryad_S10, rsrtl_reach(z)), old(_dryad_S11, rsrtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll(z)), old(_dryad_S11, sll(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll_reach(z)), old(_dryad_S11, sll_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll_max_key(z)), old(_dryad_S11, sll_max_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(z)))), ==(old(_dryad_S10, sll_min_key(z)), old(_dryad_S11, sll_min_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(z)))), ==(old(_dryad_S10, srtl(z)), old(_dryad_S11, srtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(z)))), ==(old(_dryad_S10, srtl_reach(z)), old(_dryad_S11, srtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll_keys(y)), old(_dryad_S11, sll_keys(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll_list_len_next(y)), old(_dryad_S11, sll_list_len_next(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(y)))), ==(old(_dryad_S10, rsrtl(y)), old(_dryad_S11, rsrtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(y)))), ==(old(_dryad_S10, rsrtl_reach(y)), old(_dryad_S11, rsrtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll(y)), old(_dryad_S11, sll(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll_reach(y)), old(_dryad_S11, sll_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll_max_key(y)), old(_dryad_S11, sll_max_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(y)))), ==(old(_dryad_S10, sll_min_key(y)), old(_dryad_S11, sll_min_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(y)))), ==(old(_dryad_S10, srtl(y)), old(_dryad_S11, srtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(y)))), ==(old(_dryad_S10, srtl_reach(y)), old(_dryad_S11, srtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll_keys(x)), old(_dryad_S11, sll_keys(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll_list_len_next(x)), old(_dryad_S11, sll_list_len_next(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(x)))), ==(old(_dryad_S10, rsrtl(x)), old(_dryad_S11, rsrtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, rsrtl_reach(x)))), ==(old(_dryad_S10, rsrtl_reach(x)), old(_dryad_S11, rsrtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll(x)), old(_dryad_S11, sll(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll_reach(x)), old(_dryad_S11, sll_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll_max_key(x)), old(_dryad_S11, sll_max_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_reach(x)))), ==(old(_dryad_S10, sll_min_key(x)), old(_dryad_S11, sll_min_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(x)))), ==(old(_dryad_S10, srtl(x)), old(_dryad_S11, srtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_reach(x)))), ==(old(_dryad_S10, srtl_reach(x)), old(_dryad_S11, srtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg(y, curr_y)), old(_dryad_S11, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_reach(y, curr_y)), old(_dryad_S11, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_keys(y, curr_y)), old(_dryad_S11, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_len_next(y, curr_y)), old(_dryad_S11, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_max_key(y, curr_y)), old(_dryad_S11, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_min_key(y, curr_y)), old(_dryad_S11, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, srtl_lseg(y, curr_y)), old(_dryad_S11, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, srtl_lseg_reach(y, curr_y)), old(_dryad_S11, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg(z, last_z)), old(_dryad_S11, sll_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg_reach(z, last_z)), old(_dryad_S11, sll_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg_keys(z, last_z)), old(_dryad_S11, sll_lseg_keys(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg_len_next(z, last_z)), old(_dryad_S11, sll_lseg_len_next(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg_max_key(z, last_z)), old(_dryad_S11, sll_lseg_max_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S10, sll_lseg_min_key(z, last_z)), old(_dryad_S11, sll_lseg_min_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S10, srtl_lseg(z, last_z)), old(_dryad_S11, srtl_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S10, srtl_lseg_reach(z, last_z)), old(_dryad_S11, srtl_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg(x, curr_x)), old(_dryad_S11, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_reach(x, curr_x)), old(_dryad_S11, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_keys(x, curr_x)), old(_dryad_S11, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_len_next(x, curr_x)), old(_dryad_S11, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_max_key(x, curr_x)), old(_dryad_S11, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_min_key(x, curr_x)), old(_dryad_S11, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, srtl_lseg(x, curr_x)), old(_dryad_S11, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, srtl_lseg_reach(x, curr_x)), old(_dryad_S11, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg(z, tmp)), old(_dryad_S11, sll_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg_reach(z, tmp)), old(_dryad_S11, sll_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg_keys(z, tmp)), old(_dryad_S11, sll_lseg_keys(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg_len_next(z, tmp)), old(_dryad_S11, sll_lseg_len_next(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg_max_key(z, tmp)), old(_dryad_S11, sll_lseg_max_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S10, sll_lseg_min_key(z, tmp)), old(_dryad_S11, sll_lseg_min_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S10, srtl_lseg(z, tmp)), old(_dryad_S11, srtl_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S10, srtl_lseg_reach(z, tmp)), old(_dryad_S11, srtl_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg(x, curr_x)), old(_dryad_S11, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_reach(x, curr_x)), old(_dryad_S11, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_keys(x, curr_x)), old(_dryad_S11, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_len_next(x, curr_x)), old(_dryad_S11, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_max_key(x, curr_x)), old(_dryad_S11, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, sll_lseg_min_key(x, curr_x)), old(_dryad_S11, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, srtl_lseg(x, curr_x)), old(_dryad_S11, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S10, srtl_lseg_reach(x, curr_x)), old(_dryad_S11, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg(y, curr_y)), old(_dryad_S11, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_reach(y, curr_y)), old(_dryad_S11, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_keys(y, curr_y)), old(_dryad_S11, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_len_next(y, curr_y)), old(_dryad_S11, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_max_key(y, curr_y)), old(_dryad_S11, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, sll_lseg_min_key(y, curr_y)), old(_dryad_S11, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, srtl_lseg(y, curr_y)), old(_dryad_S11, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(last_z, old(_dryad_S10, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S10, srtl_lseg_reach(y, curr_y)), old(_dryad_S11, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S10, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S11, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y3)), ==(*((curr_y3->key)), old(_dryad_S10, *((curr_y3->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y3)), @_vcc_ptr_eq_pure(*((curr_y3->next)), old(_dryad_S10, *((curr_y3->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x2)), ==(*((curr_x2->key)), old(_dryad_S10, *((curr_x2->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x2)), @_vcc_ptr_eq_pure(*((curr_x2->next)), old(_dryad_S10, *((curr_x2->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, tmp)), ==(*((tmp->key)), old(_dryad_S10, *((tmp->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, tmp)), @_vcc_ptr_eq_pure(*((tmp->next)), old(_dryad_S10, *((tmp->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#tmp, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x)), ==(*((curr_x->key)), old(_dryad_S10, *((curr_x->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_x)), @_vcc_ptr_eq_pure(*((curr_x->next)), old(_dryad_S10, *((curr_x->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y)), ==(*((curr_y->key)), old(_dryad_S10, *((curr_y->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, curr_y)), @_vcc_ptr_eq_pure(*((curr_y->next)), old(_dryad_S10, *((curr_y->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, z)), ==(*((z->key)), old(_dryad_S10, *((z->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, z)), @_vcc_ptr_eq_pure(*((z->next)), old(_dryad_S10, *((z->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, y)), ==(*((y->key)), old(_dryad_S10, *((y->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, y)), @_vcc_ptr_eq_pure(*((y->next)), old(_dryad_S10, *((y->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, x)), ==(*((x->key)), old(_dryad_S10, *((x->key))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) == $rd_inv(SL#_dryad_S10, s_node.key, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(last_z, x)), @_vcc_ptr_eq_pure(*((x->next)), old(_dryad_S10, *((x->next))))); 
            assume !($phys_ptr_cast(L#last_z, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S10, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_keys(curr_y3), @_vcc_intset_union(sll_keys(*((curr_y3->next))), @_vcc_intset_singleton(*((curr_y3->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_list_len_next(curr_y3), unchecked+(sll_list_len_next(*((curr_y3->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(rsrtl(curr_y3), &&(&&(rsrtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, rsrtl_reach(*((curr_y3->next)))))), >=(*((curr_y3->key)), sll_max_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(rsrtl_reach(curr_y3), @_vcc_oset_union(rsrtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll(curr_y3), &&(sll(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, sll_reach(*((curr_y3->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_reach(curr_y3), @_vcc_oset_union(sll_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_max_key(curr_y3), @\int_max(*((curr_y3->key)), sll_max_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_min_key(curr_y3), @\int_min(*((curr_y3->key)), sll_min_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(srtl(curr_y3), &&(&&(srtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, srtl_reach(*((curr_y3->next)))))), <=(*((curr_y3->key)), sll_min_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(srtl_reach(curr_y3), @_vcc_oset_union(srtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_keys(curr_x2), @_vcc_intset_union(sll_keys(*((curr_x2->next))), @_vcc_intset_singleton(*((curr_x2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_list_len_next(curr_x2), unchecked+(sll_list_len_next(*((curr_x2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(rsrtl(curr_x2), &&(&&(rsrtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, rsrtl_reach(*((curr_x2->next)))))), >=(*((curr_x2->key)), sll_max_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(rsrtl_reach(curr_x2), @_vcc_oset_union(rsrtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll(curr_x2), &&(sll(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, sll_reach(*((curr_x2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_reach(curr_x2), @_vcc_oset_union(sll_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_max_key(curr_x2), @\int_max(*((curr_x2->key)), sll_max_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_min_key(curr_x2), @\int_min(*((curr_x2->key)), sll_min_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(srtl(curr_x2), &&(&&(srtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, srtl_reach(*((curr_x2->next)))))), <=(*((curr_x2->key)), sll_min_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(srtl_reach(curr_x2), @_vcc_oset_union(srtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg(z, tmp), &&(sll_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), tmp)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_reach(z, tmp), @_vcc_oset_union(sll_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_keys(z, tmp), @_vcc_intset_union(sll_lseg_keys(*((z->next)), tmp), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(sll_lseg_len_next(z, tmp), unchecked+(sll_lseg_len_next(*((z->next)), tmp), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_max_key(z, tmp), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(sll_lseg_min_key(z, tmp), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), tmp)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), @_vcc_ptr_neq_pure(*((z->next)), tmp)), ==(srtl_lseg(z, tmp), &&(&&(srtl_lseg(*((z->next)), tmp), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), tmp)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), tmp))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, tmp)), ==(srtl_lseg_reach(z, tmp), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), tmp), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#tmp, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#tmp, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==(*((last_z->key)), +(*((curr_x->key)), *((curr_y->key)))); 
            assume $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) == $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) + $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
            // _math \state _dryad_S12; 
            // _dryad_S12 := @_vcc_current_state(@state); 
            SL#_dryad_S12 := $current_state($s);
            // _math \state stmtexpr9#17; 
            // stmtexpr9#17 := _dryad_S12; 
            stmtexpr9#17 := SL#_dryad_S12;
            // assert @prim_writes_check((tmp->next)); 
            assert $writable_prim($s, #wrTime$3^3.3, $dot($phys_ptr_cast(L#tmp, ^s_node), s_node.next));
            // *(tmp->next) := last_z; 
            call $write_int(s_node.next, $phys_ptr_cast(L#tmp, ^s_node), $ptr_to_int($phys_ptr_cast(L#last_z, ^s_node)));
            assume $full_stop_ext(#tok$3^79.5, $s);
            // _math \state _dryad_S13; 
            // _dryad_S13 := @_vcc_current_state(@state); 
            SL#_dryad_S13 := $current_state($s);
            // _math \state stmtexpr10#18; 
            // stmtexpr10#18 := _dryad_S13; 
            stmtexpr10#18 := SL#_dryad_S13;
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll_keys(curr_y3)), old(_dryad_S13, sll_keys(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll_list_len_next(curr_y3)), old(_dryad_S13, sll_list_len_next(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_y3)))), ==(old(_dryad_S12, rsrtl(curr_y3)), old(_dryad_S13, rsrtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_y3)))), ==(old(_dryad_S12, rsrtl_reach(curr_y3)), old(_dryad_S13, rsrtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll(curr_y3)), old(_dryad_S13, sll(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll_reach(curr_y3)), old(_dryad_S13, sll_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll_max_key(curr_y3)), old(_dryad_S13, sll_max_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y3)))), ==(old(_dryad_S12, sll_min_key(curr_y3)), old(_dryad_S13, sll_min_key(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_y3)))), ==(old(_dryad_S12, srtl(curr_y3)), old(_dryad_S13, srtl(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_y3)))), ==(old(_dryad_S12, srtl_reach(curr_y3)), old(_dryad_S13, srtl_reach(curr_y3)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_y3, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll_keys(curr_x2)), old(_dryad_S13, sll_keys(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll_list_len_next(curr_x2)), old(_dryad_S13, sll_list_len_next(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_x2)))), ==(old(_dryad_S12, rsrtl(curr_x2)), old(_dryad_S13, rsrtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_x2)))), ==(old(_dryad_S12, rsrtl_reach(curr_x2)), old(_dryad_S13, rsrtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll(curr_x2)), old(_dryad_S13, sll(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll_reach(curr_x2)), old(_dryad_S13, sll_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll_max_key(curr_x2)), old(_dryad_S13, sll_max_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x2)))), ==(old(_dryad_S12, sll_min_key(curr_x2)), old(_dryad_S13, sll_min_key(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_x2)))), ==(old(_dryad_S12, srtl(curr_x2)), old(_dryad_S13, srtl(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_x2)))), ==(old(_dryad_S12, srtl_reach(curr_x2)), old(_dryad_S13, srtl_reach(curr_x2)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(SL#curr_x2, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll_keys(curr_x)), old(_dryad_S13, sll_keys(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll_list_len_next(curr_x)), old(_dryad_S13, sll_list_len_next(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_x)))), ==(old(_dryad_S12, rsrtl(curr_x)), old(_dryad_S13, rsrtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_x)))), ==(old(_dryad_S12, rsrtl_reach(curr_x)), old(_dryad_S13, rsrtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll(curr_x)), old(_dryad_S13, sll(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll_reach(curr_x)), old(_dryad_S13, sll_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll_max_key(curr_x)), old(_dryad_S13, sll_max_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_x)))), ==(old(_dryad_S12, sll_min_key(curr_x)), old(_dryad_S13, sll_min_key(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_x)))), ==(old(_dryad_S12, srtl(curr_x)), old(_dryad_S13, srtl(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_x)))), ==(old(_dryad_S12, srtl_reach(curr_x)), old(_dryad_S13, srtl_reach(curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll_keys(curr_y)), old(_dryad_S13, sll_keys(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll_list_len_next(curr_y)), old(_dryad_S13, sll_list_len_next(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_y)))), ==(old(_dryad_S12, rsrtl(curr_y)), old(_dryad_S13, rsrtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(curr_y)))), ==(old(_dryad_S12, rsrtl_reach(curr_y)), old(_dryad_S13, rsrtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll(curr_y)), old(_dryad_S13, sll(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll_reach(curr_y)), old(_dryad_S13, sll_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll_max_key(curr_y)), old(_dryad_S13, sll_max_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(curr_y)))), ==(old(_dryad_S12, sll_min_key(curr_y)), old(_dryad_S13, sll_min_key(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_y)))), ==(old(_dryad_S12, srtl(curr_y)), old(_dryad_S13, srtl(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(curr_y)))), ==(old(_dryad_S12, srtl_reach(curr_y)), old(_dryad_S13, srtl_reach(curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll_keys(z)), old(_dryad_S13, sll_keys(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll_list_len_next(z)), old(_dryad_S13, sll_list_len_next(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(z)))), ==(old(_dryad_S12, rsrtl(z)), old(_dryad_S13, rsrtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(z)))), ==(old(_dryad_S12, rsrtl_reach(z)), old(_dryad_S13, rsrtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll(z)), old(_dryad_S13, sll(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll_reach(z)), old(_dryad_S13, sll_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll_max_key(z)), old(_dryad_S13, sll_max_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(z)))), ==(old(_dryad_S12, sll_min_key(z)), old(_dryad_S13, sll_min_key(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(z)))), ==(old(_dryad_S12, srtl(z)), old(_dryad_S13, srtl(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(z)))), ==(old(_dryad_S12, srtl_reach(z)), old(_dryad_S13, srtl_reach(z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll_keys(last_z)), old(_dryad_S13, sll_keys(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll_list_len_next(last_z)), old(_dryad_S13, sll_list_len_next(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(last_z)))), ==(old(_dryad_S12, rsrtl(last_z)), old(_dryad_S13, rsrtl(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(last_z)))), ==(old(_dryad_S12, rsrtl_reach(last_z)), old(_dryad_S13, rsrtl_reach(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll(last_z)), old(_dryad_S13, sll(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll_reach(last_z)), old(_dryad_S13, sll_reach(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll_max_key(last_z)), old(_dryad_S13, sll_max_key(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(last_z)))), ==(old(_dryad_S12, sll_min_key(last_z)), old(_dryad_S13, sll_min_key(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(last_z)))), ==(old(_dryad_S12, srtl(last_z)), old(_dryad_S13, srtl(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(last_z)))), ==(old(_dryad_S12, srtl_reach(last_z)), old(_dryad_S13, srtl_reach(last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll_keys(y)), old(_dryad_S13, sll_keys(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll_list_len_next(y)), old(_dryad_S13, sll_list_len_next(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(y)))), ==(old(_dryad_S12, rsrtl(y)), old(_dryad_S13, rsrtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(y)))), ==(old(_dryad_S12, rsrtl_reach(y)), old(_dryad_S13, rsrtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll(y)), old(_dryad_S13, sll(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll_reach(y)), old(_dryad_S13, sll_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll_max_key(y)), old(_dryad_S13, sll_max_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(y)))), ==(old(_dryad_S12, sll_min_key(y)), old(_dryad_S13, sll_min_key(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(y)))), ==(old(_dryad_S12, srtl(y)), old(_dryad_S13, srtl(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(y)))), ==(old(_dryad_S12, srtl_reach(y)), old(_dryad_S13, srtl_reach(y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll_keys(x)), old(_dryad_S13, sll_keys(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_keys(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll_keys(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll_list_len_next(x)), old(_dryad_S13, sll_list_len_next(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_list_len_next(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll_list_len_next(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(x)))), ==(old(_dryad_S12, rsrtl(x)), old(_dryad_S13, rsrtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, rsrtl_reach(x)))), ==(old(_dryad_S12, rsrtl_reach(x)), old(_dryad_S13, rsrtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#rsrtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#rsrtl_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll(x)), old(_dryad_S13, sll(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll_reach(x)), old(_dryad_S13, sll_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll_max_key(x)), old(_dryad_S13, sll_max_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_max_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll_max_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_reach(x)))), ==(old(_dryad_S12, sll_min_key(x)), old(_dryad_S13, sll_min_key(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#sll_min_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#sll_min_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(x)))), ==(old(_dryad_S12, srtl(x)), old(_dryad_S13, srtl(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#srtl(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_reach(x)))), ==(old(_dryad_S12, srtl_reach(x)), old(_dryad_S13, srtl_reach(x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node))) ==> F#srtl_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node)) == F#srtl_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg(y, curr_y)), old(_dryad_S13, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_reach(y, curr_y)), old(_dryad_S13, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_keys(y, curr_y)), old(_dryad_S13, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_len_next(y, curr_y)), old(_dryad_S13, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_max_key(y, curr_y)), old(_dryad_S13, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_min_key(y, curr_y)), old(_dryad_S13, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, srtl_lseg(y, curr_y)), old(_dryad_S13, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, srtl_lseg_reach(y, curr_y)), old(_dryad_S13, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg(z, last_z)), old(_dryad_S13, sll_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg_reach(z, last_z)), old(_dryad_S13, sll_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg_keys(z, last_z)), old(_dryad_S13, sll_lseg_keys(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg_len_next(z, last_z)), old(_dryad_S13, sll_lseg_len_next(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg_max_key(z, last_z)), old(_dryad_S13, sll_lseg_max_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, last_z)))), ==(old(_dryad_S12, sll_lseg_min_key(z, last_z)), old(_dryad_S13, sll_lseg_min_key(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S12, srtl_lseg(z, last_z)), old(_dryad_S13, srtl_lseg(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(z, last_z)))), ==(old(_dryad_S12, srtl_lseg_reach(z, last_z)), old(_dryad_S13, srtl_lseg_reach(z, last_z)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg(x, curr_x)), old(_dryad_S13, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_reach(x, curr_x)), old(_dryad_S13, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_keys(x, curr_x)), old(_dryad_S13, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_len_next(x, curr_x)), old(_dryad_S13, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_max_key(x, curr_x)), old(_dryad_S13, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_min_key(x, curr_x)), old(_dryad_S13, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, srtl_lseg(x, curr_x)), old(_dryad_S13, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, srtl_lseg_reach(x, curr_x)), old(_dryad_S13, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg(z, tmp)), old(_dryad_S13, sll_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg_reach(z, tmp)), old(_dryad_S13, sll_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg_keys(z, tmp)), old(_dryad_S13, sll_lseg_keys(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg_len_next(z, tmp)), old(_dryad_S13, sll_lseg_len_next(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg_max_key(z, tmp)), old(_dryad_S13, sll_lseg_max_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(z, tmp)))), ==(old(_dryad_S12, sll_lseg_min_key(z, tmp)), old(_dryad_S13, sll_lseg_min_key(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S12, srtl_lseg(z, tmp)), old(_dryad_S13, srtl_lseg(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(z, tmp)))), ==(old(_dryad_S12, srtl_lseg_reach(z, tmp)), old(_dryad_S13, srtl_lseg_reach(z, tmp)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#tmp, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg(x, curr_x)), old(_dryad_S13, sll_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_reach(x, curr_x)), old(_dryad_S13, sll_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_keys(x, curr_x)), old(_dryad_S13, sll_lseg_keys(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_len_next(x, curr_x)), old(_dryad_S13, sll_lseg_len_next(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_max_key(x, curr_x)), old(_dryad_S13, sll_lseg_max_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, sll_lseg_min_key(x, curr_x)), old(_dryad_S13, sll_lseg_min_key(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, srtl_lseg(x, curr_x)), old(_dryad_S13, srtl_lseg(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(x, curr_x)))), ==(old(_dryad_S12, srtl_lseg_reach(x, curr_x)), old(_dryad_S13, srtl_lseg_reach(x, curr_x)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg(y, curr_y)), old(_dryad_S13, sll_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_reach(y, curr_y)), old(_dryad_S13, sll_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_keys(y, curr_y)), old(_dryad_S13, sll_lseg_keys(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_keys(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_keys(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_len_next(y, curr_y)), old(_dryad_S13, sll_lseg_len_next(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_len_next(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_len_next(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_max_key(y, curr_y)), old(_dryad_S13, sll_lseg_max_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_max_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_max_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, sll_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, sll_lseg_min_key(y, curr_y)), old(_dryad_S13, sll_lseg_min_key(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#sll_lseg_min_key(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#sll_lseg_min_key(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, srtl_lseg(y, curr_y)), old(_dryad_S13, srtl_lseg(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(unchecked!(@_vcc_oset_in(tmp, old(_dryad_S12, srtl_lseg_reach(y, curr_y)))), ==(old(_dryad_S12, srtl_lseg_reach(y, curr_y)), old(_dryad_S13, srtl_lseg_reach(y, curr_y)))); 
            assume !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) ==> F#srtl_lseg_reach(SL#_dryad_S12, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == F#srtl_lseg_reach(SL#_dryad_S13, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_y3)), ==(*((curr_y3->key)), old(_dryad_S12, *((curr_y3->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_y3)), @_vcc_ptr_eq_pure(*((curr_y3->next)), old(_dryad_S12, *((curr_y3->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(SL#curr_y3, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_x2)), ==(*((curr_x2->key)), old(_dryad_S12, *((curr_x2->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_x2)), @_vcc_ptr_eq_pure(*((curr_x2->next)), old(_dryad_S12, *((curr_x2->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(SL#curr_x2, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_x)), ==(*((curr_x->key)), old(_dryad_S12, *((curr_x->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_x)), @_vcc_ptr_eq_pure(*((curr_x->next)), old(_dryad_S12, *((curr_x->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#curr_x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_y)), ==(*((curr_y->key)), old(_dryad_S12, *((curr_y->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, curr_y)), @_vcc_ptr_eq_pure(*((curr_y->next)), old(_dryad_S12, *((curr_y->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#curr_y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, z)), ==(*((z->key)), old(_dryad_S12, *((z->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(L#z, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, z)), @_vcc_ptr_eq_pure(*((z->next)), old(_dryad_S12, *((z->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, last_z)), ==(*((last_z->key)), old(_dryad_S12, *((last_z->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(L#last_z, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, last_z)), @_vcc_ptr_eq_pure(*((last_z->next)), old(_dryad_S12, *((last_z->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(L#last_z, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, y)), ==(*((y->key)), old(_dryad_S12, *((y->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(P#y, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, y)), @_vcc_ptr_eq_pure(*((y->next)), old(_dryad_S12, *((y->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(P#y, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node);
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, x)), ==(*((x->key)), old(_dryad_S12, *((x->key))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) == $rd_inv(SL#_dryad_S12, s_node.key, $phys_ptr_cast(P#x, ^s_node));
            // assume ==>(!(@_vcc_ptr_eq_pure(tmp, x)), @_vcc_ptr_eq_pure(*((x->next)), old(_dryad_S12, *((x->next))))); 
            assume !($phys_ptr_cast(L#tmp, ^s_node) == $phys_ptr_cast(P#x, ^s_node)) ==> $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) == $rd_phys_ptr(SL#_dryad_S12, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node);
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_keys(curr_y3), @_vcc_intset_union(sll_keys(*((curr_y3->next))), @_vcc_intset_singleton(*((curr_y3->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_list_len_next(curr_y3), unchecked+(sll_list_len_next(*((curr_y3->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(rsrtl(curr_y3), &&(&&(rsrtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, rsrtl_reach(*((curr_y3->next)))))), >=(*((curr_y3->key)), sll_max_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(rsrtl_reach(curr_y3), @_vcc_oset_union(rsrtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll(curr_y3), &&(sll(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, sll_reach(*((curr_y3->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(sll_reach(curr_y3), @_vcc_oset_union(sll_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_max_key(curr_y3), @\int_max(*((curr_y3->key)), sll_max_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(sll_min_key(curr_y3), @\int_min(*((curr_y3->key)), sll_min_key(*((curr_y3->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y3), @_vcc_ptr_neq_null(*((curr_y3->next)))), ==(srtl(curr_y3), &&(&&(srtl(*((curr_y3->next))), unchecked!(@_vcc_oset_in(curr_y3, srtl_reach(*((curr_y3->next)))))), <=(*((curr_y3->key)), sll_min_key(*((curr_y3->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_y3, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_y3, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y3), ==(srtl_reach(curr_y3), @_vcc_oset_union(srtl_reach(*((curr_y3->next))), @_vcc_oset_singleton(curr_y3)))); 
            assume $non_null($phys_ptr_cast(SL#curr_y3, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_y3, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_y3, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_y3, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_keys(curr_x2), @_vcc_intset_union(sll_keys(*((curr_x2->next))), @_vcc_intset_singleton(*((curr_x2->key)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_list_len_next(curr_x2), unchecked+(sll_list_len_next(*((curr_x2->next))), 1))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(rsrtl(curr_x2), &&(&&(rsrtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, rsrtl_reach(*((curr_x2->next)))))), >=(*((curr_x2->key)), sll_max_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(rsrtl_reach(curr_x2), @_vcc_oset_union(rsrtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll(curr_x2), &&(sll(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, sll_reach(*((curr_x2->next)))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(sll_reach(curr_x2), @_vcc_oset_union(sll_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_max_key(curr_x2), @\int_max(*((curr_x2->key)), sll_max_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(sll_min_key(curr_x2), @\int_min(*((curr_x2->key)), sll_min_key(*((curr_x2->next)))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x2), @_vcc_ptr_neq_null(*((curr_x2->next)))), ==(srtl(curr_x2), &&(&&(srtl(*((curr_x2->next))), unchecked!(@_vcc_oset_in(curr_x2, srtl_reach(*((curr_x2->next)))))), <=(*((curr_x2->key)), sll_min_key(*((curr_x2->next))))))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(SL#curr_x2, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(SL#curr_x2, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x2), ==(srtl_reach(curr_x2), @_vcc_oset_union(srtl_reach(*((curr_x2->next))), @_vcc_oset_singleton(curr_x2)))); 
            assume $non_null($phys_ptr_cast(SL#curr_x2, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(SL#curr_x2, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(SL#curr_x2, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(SL#curr_x2, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_keys(tmp), @_vcc_intset_union(sll_keys(*((tmp->next))), @_vcc_intset_singleton(*((tmp->key)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#tmp, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_list_len_next(tmp), unchecked+(sll_list_len_next(*((tmp->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#tmp, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(rsrtl(tmp), &&(&&(rsrtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, rsrtl_reach(*((tmp->next)))))), >=(*((tmp->key)), sll_max_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(rsrtl_reach(tmp), @_vcc_oset_union(rsrtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll(tmp), &&(sll(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, sll_reach(*((tmp->next)))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(sll_reach(tmp), @_vcc_oset_union(sll_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_max_key(tmp), @\int_max(*((tmp->key)), sll_max_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(sll_min_key(tmp), @\int_min(*((tmp->key)), sll_min_key(*((tmp->next)))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#tmp, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(tmp), @_vcc_ptr_neq_null(*((tmp->next)))), ==(srtl(tmp), &&(&&(srtl(*((tmp->next))), unchecked!(@_vcc_oset_in(tmp, srtl_reach(*((tmp->next)))))), <=(*((tmp->key)), sll_min_key(*((tmp->next))))))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#tmp, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#tmp, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(tmp), ==(srtl_reach(tmp), @_vcc_oset_union(srtl_reach(*((tmp->next))), @_vcc_oset_singleton(tmp)))); 
            assume $non_null($phys_ptr_cast(L#tmp, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#tmp, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#tmp, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#tmp, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg(z, last_z), &&(sll_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, sll_lseg_reach(*((z->next)), last_z)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_reach(z, last_z), @_vcc_oset_union(sll_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_keys(z, last_z), @_vcc_intset_union(sll_lseg_keys(*((z->next)), last_z), @_vcc_intset_singleton(*((z->key)))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(sll_lseg_len_next(z, last_z), unchecked+(sll_lseg_len_next(*((z->next)), last_z), 1))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_max_key(z, last_z), @\int_max(*((z->key)), sll_lseg_max_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(sll_lseg_min_key(z, last_z), @\int_min(*((z->key)), sll_lseg_min_key(*((z->next)), last_z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), @_vcc_ptr_neq_pure(*((z->next)), last_z)), ==(srtl_lseg(z, last_z), &&(&&(srtl_lseg(*((z->next)), last_z), unchecked!(@_vcc_oset_in(z, srtl_lseg_reach(*((z->next)), last_z)))), <=(*((z->key)), sll_lseg_min_key(*((z->next)), last_z))))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_pure(z, last_z)), ==(srtl_lseg_reach(z, last_z), @_vcc_oset_union(srtl_lseg_reach(*((z->next)), last_z), @_vcc_oset_singleton(z)))); 
            assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $phys_ptr_cast(L#z, ^s_node) != $phys_ptr_cast(L#last_z, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(L#z, ^s_node), $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node), $phys_ptr_cast(L#last_z, ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg(x, curr_x), &&(sll_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, sll_lseg_reach(*((x->next)), curr_x)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_reach(x, curr_x), @_vcc_oset_union(sll_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_keys(x, curr_x), @_vcc_intset_union(sll_lseg_keys(*((x->next)), curr_x), @_vcc_intset_singleton(*((x->key)))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(sll_lseg_len_next(x, curr_x), unchecked+(sll_lseg_len_next(*((x->next)), curr_x), 1))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_max_key(x, curr_x), @\int_max(*((x->key)), sll_lseg_max_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(sll_lseg_min_key(x, curr_x), @\int_min(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), @_vcc_ptr_neq_pure(*((x->next)), curr_x)), ==(srtl_lseg(x, curr_x), &&(&&(srtl_lseg(*((x->next)), curr_x), unchecked!(@_vcc_oset_in(x, srtl_lseg_reach(*((x->next)), curr_x)))), <=(*((x->key)), sll_lseg_min_key(*((x->next)), curr_x))))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_pure(x, curr_x)), ==(srtl_lseg_reach(x, curr_x), @_vcc_oset_union(srtl_lseg_reach(*((x->next)), curr_x), @_vcc_oset_singleton(x)))); 
            assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $phys_ptr_cast(P#x, ^s_node) != $phys_ptr_cast(L#curr_x, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#x, ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node), $phys_ptr_cast(L#curr_x, ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg(y, curr_y), &&(sll_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, sll_lseg_reach(*((y->next)), curr_y)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_reach(y, curr_y), @_vcc_oset_union(sll_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_keys(y, curr_y), @_vcc_intset_union(sll_lseg_keys(*((y->next)), curr_y), @_vcc_intset_singleton(*((y->key)))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_keys($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_lseg_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(sll_lseg_len_next(y, curr_y), unchecked+(sll_lseg_len_next(*((y->next)), curr_y), 1))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_len_next($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_lseg_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), 1);
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_max_key(y, curr_y), @\int_max(*((y->key)), sll_lseg_max_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_max_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(sll_lseg_min_key(y, curr_y), @\int_min(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#sll_lseg_min_key($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), @_vcc_ptr_neq_pure(*((y->next)), curr_y)), ==(srtl_lseg(y, curr_y), &&(&&(srtl_lseg(*((y->next)), curr_y), unchecked!(@_vcc_oset_in(y, srtl_lseg_reach(*((y->next)), curr_y)))), <=(*((y->key)), sll_lseg_min_key(*((y->next)), curr_y))))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) && $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl_lseg($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_lseg_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)));
            // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_pure(y, curr_y)), ==(srtl_lseg_reach(y, curr_y), @_vcc_oset_union(srtl_lseg_reach(*((y->next)), curr_y), @_vcc_oset_singleton(y)))); 
            assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $phys_ptr_cast(P#y, ^s_node) != $phys_ptr_cast(L#curr_y, ^s_node) ==> F#srtl_lseg_reach($s, $phys_ptr_cast(P#y, ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_lseg_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node), $phys_ptr_cast(L#curr_y, ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
            // assume ==>(@_vcc_ptr_neq_null(curr_x), &&(@_vcc_mutable(@state, curr_x), @writes_check(curr_x))); 
            assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_x, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_x, ^s_node));
            // assume ==>(@_vcc_ptr_neq_null(curr_y), &&(@_vcc_mutable(@state, curr_y), @writes_check(curr_y))); 
            assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#curr_y, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#curr_y, ^s_node));
            // assume ==>(@_vcc_ptr_neq_null(last_z), &&(@_vcc_mutable(@state, last_z), @writes_check(last_z))); 
            assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> $mutable($s, $phys_ptr_cast(L#last_z, ^s_node)) && $top_writable($s, #wrTime$3^3.3, $phys_ptr_cast(L#last_z, ^s_node));
        }
        else
        {
          anon6:
            // assert @_vcc_possibly_unreachable; 
            assert {:PossiblyUnreachable true} true;
            // goto #break_3; 
            goto #break_3;
        }

      #continue_3:
        assume true;
    }

  anon11:
    assume $full_stop_ext(#tok$3^35.3, $s);

  #break_3:
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_keys(curr_x), @_vcc_intset_union(sll_keys(*((curr_x->next))), @_vcc_intset_singleton(*((curr_x->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_list_len_next(curr_x), unchecked+(sll_list_len_next(*((curr_x->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(rsrtl(curr_x), &&(&&(rsrtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, rsrtl_reach(*((curr_x->next)))))), >=(*((curr_x->key)), sll_max_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(rsrtl_reach(curr_x), @_vcc_oset_union(rsrtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll(curr_x), &&(sll(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, sll_reach(*((curr_x->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(sll_reach(curr_x), @_vcc_oset_union(sll_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_max_key(curr_x), @\int_max(*((curr_x->key)), sll_max_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(sll_min_key(curr_x), @\int_min(*((curr_x->key)), sll_min_key(*((curr_x->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_x), @_vcc_ptr_neq_null(*((curr_x->next)))), ==(srtl(curr_x), &&(&&(srtl(*((curr_x->next))), unchecked!(@_vcc_oset_in(curr_x, srtl_reach(*((curr_x->next)))))), <=(*((curr_x->key)), sll_min_key(*((curr_x->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_x), ==(srtl_reach(curr_x), @_vcc_oset_union(srtl_reach(*((curr_x->next))), @_vcc_oset_singleton(curr_x)))); 
    assume $non_null($phys_ptr_cast(L#curr_x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_keys(curr_y), @_vcc_intset_union(sll_keys(*((curr_y->next))), @_vcc_intset_singleton(*((curr_y->key)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_list_len_next(curr_y), unchecked+(sll_list_len_next(*((curr_y->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(rsrtl(curr_y), &&(&&(rsrtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, rsrtl_reach(*((curr_y->next)))))), >=(*((curr_y->key)), sll_max_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(rsrtl_reach(curr_y), @_vcc_oset_union(rsrtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll(curr_y), &&(sll(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, sll_reach(*((curr_y->next)))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(sll_reach(curr_y), @_vcc_oset_union(sll_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_max_key(curr_y), @\int_max(*((curr_y->key)), sll_max_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(sll_min_key(curr_y), @\int_min(*((curr_y->key)), sll_min_key(*((curr_y->next)))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(curr_y), @_vcc_ptr_neq_null(*((curr_y->next)))), ==(srtl(curr_y), &&(&&(srtl(*((curr_y->next))), unchecked!(@_vcc_oset_in(curr_y, srtl_reach(*((curr_y->next)))))), <=(*((curr_y->key)), sll_min_key(*((curr_y->next))))))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#curr_y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#curr_y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#curr_y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(curr_y), ==(srtl_reach(curr_y), @_vcc_oset_union(srtl_reach(*((curr_y->next))), @_vcc_oset_singleton(curr_y)))); 
    assume $non_null($phys_ptr_cast(L#curr_y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#curr_y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#curr_y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#curr_y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_keys(z), @_vcc_intset_union(sll_keys(*((z->next))), @_vcc_intset_singleton(*((z->key)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_list_len_next(z), unchecked+(sll_list_len_next(*((z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(rsrtl(z), &&(&&(rsrtl(*((z->next))), unchecked!(@_vcc_oset_in(z, rsrtl_reach(*((z->next)))))), >=(*((z->key)), sll_max_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(rsrtl_reach(z), @_vcc_oset_union(rsrtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll(z), &&(sll(*((z->next))), unchecked!(@_vcc_oset_in(z, sll_reach(*((z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(sll_reach(z), @_vcc_oset_union(sll_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_max_key(z), @\int_max(*((z->key)), sll_max_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(sll_min_key(z), @\int_min(*((z->key)), sll_min_key(*((z->next)))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(z), @_vcc_ptr_neq_null(*((z->next)))), ==(srtl(z), &&(&&(srtl(*((z->next))), unchecked!(@_vcc_oset_in(z, srtl_reach(*((z->next)))))), <=(*((z->key)), sll_min_key(*((z->next))))))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(z), ==(srtl_reach(z), @_vcc_oset_union(srtl_reach(*((z->next))), @_vcc_oset_singleton(z)))); 
    assume $non_null($phys_ptr_cast(L#z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_keys(last_z), @_vcc_intset_union(sll_keys(*((last_z->next))), @_vcc_intset_singleton(*((last_z->key)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(L#last_z, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_list_len_next(last_z), unchecked+(sll_list_len_next(*((last_z->next))), 1))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(L#last_z, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(rsrtl(last_z), &&(&&(rsrtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, rsrtl_reach(*((last_z->next)))))), >=(*((last_z->key)), sll_max_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(rsrtl_reach(last_z), @_vcc_oset_union(rsrtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll(last_z), &&(sll(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, sll_reach(*((last_z->next)))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(sll_reach(last_z), @_vcc_oset_union(sll_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_max_key(last_z), @\int_max(*((last_z->key)), sll_max_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(sll_min_key(last_z), @\int_min(*((last_z->key)), sll_min_key(*((last_z->next)))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(L#last_z, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(last_z), @_vcc_ptr_neq_null(*((last_z->next)))), ==(srtl(last_z), &&(&&(srtl(*((last_z->next))), unchecked!(@_vcc_oset_in(last_z, srtl_reach(*((last_z->next)))))), <=(*((last_z->key)), sll_min_key(*((last_z->next))))))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(L#last_z, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(L#last_z, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(L#last_z, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(last_z), ==(srtl_reach(last_z), @_vcc_oset_union(srtl_reach(*((last_z->next))), @_vcc_oset_singleton(last_z)))); 
    assume $non_null($phys_ptr_cast(L#last_z, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(L#last_z, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(L#last_z, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(L#last_z, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_keys(y), @_vcc_intset_union(sll_keys(*((y->next))), @_vcc_intset_singleton(*((y->key)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#y, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_list_len_next(y), unchecked+(sll_list_len_next(*((y->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#y, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(rsrtl(y), &&(&&(rsrtl(*((y->next))), unchecked!(@_vcc_oset_in(y, rsrtl_reach(*((y->next)))))), >=(*((y->key)), sll_max_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(rsrtl_reach(y), @_vcc_oset_union(rsrtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll(y), &&(sll(*((y->next))), unchecked!(@_vcc_oset_in(y, sll_reach(*((y->next)))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#y, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(sll_reach(y), @_vcc_oset_union(sll_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_max_key(y), @\int_max(*((y->key)), sll_max_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(sll_min_key(y), @\int_min(*((y->key)), sll_min_key(*((y->next)))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#y, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(y), @_vcc_ptr_neq_null(*((y->next)))), ==(srtl(y), &&(&&(srtl(*((y->next))), unchecked!(@_vcc_oset_in(y, srtl_reach(*((y->next)))))), <=(*((y->key)), sll_min_key(*((y->next))))))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#y, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#y, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#y, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(y), ==(srtl_reach(y), @_vcc_oset_union(srtl_reach(*((y->next))), @_vcc_oset_singleton(y)))); 
    assume $non_null($phys_ptr_cast(P#y, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#y, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#y, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#y, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_keys(x), @_vcc_intset_union(sll_keys(*((x->next))), @_vcc_intset_singleton(*((x->key)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_keys($s, $phys_ptr_cast(P#x, ^s_node)) == $intset_union(F#sll_keys($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $intset_singleton($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_list_len_next(x), unchecked+(sll_list_len_next(*((x->next))), 1))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_list_len_next($s, $phys_ptr_cast(P#x, ^s_node)) == $unchk_add(^^nat, F#sll_list_len_next($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), 1);
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(rsrtl(x), &&(&&(rsrtl(*((x->next))), unchecked!(@_vcc_oset_in(x, rsrtl_reach(*((x->next)))))), >=(*((x->key)), sll_max_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#rsrtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#rsrtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) >= F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(rsrtl_reach(x), @_vcc_oset_union(rsrtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#rsrtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#rsrtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll(x), &&(sll(*((x->next))), unchecked!(@_vcc_oset_in(x, sll_reach(*((x->next)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll($s, $phys_ptr_cast(P#x, ^s_node)) == (F#sll($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(sll_reach(x), @_vcc_oset_union(sll_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#sll_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#sll_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_max_key(x), @\int_max(*((x->key)), sll_max_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_max_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_max($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_max_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(sll_min_key(x), @\int_min(*((x->key)), sll_min_key(*((x->next)))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#sll_min_key($s, $phys_ptr_cast(P#x, ^s_node)) == $int_min($rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)), F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(&&(@_vcc_ptr_neq_null(x), @_vcc_ptr_neq_null(*((x->next)))), ==(srtl(x), &&(&&(srtl(*((x->next))), unchecked!(@_vcc_oset_in(x, srtl_reach(*((x->next)))))), <=(*((x->key)), sll_min_key(*((x->next))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) && $non_null($rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) ==> F#srtl($s, $phys_ptr_cast(P#x, ^s_node)) == (F#srtl($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)) && !$oset_in($phys_ptr_cast(P#x, ^s_node), F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node))) && $rd_inv($s, s_node.key, $phys_ptr_cast(P#x, ^s_node)) <= F#sll_min_key($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(srtl_reach(x), @_vcc_oset_union(srtl_reach(*((x->next))), @_vcc_oset_singleton(x)))); 
    assume $non_null($phys_ptr_cast(P#x, ^s_node)) ==> F#srtl_reach($s, $phys_ptr_cast(P#x, ^s_node)) == $oset_union(F#srtl_reach($s, $rd_phys_ptr($s, s_node.next, $phys_ptr_cast(P#x, ^s_node), ^s_node)), $oset_singleton($phys_ptr_cast(P#x, ^s_node)));
    // return z; 
    $result := $phys_ptr_cast(L#z, ^s_node);
    assume true;
    assert $position_marker();
    goto #exit;

  anon12:
    // skip

  #exit:
}



axiom (forall Q#__vcc_state$2^687.9#tc2#1682: $state, Q#x$2^687.9#dt1#1624: $ptr :: {:weight 10} { F#srtl(Q#__vcc_state$2^687.9#tc2#1682, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) } { F#sll(Q#__vcc_state$2^687.9#tc2#1682, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) } $good_state(Q#__vcc_state$2^687.9#tc2#1682) && true ==> F#srtl(Q#__vcc_state$2^687.9#tc2#1682, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)) ==> F#sll(Q#__vcc_state$2^687.9#tc2#1682, $phys_ptr_cast(Q#x$2^687.9#dt1#1624, ^s_node)));

axiom (forall Q#__vcc_state$2^688.9#tc2#1683: $state, Q#x$2^688.9#dt1#1625: $ptr :: {:weight 10} { F#rsrtl(Q#__vcc_state$2^688.9#tc2#1683, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) } { F#sll(Q#__vcc_state$2^688.9#tc2#1683, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) } $good_state(Q#__vcc_state$2^688.9#tc2#1683) && true ==> F#rsrtl(Q#__vcc_state$2^688.9#tc2#1683, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)) ==> F#sll(Q#__vcc_state$2^688.9#tc2#1683, $phys_ptr_cast(Q#x$2^688.9#dt1#1625, ^s_node)));

axiom (forall Q#__vcc_state$2^689.9#tc2#1684: $state, Q#x$2^689.9#dt1#1626: $ptr :: {:weight 10} { F#sll_reach(Q#__vcc_state$2^689.9#tc2#1684, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) } { F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1684, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) } $good_state(Q#__vcc_state$2^689.9#tc2#1684) && true ==> F#sll_reach(Q#__vcc_state$2^689.9#tc2#1684, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)) == F#srtl_reach(Q#__vcc_state$2^689.9#tc2#1684, $phys_ptr_cast(Q#x$2^689.9#dt1#1626, ^s_node)));

axiom (forall Q#__vcc_state$2^690.9#tc2#1685: $state, Q#x$2^690.9#dt1#1627: $ptr :: {:weight 10} { F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1685, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) } { F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1685, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) } $good_state(Q#__vcc_state$2^690.9#tc2#1685) && true ==> F#srtl_reach(Q#__vcc_state$2^690.9#tc2#1685, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)) == F#rsrtl_reach(Q#__vcc_state$2^690.9#tc2#1685, $phys_ptr_cast(Q#x$2^690.9#dt1#1627, ^s_node)));

axiom (forall Q#__vcc_state$2^691.9#tc2#1686: $state, Q#x$2^691.9#dt1#1628: $ptr, Q#y$2^691.9#dt1#1629: $ptr :: {:weight 10} { F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1686, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) } { F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1686, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) } $good_state(Q#__vcc_state$2^691.9#tc2#1686) && true ==> F#sll_lseg_reach(Q#__vcc_state$2^691.9#tc2#1686, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)) == F#srtl_lseg_reach(Q#__vcc_state$2^691.9#tc2#1686, $phys_ptr_cast(Q#x$2^691.9#dt1#1628, ^s_node), $phys_ptr_cast(Q#y$2^691.9#dt1#1629, ^s_node)));

const unique l#public: $label;

axiom $type_code_is(2, ^$#state_t);

const unique #tok$3^79.5: $token;

const unique #tok$3^77.5: $token;

const unique #tok$3^75.5: $token;

const unique #tok$3^70.14: $token;

const unique #tok$3^35.3: $token;

const unique #tok$3^31.3: $token;

const unique #tok$3^29.3: $token;

const unique #tok$3^23.14: $token;

const unique #tok$3^17.56: $token;

const unique #tok$3^17.41: $token;

const unique #tok$4^0.0: $token;

const unique #file^?3Cno?20file?3E: $token;

axiom $file_name_is(4, #file^?3Cno?20file?3E);

const unique #tok$3^3.3: $token;

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgrass?5Csls_pairwise_sum.c: $token;

axiom $file_name_is(3, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cgrass?5Csls_pairwise_sum.c);

const unique #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgrass?5Cdryad_sls.h: $token;

axiom $file_name_is(2, #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cgrass?5Cdryad_sls.h);

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h: $token;

axiom $file_name_is(1, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h);

const unique #distTp1: $ctype;

axiom #distTp1 == $ptr_to(^s_node);
