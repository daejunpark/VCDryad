axiom $arch_ptr_size == 8;

axiom $arch_spec_ptr_start == $max.u8;

const unique ^$##thread_id: $ctype;

axiom $def_math_type(^$##thread_id);

type $##thread_id;

const unique ^$##club: $ctype;

axiom $def_math_type(^$##club);

type $##club;

const unique ^b_node: $ctype;

axiom $is_span_sequential(^b_node);

axiom $def_struct_type(^b_node, 24, false, false);

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2(#s1, #s2, #p, ^b_node) } $inv2(#s1, #s2, #p, ^b_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall #s1: $state, #s2: $state, #p: $ptr :: { $inv2_without_lemmas(#s1, #s2, #p, ^b_node) } $inv2_without_lemmas(#s1, #s2, #p, ^b_node) == $set_eq($owns(#s2, #p), $set_empty()));

axiom (forall p: $ptr, q: $ptr, s: $state :: { $in(q, $composite_extent(s, p, ^b_node)) } $in(q, $composite_extent(s, p, ^b_node)) == (q == p));

const unique b_node.left: $field;

axiom $def_phys_field(^b_node, b_node.left, $ptr_to(^b_node), false, 0);

const unique b_node.right: $field;

axiom $def_phys_field(^b_node, b_node.right, $ptr_to(^b_node), false, 8);

const unique b_node.key: $field;

axiom $def_phys_field(^b_node, b_node.key, ^^i4, false, 16);

function F#glob_reach() : $oset;

const unique cf#glob_reach: $pure_function;

axiom $function_arg_type(cf#glob_reach, 0, ^$#oset);

procedure glob_reach() returns ($result: $oset);
  free ensures $result == F#glob_reach();
  free ensures $call_transition(old($s), $s);



const unique ^$#_purecall_handler#1: $ctype;

axiom $def_fnptr_type(^$#_purecall_handler#1);

type $#_purecall_handler#1;

const unique ^$#_invalid_parameter_handler#2: $ctype;

axiom $def_fnptr_type(^$#_invalid_parameter_handler#2);

type $#_invalid_parameter_handler#2;

const unique ^$#bst_remove_root_rec.c..36261#3: $ctype;

axiom $def_fnptr_type(^$#bst_remove_root_rec.c..36261#3);

type $#bst_remove_root_rec.c..36261#3;

const unique ^$#_PtFuncCompare#4: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#4);

type $#_PtFuncCompare#4;

const unique ^$#_PtFuncCompare#5: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#5);

type $#_PtFuncCompare#5;

const unique ^$#_PtFuncCompare#6: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#6);

type $#_PtFuncCompare#6;

const unique ^$#_PtFuncCompare#7: $ctype;

axiom $def_fnptr_type(^$#_PtFuncCompare#7);

type $#_PtFuncCompare#7;

const unique ^$#_onexit_t#8: $ctype;

axiom $def_fnptr_type(^$#_onexit_t#8);

type $#_onexit_t#8;

function F##int_max(SP#x: int, SP#y: int) : int;

const unique cf##int_max: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_max(SP#x, SP#y) } $in_range_i4(F##int_max(SP#x, SP#y)));

axiom $function_arg_type(cf##int_max, 0, ^^i4);

axiom $function_arg_type(cf##int_max, 1, ^^i4);

axiom $function_arg_type(cf##int_max, 2, ^^i4);

procedure #int_max(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_max(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F##int_min(SP#x: int, SP#y: int) : int;

const unique cf##int_min: $pure_function;

axiom (forall SP#x: int, SP#y: int :: { F##int_min(SP#x, SP#y) } $in_range_i4(F##int_min(SP#x, SP#y)));

axiom $function_arg_type(cf##int_min, 0, ^^i4);

axiom $function_arg_type(cf##int_min, 1, ^^i4);

axiom $function_arg_type(cf##int_min, 2, ^^i4);

procedure #int_min(SP#x: int, SP#y: int) returns ($result: int);
  free ensures $in_range_i4($result);
  free ensures $result == F##int_min(SP#x, SP#y);
  free ensures $call_transition(old($s), $s);



function F#bst(#s: $state, SP#root: $ptr) : bool;

const unique cf#bst: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#bst(#s, SP#root) } 1 < $decreases_level ==> $is_null($phys_ptr_cast(SP#root, ^b_node)) ==> F#bst(#s, SP#root));

axiom $function_arg_type(cf#bst, 0, ^^bool);

axiom $function_arg_type(cf#bst, 1, $ptr_to(^b_node));

procedure bst(SP#root: $ptr) returns ($result: bool);
  ensures $is_null($phys_ptr_cast(SP#root, ^b_node)) ==> $result;
  free ensures $result == F#bst($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#bst_reach(#s: $state, SP#root: $ptr) : $oset;

const unique cf#bst_reach: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#bst_reach(#s, SP#root) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#root, ^b_node)) ==> $oset_in($phys_ptr_cast(SP#root, ^b_node), F#bst_reach(#s, SP#root))) && ($is_null($phys_ptr_cast(SP#root, ^b_node)) ==> F#bst_reach(#s, SP#root) == $oset_empty()));

axiom $function_arg_type(cf#bst_reach, 0, ^$#oset);

axiom $function_arg_type(cf#bst_reach, 1, $ptr_to(^b_node));

procedure bst_reach(SP#root: $ptr) returns ($result: $oset);
  ensures $non_null($phys_ptr_cast(SP#root, ^b_node)) ==> $oset_in($phys_ptr_cast(SP#root, ^b_node), $result);
  ensures $is_null($phys_ptr_cast(SP#root, ^b_node)) ==> $result == $oset_empty();
  free ensures $result == F#bst_reach($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#bst_keys(#s: $state, SP#root: $ptr) : $intset;

const unique cf#bst_keys: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#bst_keys(#s, SP#root) } 1 < $decreases_level ==> ($non_null($phys_ptr_cast(SP#root, ^b_node)) ==> $intset_in($rd_inv(#s, b_node.key, $phys_ptr_cast(SP#root, ^b_node)), F#bst_keys(#s, SP#root))) && ($is_null($phys_ptr_cast(SP#root, ^b_node)) ==> F#bst_keys(#s, SP#root) == $intset_empty()));

axiom $function_arg_type(cf#bst_keys, 0, ^$#intset);

axiom $function_arg_type(cf#bst_keys, 1, $ptr_to(^b_node));

procedure bst_keys(SP#root: $ptr) returns ($result: $intset);
  ensures $non_null($phys_ptr_cast(SP#root, ^b_node)) ==> $intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(SP#root, ^b_node)), $result);
  ensures $is_null($phys_ptr_cast(SP#root, ^b_node)) ==> $result == $intset_empty();
  free ensures $result == F#bst_keys($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#bst_min_key(#s: $state, SP#root: $ptr) : int;

const unique cf#bst_min_key: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#bst_min_key(#s, SP#root) } 1 < $decreases_level ==> $in_range_i4(F#bst_min_key(#s, SP#root)) && ($non_null($phys_ptr_cast(SP#root, ^b_node)) && $is_null($rd_phys_ptr(#s, b_node.left, $phys_ptr_cast(SP#root, ^b_node), ^b_node)) && $is_null($rd_phys_ptr(#s, b_node.right, $phys_ptr_cast(SP#root, ^b_node), ^b_node)) ==> F#bst_min_key(#s, SP#root) == $rd_inv(#s, b_node.key, $phys_ptr_cast(SP#root, ^b_node))));

axiom $function_arg_type(cf#bst_min_key, 0, ^^i4);

axiom $function_arg_type(cf#bst_min_key, 1, $ptr_to(^b_node));

procedure bst_min_key(SP#root: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#root, ^b_node)) && $is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SP#root, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SP#root, ^b_node), ^b_node)) ==> $result == $rd_inv($s, b_node.key, $phys_ptr_cast(SP#root, ^b_node));
  free ensures $result == F#bst_min_key($s, SP#root);
  free ensures $call_transition(old($s), $s);



function F#bst_max_key(#s: $state, SP#root: $ptr) : int;

const unique cf#bst_max_key: $pure_function;

axiom (forall #s: $state, SP#root: $ptr :: { F#bst_max_key(#s, SP#root) } 1 < $decreases_level ==> $in_range_i4(F#bst_max_key(#s, SP#root)) && ($non_null($phys_ptr_cast(SP#root, ^b_node)) && $is_null($rd_phys_ptr(#s, b_node.left, $phys_ptr_cast(SP#root, ^b_node), ^b_node)) && $is_null($rd_phys_ptr(#s, b_node.right, $phys_ptr_cast(SP#root, ^b_node), ^b_node)) ==> F#bst_max_key(#s, SP#root) == $rd_inv(#s, b_node.key, $phys_ptr_cast(SP#root, ^b_node))));

axiom $function_arg_type(cf#bst_max_key, 0, ^^i4);

axiom $function_arg_type(cf#bst_max_key, 1, $ptr_to(^b_node));

procedure bst_max_key(SP#root: $ptr) returns ($result: int);
  free ensures $in_range_i4($result);
  ensures $non_null($phys_ptr_cast(SP#root, ^b_node)) && $is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SP#root, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SP#root, ^b_node), ^b_node)) ==> $result == $rd_inv($s, b_node.key, $phys_ptr_cast(SP#root, ^b_node));
  free ensures $result == F#bst_max_key($s, SP#root);
  free ensures $call_transition(old($s), $s);



procedure bst_remove_root_rec(P#x: $ptr) returns ($result: $ptr);
  requires $non_null($phys_ptr_cast(P#x, ^b_node));
  requires F#bst($s, $phys_ptr_cast(P#x, ^b_node));
  modifies $s, $cev_pc;
  ensures F#bst($s, $phys_ptr_cast($result, ^b_node));
  ensures F#bst_keys($s, $phys_ptr_cast($result, ^b_node)) == $intset_diff(F#bst_keys(old($s), $phys_ptr_cast(P#x, ^b_node)), $intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))));
  ensures F#bst_keys($s, $phys_ptr_cast($result, ^b_node)) == $intset_union(F#bst_keys(old($s), $rd_phys_ptr(old($s), b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys(old($s), $rd_phys_ptr(old($s), b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)));
  ensures F#bst_min_key($s, $phys_ptr_cast($result, ^b_node)) >= F#bst_min_key(old($s), $phys_ptr_cast(P#x, ^b_node));
  ensures F#bst_max_key($s, $phys_ptr_cast($result, ^b_node)) <= F#bst_max_key(old($s), $phys_ptr_cast(P#x, ^b_node));
  free ensures $writes_nothing(old($s), $s);
  free ensures $call_transition(old($s), $s);



implementation bst_remove_root_rec(P#x: $ptr) returns ($result: $ptr)
{
  var stmtexpr10#21: $state;
  var SL#_dryad_S5: $state;
  var stmtexpr9#20: $state;
  var SL#_dryad_S4: $state;
  var stmtexpr8#19: $oset;
  var res_bst_reach#2: $oset;
  var stmtexpr7#18: $state;
  var SL#_dryad_S3: $state;
  var stmtexpr6#17: $state;
  var SL#_dryad_S2: $state;
  var stmtexpr5#16: $state;
  var _dryad_S1#9: $state;
  var stmtexpr4#15: $state;
  var _dryad_S0#8: $state;
  var stmtexpr3#14: $ptr;
  var SL#right3: $ptr;
  var stmtexpr2#13: $ptr;
  var SL#right2: $ptr;
  var stmtexpr1#12: $ptr;
  var SL#x1: $ptr;
  var stmtexpr0#11: $ptr;
  var x0#7: $ptr;
  var right#6: $ptr;
  var left#5: $ptr;
  var L#right_left: $ptr;
  var L#right_right: $ptr;
  var L#tmp: $ptr;
  var stmtexpr2#10: $state;
  var _dryad_S1#4: $state;
  var stmtexpr1#9: $state;
  var _dryad_S0#3: $state;
  var stmtexpr0#8: $ptr;
  var x0#2: $ptr;
  var L#left: $ptr;
  var stmtexpr2#7: $state;
  var _dryad_S1#1: $state;
  var stmtexpr1#6: $state;
  var _dryad_S0#0: $state;
  var stmtexpr0#5: $ptr;
  var SL#x0: $ptr;
  var L#right: $ptr;
  var stmtexpr1#4: $state;
  var SL#_dryad_S1: $state;
  var stmtexpr0#3: $state;
  var SL#_dryad_S0: $state;
  var ite#1: bool;
  var stmtexpr1#23: $oset;
  var stmtexpr0#22: $oset;
  var SL#_dryad_G1: $oset;
  var SL#_dryad_G0: $oset;
  var #wrTime$3^5.3: int;
  var #stackframe: int;

  anon9:
    assume $function_entry($s);
    assume $full_stop_ext(#tok$3^5.3, $s);
    assume $can_use_all_frame_axioms($s);
    assume #wrTime$3^5.3 == $current_timestamp($s);
    assume $def_writes($s, #wrTime$3^5.3, (lambda #p: $ptr :: false));
    // assume true
    // assume @decreases_level_is(2147483647); 
    assume 2147483647 == $decreases_level;
    //  --- Dryad annotated function --- 
    // _math \oset _dryad_G0; 
    // _math \oset _dryad_G1; 
    // _dryad_G0 := bst_reach(x); 
    call SL#_dryad_G0 := bst_reach($phys_ptr_cast(P#x, ^b_node));
    assume $full_stop_ext(#tok$4^0.0, $s);
    // _math \oset stmtexpr0#22; 
    // stmtexpr0#22 := _dryad_G0; 
    stmtexpr0#22 := SL#_dryad_G0;
    // _dryad_G1 := _dryad_G0; 
    SL#_dryad_G1 := SL#_dryad_G0;
    // _math \oset stmtexpr1#23; 
    // stmtexpr1#23 := _dryad_G1; 
    stmtexpr1#23 := SL#_dryad_G1;
    // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
    assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
    // assume ==>(@_vcc_ptr_neq_null(x), &&(@_vcc_mutable(@state, x), @writes_check(x))); 
    assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> $mutable($s, $phys_ptr_cast(P#x, ^b_node)) && $top_writable($s, #wrTime$3^5.3, $phys_ptr_cast(P#x, ^b_node));
    // assume @_vcc_is_malloc_root(@state, x); 
    assume $is_malloc_root($s, $phys_ptr_cast(P#x, ^b_node));
    // _Bool ite#1; 
    // assert @reads_check_normal((x->left)); 
    assert $thread_local($s, $phys_ptr_cast(P#x, ^b_node));
    assume true;
    // if (@_vcc_ptr_eq_null(*((x->left)))) ...
    if ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))
    {
      anon1:
        // assert @_vcc_possibly_unreachable; 
        assert {:PossiblyUnreachable true} true;
        // assert @reads_check_normal((x->right)); 
        assert $thread_local($s, $phys_ptr_cast(P#x, ^b_node));
        // ite#1 := @_vcc_ptr_eq_null(*((x->right))); 
        ite#1 := $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node));
    }
    else
    {
      anon2:
        // assert @_vcc_possibly_unreachable; 
        assert {:PossiblyUnreachable true} true;
        // ite#1 := false; 
        ite#1 := false;
    }

  anon10:
    assume true;
    // if (ite#1) ...
    if (ite#1)
    {
      anon3:
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
        assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
        // _math \state _dryad_S0; 
        // _dryad_S0 := @_vcc_current_state(@state); 
        SL#_dryad_S0 := $current_state($s);
        // _math \state stmtexpr0#3; 
        // stmtexpr0#3 := _dryad_S0; 
        stmtexpr0#3 := SL#_dryad_S0;
        // void function
        // assert @writes_check(x); 
        assert $top_writable($s, #wrTime$3^5.3, $phys_ptr_cast(P#x, ^b_node));
        // assert @writes_check(@_vcc_extent(@state, x)); 
        assert (forall #writes$3^20.5: $ptr :: { $dont_instantiate(#writes$3^20.5) } $set_in(#writes$3^20.5, $extent($s, $phys_ptr_cast(P#x, ^b_node))) ==> $top_writable($s, #wrTime$3^5.3, #writes$3^20.5));
        // stmt _vcc_free(x); 
        call $free($phys_ptr_cast(P#x, ^b_node));
        assume $full_stop_ext(#tok$3^20.5, $s);
        // _math \state _dryad_S1; 
        // _dryad_S1 := @_vcc_current_state(@state); 
        SL#_dryad_S1 := $current_state($s);
        // _math \state stmtexpr1#4; 
        // stmtexpr1#4 := _dryad_S1; 
        stmtexpr1#4 := SL#_dryad_S1;
        // return (struct b_node*)@null; 
        $result := $phys_ptr_cast($null, ^b_node);
        assume true;
        assert $position_marker();
        goto #exit;
    }
    else
    {
      anon8:
        // assert @reads_check_normal((x->left)); 
        assert $thread_local($s, $phys_ptr_cast(P#x, ^b_node));
        assume true;
        // if (@_vcc_ptr_eq_null(*((x->left)))) ...
        if ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))
        {
          anon4:
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // struct b_node* right; 
            // struct b_node* x0; 
            // x0 := x; 
            SL#x0 := $phys_ptr_cast(P#x, ^b_node);
            // struct b_node* stmtexpr0#5; 
            // stmtexpr0#5 := x0; 
            stmtexpr0#5 := $phys_ptr_cast(SL#x0, ^b_node);
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assert @reads_check_normal((x->right)); 
            assert $thread_local($s, $phys_ptr_cast(P#x, ^b_node));
            // right := *((x->right)); 
            L#right := $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node);
            // assume ==>(@_vcc_ptr_neq_null(right), ==(bst(right), &&(&&(&&(&&(&&(&&(&&(bst(*((right->left))), bst(*((right->right)))), unchecked!(@_vcc_oset_in(right, @_vcc_oset_union(bst_reach(*((right->left))), bst_reach(*((right->right))))))), unchecked!(@_vcc_intset_in(*((right->key)), @_vcc_intset_union(bst_keys(*((right->left))), bst_keys(*((right->right))))))), @_vcc_oset_disjoint(bst_reach(*((right->left))), bst_reach(*((right->right))))), @_vcc_intset_disjoint(bst_keys(*((right->left))), bst_keys(*((right->right))))), ==>(@_vcc_ptr_neq_null(*((right->left))), <(bst_max_key(*((right->left))), *((right->key))))), ==>(@_vcc_ptr_neq_null(*((right->right))), <(*((right->key)), bst_min_key(*((right->right)))))))); 
            assume $non_null($phys_ptr_cast(L#right, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#right, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#right, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#right, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#right, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#right, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(right), ==(bst_reach(right), @_vcc_oset_union(@_vcc_oset_singleton(right), @_vcc_oset_union(bst_reach(*((right->left))), bst_reach(*((right->right))))))); 
            assume $non_null($phys_ptr_cast(L#right, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#right, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#right, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(right), ==(bst_keys(right), @_vcc_intset_union(@_vcc_intset_singleton(*((right->key))), @_vcc_intset_union(bst_keys(*((right->left))), bst_keys(*((right->right))))))); 
            assume $non_null($phys_ptr_cast(L#right, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#right, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#right, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(bst_max_key(right), @\int_max(*((right->key)), @\int_max(bst_max_key(*((right->left))), bst_max_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(bst_max_key(right), @\int_max(*((right->key)), bst_max_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(bst_max_key(right), @\int_max(*((right->key)), bst_max_key(*((right->right)))))))); 
            assume $non_null($phys_ptr_cast(L#right, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(bst_min_key(right), @\int_min(*((right->key)), @\int_min(bst_min_key(*((right->left))), bst_min_key(*((right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right->left))), @_vcc_ptr_eq_null(*((right->right)))), ==(bst_min_key(right), @\int_min(*((right->key)), bst_min_key(*((right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right->left))), @_vcc_ptr_neq_null(*((right->right)))), ==(bst_min_key(right), @\int_min(*((right->key)), bst_min_key(*((right->right)))))))); 
            assume $non_null($phys_ptr_cast(L#right, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
            assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
            // _math \state _dryad_S0#0; 
            // _dryad_S0#0 := @_vcc_current_state(@state); 
            _dryad_S0#0 := $current_state($s);
            // _math \state stmtexpr1#6; 
            // stmtexpr1#6 := _dryad_S0#0; 
            stmtexpr1#6 := _dryad_S0#0;
            // void function
            // assert @writes_check(x); 
            assert $top_writable($s, #wrTime$3^5.3, $phys_ptr_cast(P#x, ^b_node));
            // assert @writes_check(@_vcc_extent(@state, x)); 
            assert (forall #writes$3^24.5: $ptr :: { $dont_instantiate(#writes$3^24.5) } $set_in(#writes$3^24.5, $extent($s, $phys_ptr_cast(P#x, ^b_node))) ==> $top_writable($s, #wrTime$3^5.3, #writes$3^24.5));
            // stmt _vcc_free(x); 
            call $free($phys_ptr_cast(P#x, ^b_node));
            assume $full_stop_ext(#tok$3^24.5, $s);
            // _math \state _dryad_S1#1; 
            // _dryad_S1#1 := @_vcc_current_state(@state); 
            _dryad_S1#1 := $current_state($s);
            // _math \state stmtexpr2#7; 
            // stmtexpr2#7 := _dryad_S1#1; 
            stmtexpr2#7 := _dryad_S1#1;
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, bst_reach(x0)))), ==(old(_dryad_S0#0, bst(x0)), old(_dryad_S1#1, bst(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node))) ==> F#bst(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node)) == F#bst(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, bst_reach(x0)))), ==(old(_dryad_S0#0, bst_reach(x0)), old(_dryad_S1#1, bst_reach(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node))) ==> F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node)) == F#bst_reach(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, bst_reach(x0)))), ==(old(_dryad_S0#0, bst_keys(x0)), old(_dryad_S1#1, bst_keys(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node))) ==> F#bst_keys(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node)) == F#bst_keys(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, bst_reach(x0)))), ==(old(_dryad_S0#0, bst_max_key(x0)), old(_dryad_S1#1, bst_max_key(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node))) ==> F#bst_max_key(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node)) == F#bst_max_key(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, bst_reach(x0)))), ==(old(_dryad_S0#0, bst_min_key(x0)), old(_dryad_S1#1, bst_min_key(x0)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node))) ==> F#bst_min_key(_dryad_S0#0, $phys_ptr_cast(SL#x0, ^b_node)) == F#bst_min_key(_dryad_S1#1, $phys_ptr_cast(SL#x0, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, bst_reach(right)))), ==(old(_dryad_S0#0, bst(right)), old(_dryad_S1#1, bst(right)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#right, ^b_node))) ==> F#bst(_dryad_S0#0, $phys_ptr_cast(L#right, ^b_node)) == F#bst(_dryad_S1#1, $phys_ptr_cast(L#right, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, bst_reach(right)))), ==(old(_dryad_S0#0, bst_reach(right)), old(_dryad_S1#1, bst_reach(right)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#right, ^b_node))) ==> F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#right, ^b_node)) == F#bst_reach(_dryad_S1#1, $phys_ptr_cast(L#right, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, bst_reach(right)))), ==(old(_dryad_S0#0, bst_keys(right)), old(_dryad_S1#1, bst_keys(right)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#right, ^b_node))) ==> F#bst_keys(_dryad_S0#0, $phys_ptr_cast(L#right, ^b_node)) == F#bst_keys(_dryad_S1#1, $phys_ptr_cast(L#right, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, bst_reach(right)))), ==(old(_dryad_S0#0, bst_max_key(right)), old(_dryad_S1#1, bst_max_key(right)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#right, ^b_node))) ==> F#bst_max_key(_dryad_S0#0, $phys_ptr_cast(L#right, ^b_node)) == F#bst_max_key(_dryad_S1#1, $phys_ptr_cast(L#right, ^b_node));
            // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#0, bst_reach(right)))), ==(old(_dryad_S0#0, bst_min_key(right)), old(_dryad_S1#1, bst_min_key(right)))); 
            assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#0, $phys_ptr_cast(L#right, ^b_node))) ==> F#bst_min_key(_dryad_S0#0, $phys_ptr_cast(L#right, ^b_node)) == F#bst_min_key(_dryad_S1#1, $phys_ptr_cast(L#right, ^b_node));
            // return right; 
            $result := $phys_ptr_cast(L#right, ^b_node);
            assume true;
            assert $position_marker();
            goto #exit;
        }
        else
        {
          anon7:
            // assert @reads_check_normal((x->right)); 
            assert $thread_local($s, $phys_ptr_cast(P#x, ^b_node));
            assume true;
            // if (@_vcc_ptr_eq_null(*((x->right)))) ...
            if ($is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))
            {
              anon5:
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // struct b_node* left; 
                // struct b_node* x0#2; 
                // x0#2 := x; 
                x0#2 := $phys_ptr_cast(P#x, ^b_node);
                // struct b_node* stmtexpr0#8; 
                // stmtexpr0#8 := x0#2; 
                stmtexpr0#8 := $phys_ptr_cast(x0#2, ^b_node);
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assert @reads_check_normal((x->left)); 
                assert $thread_local($s, $phys_ptr_cast(P#x, ^b_node));
                // left := *((x->left)); 
                L#left := $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node);
                // assume ==>(@_vcc_ptr_neq_null(left), ==(bst(left), &&(&&(&&(&&(&&(&&(&&(bst(*((left->left))), bst(*((left->right)))), unchecked!(@_vcc_oset_in(left, @_vcc_oset_union(bst_reach(*((left->left))), bst_reach(*((left->right))))))), unchecked!(@_vcc_intset_in(*((left->key)), @_vcc_intset_union(bst_keys(*((left->left))), bst_keys(*((left->right))))))), @_vcc_oset_disjoint(bst_reach(*((left->left))), bst_reach(*((left->right))))), @_vcc_intset_disjoint(bst_keys(*((left->left))), bst_keys(*((left->right))))), ==>(@_vcc_ptr_neq_null(*((left->left))), <(bst_max_key(*((left->left))), *((left->key))))), ==>(@_vcc_ptr_neq_null(*((left->right))), <(*((left->key)), bst_min_key(*((left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#left, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#left, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#left, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#left, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#left, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(bst_reach(left), @_vcc_oset_union(@_vcc_oset_singleton(left), @_vcc_oset_union(bst_reach(*((left->left))), bst_reach(*((left->right))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#left, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#left, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), ==(bst_keys(left), @_vcc_intset_union(@_vcc_intset_singleton(*((left->key))), @_vcc_intset_union(bst_keys(*((left->left))), bst_keys(*((left->right))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#left, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#left, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(bst_max_key(left), @\int_max(*((left->key)), @\int_max(bst_max_key(*((left->left))), bst_max_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(bst_max_key(left), @\int_max(*((left->key)), bst_max_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(bst_max_key(left), @\int_max(*((left->key)), bst_max_key(*((left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#left, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#left, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#left, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(bst_min_key(left), @\int_min(*((left->key)), @\int_min(bst_min_key(*((left->left))), bst_min_key(*((left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left->left))), @_vcc_ptr_eq_null(*((left->right)))), ==(bst_min_key(left), @\int_min(*((left->key)), bst_min_key(*((left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left->left))), @_vcc_ptr_neq_null(*((left->right)))), ==(bst_min_key(left), @\int_min(*((left->key)), bst_min_key(*((left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#left, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#left, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#left, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#left, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // _math \state _dryad_S0#3; 
                // _dryad_S0#3 := @_vcc_current_state(@state); 
                _dryad_S0#3 := $current_state($s);
                // _math \state stmtexpr1#9; 
                // stmtexpr1#9 := _dryad_S0#3; 
                stmtexpr1#9 := _dryad_S0#3;
                // void function
                // assert @writes_check(x); 
                assert $top_writable($s, #wrTime$3^5.3, $phys_ptr_cast(P#x, ^b_node));
                // assert @writes_check(@_vcc_extent(@state, x)); 
                assert (forall #writes$3^28.5: $ptr :: { $dont_instantiate(#writes$3^28.5) } $set_in(#writes$3^28.5, $extent($s, $phys_ptr_cast(P#x, ^b_node))) ==> $top_writable($s, #wrTime$3^5.3, #writes$3^28.5));
                // stmt _vcc_free(x); 
                call $free($phys_ptr_cast(P#x, ^b_node));
                assume $full_stop_ext(#tok$3^28.5, $s);
                // _math \state _dryad_S1#4; 
                // _dryad_S1#4 := @_vcc_current_state(@state); 
                _dryad_S1#4 := $current_state($s);
                // _math \state stmtexpr2#10; 
                // stmtexpr2#10 := _dryad_S1#4; 
                stmtexpr2#10 := _dryad_S1#4;
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#3, bst_reach(x0#2)))), ==(old(_dryad_S0#3, bst(x0#2)), old(_dryad_S1#4, bst(x0#2)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#3, $phys_ptr_cast(x0#2, ^b_node))) ==> F#bst(_dryad_S0#3, $phys_ptr_cast(x0#2, ^b_node)) == F#bst(_dryad_S1#4, $phys_ptr_cast(x0#2, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#3, bst_reach(x0#2)))), ==(old(_dryad_S0#3, bst_reach(x0#2)), old(_dryad_S1#4, bst_reach(x0#2)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#3, $phys_ptr_cast(x0#2, ^b_node))) ==> F#bst_reach(_dryad_S0#3, $phys_ptr_cast(x0#2, ^b_node)) == F#bst_reach(_dryad_S1#4, $phys_ptr_cast(x0#2, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#3, bst_reach(x0#2)))), ==(old(_dryad_S0#3, bst_keys(x0#2)), old(_dryad_S1#4, bst_keys(x0#2)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#3, $phys_ptr_cast(x0#2, ^b_node))) ==> F#bst_keys(_dryad_S0#3, $phys_ptr_cast(x0#2, ^b_node)) == F#bst_keys(_dryad_S1#4, $phys_ptr_cast(x0#2, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#3, bst_reach(x0#2)))), ==(old(_dryad_S0#3, bst_max_key(x0#2)), old(_dryad_S1#4, bst_max_key(x0#2)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#3, $phys_ptr_cast(x0#2, ^b_node))) ==> F#bst_max_key(_dryad_S0#3, $phys_ptr_cast(x0#2, ^b_node)) == F#bst_max_key(_dryad_S1#4, $phys_ptr_cast(x0#2, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#3, bst_reach(x0#2)))), ==(old(_dryad_S0#3, bst_min_key(x0#2)), old(_dryad_S1#4, bst_min_key(x0#2)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#3, $phys_ptr_cast(x0#2, ^b_node))) ==> F#bst_min_key(_dryad_S0#3, $phys_ptr_cast(x0#2, ^b_node)) == F#bst_min_key(_dryad_S1#4, $phys_ptr_cast(x0#2, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#3, bst_reach(left)))), ==(old(_dryad_S0#3, bst(left)), old(_dryad_S1#4, bst(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#3, $phys_ptr_cast(L#left, ^b_node))) ==> F#bst(_dryad_S0#3, $phys_ptr_cast(L#left, ^b_node)) == F#bst(_dryad_S1#4, $phys_ptr_cast(L#left, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#3, bst_reach(left)))), ==(old(_dryad_S0#3, bst_reach(left)), old(_dryad_S1#4, bst_reach(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#3, $phys_ptr_cast(L#left, ^b_node))) ==> F#bst_reach(_dryad_S0#3, $phys_ptr_cast(L#left, ^b_node)) == F#bst_reach(_dryad_S1#4, $phys_ptr_cast(L#left, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#3, bst_reach(left)))), ==(old(_dryad_S0#3, bst_keys(left)), old(_dryad_S1#4, bst_keys(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#3, $phys_ptr_cast(L#left, ^b_node))) ==> F#bst_keys(_dryad_S0#3, $phys_ptr_cast(L#left, ^b_node)) == F#bst_keys(_dryad_S1#4, $phys_ptr_cast(L#left, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#3, bst_reach(left)))), ==(old(_dryad_S0#3, bst_max_key(left)), old(_dryad_S1#4, bst_max_key(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#3, $phys_ptr_cast(L#left, ^b_node))) ==> F#bst_max_key(_dryad_S0#3, $phys_ptr_cast(L#left, ^b_node)) == F#bst_max_key(_dryad_S1#4, $phys_ptr_cast(L#left, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#3, bst_reach(left)))), ==(old(_dryad_S0#3, bst_min_key(left)), old(_dryad_S1#4, bst_min_key(left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#3, $phys_ptr_cast(L#left, ^b_node))) ==> F#bst_min_key(_dryad_S0#3, $phys_ptr_cast(L#left, ^b_node)) == F#bst_min_key(_dryad_S1#4, $phys_ptr_cast(L#left, ^b_node));
                // return left; 
                $result := $phys_ptr_cast(L#left, ^b_node);
                assume true;
                assert $position_marker();
                goto #exit;
            }
            else
            {
              anon6:
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // struct b_node* tmp; 
                // struct b_node* right_right; 
                // struct b_node* right_left; 
                // struct b_node* left#5; 
                // struct b_node* right#6; 
                // struct b_node* x0#7; 
                // x0#7 := x; 
                x0#7 := $phys_ptr_cast(P#x, ^b_node);
                // struct b_node* stmtexpr0#11; 
                // stmtexpr0#11 := x0#7; 
                stmtexpr0#11 := $phys_ptr_cast(x0#7, ^b_node);
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assert @reads_check_normal((x->right)); 
                assert $thread_local($s, $phys_ptr_cast(P#x, ^b_node));
                // right#6 := *((x->right)); 
                right#6 := $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node);
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst(right#6), &&(&&(&&(&&(&&(&&(&&(bst(*((right#6->left))), bst(*((right#6->right)))), unchecked!(@_vcc_oset_in(right#6, @_vcc_oset_union(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))))), unchecked!(@_vcc_intset_in(*((right#6->key)), @_vcc_intset_union(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))))), @_vcc_oset_disjoint(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))), @_vcc_intset_disjoint(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))), ==>(@_vcc_ptr_neq_null(*((right#6->left))), <(bst_max_key(*((right#6->left))), *((right#6->key))))), ==>(@_vcc_ptr_neq_null(*((right#6->right))), <(*((right#6->key)), bst_min_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst($s, $phys_ptr_cast(right#6, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(right#6, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst_reach(right#6), @_vcc_oset_union(@_vcc_oset_singleton(right#6), @_vcc_oset_union(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(right#6, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(right#6, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst_keys(right#6), @_vcc_intset_union(@_vcc_intset_singleton(*((right#6->key))), @_vcc_intset_union(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(right#6, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), @\int_max(bst_max_key(*((right#6->left))), bst_max_key(*((right#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_eq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), bst_max_key(*((right#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), bst_max_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), @\int_min(bst_min_key(*((right#6->left))), bst_min_key(*((right#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_eq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), bst_min_key(*((right#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), bst_min_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // struct b_node* x1; 
                // x1 := x; 
                SL#x1 := $phys_ptr_cast(P#x, ^b_node);
                // struct b_node* stmtexpr1#12; 
                // stmtexpr1#12 := x1; 
                stmtexpr1#12 := $phys_ptr_cast(SL#x1, ^b_node);
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assert @reads_check_normal((x->left)); 
                assert $thread_local($s, $phys_ptr_cast(P#x, ^b_node));
                // left#5 := *((x->left)); 
                left#5 := $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node);
                // assume ==>(@_vcc_ptr_neq_null(left#5), ==(bst(left#5), &&(&&(&&(&&(&&(&&(&&(bst(*((left#5->left))), bst(*((left#5->right)))), unchecked!(@_vcc_oset_in(left#5, @_vcc_oset_union(bst_reach(*((left#5->left))), bst_reach(*((left#5->right))))))), unchecked!(@_vcc_intset_in(*((left#5->key)), @_vcc_intset_union(bst_keys(*((left#5->left))), bst_keys(*((left#5->right))))))), @_vcc_oset_disjoint(bst_reach(*((left#5->left))), bst_reach(*((left#5->right))))), @_vcc_intset_disjoint(bst_keys(*((left#5->left))), bst_keys(*((left#5->right))))), ==>(@_vcc_ptr_neq_null(*((left#5->left))), <(bst_max_key(*((left#5->left))), *((left#5->key))))), ==>(@_vcc_ptr_neq_null(*((left#5->right))), <(*((left#5->key)), bst_min_key(*((left#5->right)))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> F#bst($s, $phys_ptr_cast(left#5, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(left#5, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), ==(bst_reach(left#5), @_vcc_oset_union(@_vcc_oset_singleton(left#5), @_vcc_oset_union(bst_reach(*((left#5->left))), bst_reach(*((left#5->right))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(left#5, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(left#5, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), ==(bst_keys(left#5), @_vcc_intset_union(@_vcc_intset_singleton(*((left#5->key))), @_vcc_intset_union(bst_keys(*((left#5->left))), bst_keys(*((left#5->right))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(left#5, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left#5->left))), @_vcc_ptr_neq_null(*((left#5->right)))), ==(bst_max_key(left#5), @\int_max(*((left#5->key)), @\int_max(bst_max_key(*((left#5->left))), bst_max_key(*((left#5->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left#5->left))), @_vcc_ptr_eq_null(*((left#5->right)))), ==(bst_max_key(left#5), @\int_max(*((left#5->key)), bst_max_key(*((left#5->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left#5->left))), @_vcc_ptr_neq_null(*((left#5->right)))), ==(bst_max_key(left#5), @\int_max(*((left#5->key)), bst_max_key(*((left#5->right)))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left#5->left))), @_vcc_ptr_neq_null(*((left#5->right)))), ==(bst_min_key(left#5), @\int_min(*((left#5->key)), @\int_min(bst_min_key(*((left#5->left))), bst_min_key(*((left#5->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left#5->left))), @_vcc_ptr_eq_null(*((left#5->right)))), ==(bst_min_key(left#5), @\int_min(*((left#5->key)), bst_min_key(*((left#5->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left#5->left))), @_vcc_ptr_neq_null(*((left#5->right)))), ==(bst_min_key(left#5), @\int_min(*((left#5->key)), bst_min_key(*((left#5->right)))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), &&(@_vcc_mutable(@state, right#6), @writes_check(right#6))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> $mutable($s, $phys_ptr_cast(right#6, ^b_node)) && $top_writable($s, #wrTime$3^5.3, $phys_ptr_cast(right#6, ^b_node));
                // struct b_node* right2; 
                // right2 := right#6; 
                SL#right2 := $phys_ptr_cast(right#6, ^b_node);
                // struct b_node* stmtexpr2#13; 
                // stmtexpr2#13 := right2; 
                stmtexpr2#13 := $phys_ptr_cast(SL#right2, ^b_node);
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst(right#6), &&(&&(&&(&&(&&(&&(&&(bst(*((right#6->left))), bst(*((right#6->right)))), unchecked!(@_vcc_oset_in(right#6, @_vcc_oset_union(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))))), unchecked!(@_vcc_intset_in(*((right#6->key)), @_vcc_intset_union(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))))), @_vcc_oset_disjoint(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))), @_vcc_intset_disjoint(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))), ==>(@_vcc_ptr_neq_null(*((right#6->left))), <(bst_max_key(*((right#6->left))), *((right#6->key))))), ==>(@_vcc_ptr_neq_null(*((right#6->right))), <(*((right#6->key)), bst_min_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst($s, $phys_ptr_cast(right#6, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(right#6, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst_reach(right#6), @_vcc_oset_union(@_vcc_oset_singleton(right#6), @_vcc_oset_union(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(right#6, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(right#6, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst_keys(right#6), @_vcc_intset_union(@_vcc_intset_singleton(*((right#6->key))), @_vcc_intset_union(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(right#6, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), @\int_max(bst_max_key(*((right#6->left))), bst_max_key(*((right#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_eq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), bst_max_key(*((right#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), bst_max_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), @\int_min(bst_min_key(*((right#6->left))), bst_min_key(*((right#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_eq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), bst_min_key(*((right#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), bst_min_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assert @reads_check_normal((right#6->left)); 
                assert $thread_local($s, $phys_ptr_cast(right#6, ^b_node));
                // right_left := *((right#6->left)); 
                L#right_left := $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node);
                // assume ==>(@_vcc_ptr_neq_null(right_left), ==(bst(right_left), &&(&&(&&(&&(&&(&&(&&(bst(*((right_left->left))), bst(*((right_left->right)))), unchecked!(@_vcc_oset_in(right_left, @_vcc_oset_union(bst_reach(*((right_left->left))), bst_reach(*((right_left->right))))))), unchecked!(@_vcc_intset_in(*((right_left->key)), @_vcc_intset_union(bst_keys(*((right_left->left))), bst_keys(*((right_left->right))))))), @_vcc_oset_disjoint(bst_reach(*((right_left->left))), bst_reach(*((right_left->right))))), @_vcc_intset_disjoint(bst_keys(*((right_left->left))), bst_keys(*((right_left->right))))), ==>(@_vcc_ptr_neq_null(*((right_left->left))), <(bst_max_key(*((right_left->left))), *((right_left->key))))), ==>(@_vcc_ptr_neq_null(*((right_left->right))), <(*((right_left->key)), bst_min_key(*((right_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#right_left, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#right_left, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), ==(bst_reach(right_left), @_vcc_oset_union(@_vcc_oset_singleton(right_left), @_vcc_oset_union(bst_reach(*((right_left->left))), bst_reach(*((right_left->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#right_left, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#right_left, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), ==(bst_keys(right_left), @_vcc_intset_union(@_vcc_intset_singleton(*((right_left->key))), @_vcc_intset_union(bst_keys(*((right_left->left))), bst_keys(*((right_left->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#right_left, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_max_key(right_left), @\int_max(*((right_left->key)), @\int_max(bst_max_key(*((right_left->left))), bst_max_key(*((right_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_eq_null(*((right_left->right)))), ==(bst_max_key(right_left), @\int_max(*((right_left->key)), bst_max_key(*((right_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_max_key(right_left), @\int_max(*((right_left->key)), bst_max_key(*((right_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_min_key(right_left), @\int_min(*((right_left->key)), @\int_min(bst_min_key(*((right_left->left))), bst_min_key(*((right_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_eq_null(*((right_left->right)))), ==(bst_min_key(right_left), @\int_min(*((right_left->key)), bst_min_key(*((right_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_min_key(right_left), @\int_min(*((right_left->key)), bst_min_key(*((right_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst(right#6), &&(&&(&&(&&(&&(&&(&&(bst(*((right#6->left))), bst(*((right#6->right)))), unchecked!(@_vcc_oset_in(right#6, @_vcc_oset_union(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))))), unchecked!(@_vcc_intset_in(*((right#6->key)), @_vcc_intset_union(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))))), @_vcc_oset_disjoint(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))), @_vcc_intset_disjoint(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))), ==>(@_vcc_ptr_neq_null(*((right#6->left))), <(bst_max_key(*((right#6->left))), *((right#6->key))))), ==>(@_vcc_ptr_neq_null(*((right#6->right))), <(*((right#6->key)), bst_min_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst($s, $phys_ptr_cast(right#6, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(right#6, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst_reach(right#6), @_vcc_oset_union(@_vcc_oset_singleton(right#6), @_vcc_oset_union(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(right#6, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(right#6, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst_keys(right#6), @_vcc_intset_union(@_vcc_intset_singleton(*((right#6->key))), @_vcc_intset_union(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(right#6, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), @\int_max(bst_max_key(*((right#6->left))), bst_max_key(*((right#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_eq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), bst_max_key(*((right#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), bst_max_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), @\int_min(bst_min_key(*((right#6->left))), bst_min_key(*((right#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_eq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), bst_min_key(*((right#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), bst_min_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // struct b_node* right3; 
                // right3 := right#6; 
                SL#right3 := $phys_ptr_cast(right#6, ^b_node);
                // struct b_node* stmtexpr3#14; 
                // stmtexpr3#14 := right3; 
                stmtexpr3#14 := $phys_ptr_cast(SL#right3, ^b_node);
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst(right#6), &&(&&(&&(&&(&&(&&(&&(bst(*((right#6->left))), bst(*((right#6->right)))), unchecked!(@_vcc_oset_in(right#6, @_vcc_oset_union(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))))), unchecked!(@_vcc_intset_in(*((right#6->key)), @_vcc_intset_union(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))))), @_vcc_oset_disjoint(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))), @_vcc_intset_disjoint(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))), ==>(@_vcc_ptr_neq_null(*((right#6->left))), <(bst_max_key(*((right#6->left))), *((right#6->key))))), ==>(@_vcc_ptr_neq_null(*((right#6->right))), <(*((right#6->key)), bst_min_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst($s, $phys_ptr_cast(right#6, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(right#6, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst_reach(right#6), @_vcc_oset_union(@_vcc_oset_singleton(right#6), @_vcc_oset_union(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(right#6, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(right#6, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst_keys(right#6), @_vcc_intset_union(@_vcc_intset_singleton(*((right#6->key))), @_vcc_intset_union(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(right#6, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), @\int_max(bst_max_key(*((right#6->left))), bst_max_key(*((right#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_eq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), bst_max_key(*((right#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), bst_max_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), @\int_min(bst_min_key(*((right#6->left))), bst_min_key(*((right#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_eq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), bst_min_key(*((right#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), bst_min_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assert @reads_check_normal((right#6->right)); 
                assert $thread_local($s, $phys_ptr_cast(right#6, ^b_node));
                // right_right := *((right#6->right)); 
                L#right_right := $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node);
                // assume ==>(@_vcc_ptr_neq_null(right_right), ==(bst(right_right), &&(&&(&&(&&(&&(&&(&&(bst(*((right_right->left))), bst(*((right_right->right)))), unchecked!(@_vcc_oset_in(right_right, @_vcc_oset_union(bst_reach(*((right_right->left))), bst_reach(*((right_right->right))))))), unchecked!(@_vcc_intset_in(*((right_right->key)), @_vcc_intset_union(bst_keys(*((right_right->left))), bst_keys(*((right_right->right))))))), @_vcc_oset_disjoint(bst_reach(*((right_right->left))), bst_reach(*((right_right->right))))), @_vcc_intset_disjoint(bst_keys(*((right_right->left))), bst_keys(*((right_right->right))))), ==>(@_vcc_ptr_neq_null(*((right_right->left))), <(bst_max_key(*((right_right->left))), *((right_right->key))))), ==>(@_vcc_ptr_neq_null(*((right_right->right))), <(*((right_right->key)), bst_min_key(*((right_right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#right_right, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#right_right, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), ==(bst_reach(right_right), @_vcc_oset_union(@_vcc_oset_singleton(right_right), @_vcc_oset_union(bst_reach(*((right_right->left))), bst_reach(*((right_right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#right_right, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#right_right, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), ==(bst_keys(right_right), @_vcc_intset_union(@_vcc_intset_singleton(*((right_right->key))), @_vcc_intset_union(bst_keys(*((right_right->left))), bst_keys(*((right_right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#right_right, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_right->left))), @_vcc_ptr_neq_null(*((right_right->right)))), ==(bst_max_key(right_right), @\int_max(*((right_right->key)), @\int_max(bst_max_key(*((right_right->left))), bst_max_key(*((right_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_right->left))), @_vcc_ptr_eq_null(*((right_right->right)))), ==(bst_max_key(right_right), @\int_max(*((right_right->key)), bst_max_key(*((right_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_right->left))), @_vcc_ptr_neq_null(*((right_right->right)))), ==(bst_max_key(right_right), @\int_max(*((right_right->key)), bst_max_key(*((right_right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_right->left))), @_vcc_ptr_neq_null(*((right_right->right)))), ==(bst_min_key(right_right), @\int_min(*((right_right->key)), @\int_min(bst_min_key(*((right_right->left))), bst_min_key(*((right_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_right->left))), @_vcc_ptr_eq_null(*((right_right->right)))), ==(bst_min_key(right_right), @\int_min(*((right_right->key)), bst_min_key(*((right_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_right->left))), @_vcc_ptr_neq_null(*((right_right->right)))), ==(bst_min_key(right_right), @\int_min(*((right_right->key)), bst_min_key(*((right_right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst(right#6), &&(&&(&&(&&(&&(&&(&&(bst(*((right#6->left))), bst(*((right#6->right)))), unchecked!(@_vcc_oset_in(right#6, @_vcc_oset_union(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))))), unchecked!(@_vcc_intset_in(*((right#6->key)), @_vcc_intset_union(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))))), @_vcc_oset_disjoint(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))), @_vcc_intset_disjoint(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))), ==>(@_vcc_ptr_neq_null(*((right#6->left))), <(bst_max_key(*((right#6->left))), *((right#6->key))))), ==>(@_vcc_ptr_neq_null(*((right#6->right))), <(*((right#6->key)), bst_min_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst($s, $phys_ptr_cast(right#6, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(right#6, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst_reach(right#6), @_vcc_oset_union(@_vcc_oset_singleton(right#6), @_vcc_oset_union(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(right#6, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(right#6, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst_keys(right#6), @_vcc_intset_union(@_vcc_intset_singleton(*((right#6->key))), @_vcc_intset_union(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(right#6, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), @\int_max(bst_max_key(*((right#6->left))), bst_max_key(*((right#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_eq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), bst_max_key(*((right#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), bst_max_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), @\int_min(bst_min_key(*((right#6->left))), bst_min_key(*((right#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_eq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), bst_min_key(*((right#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), bst_min_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // _math \state _dryad_S0#8; 
                // _dryad_S0#8 := @_vcc_current_state(@state); 
                _dryad_S0#8 := $current_state($s);
                // _math \state stmtexpr4#15; 
                // stmtexpr4#15 := _dryad_S0#8; 
                stmtexpr4#15 := _dryad_S0#8;
                // assert @prim_writes_check((x->right)); 
                assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(P#x, ^b_node), b_node.right));
                // *(x->right) := right_left; 
                call $write_int(b_node.right, $phys_ptr_cast(P#x, ^b_node), $ptr_to_int($phys_ptr_cast(L#right_left, ^b_node)));
                assume $full_stop_ext(#tok$3^38.5, $s);
                // _math \state _dryad_S1#9; 
                // _dryad_S1#9 := @_vcc_current_state(@state); 
                _dryad_S1#9 := $current_state($s);
                // _math \state stmtexpr5#16; 
                // stmtexpr5#16 := _dryad_S1#9; 
                stmtexpr5#16 := _dryad_S1#9;
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(*((x->left)))))), ==(old(_dryad_S0#8, bst(*((x->left)))), old(_dryad_S1#9, bst(*((x->left)))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node))) ==> F#bst(_dryad_S0#8, $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) == F#bst(_dryad_S1#9, $rd_phys_ptr(_dryad_S1#9, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(*((x->left)))))), ==(old(_dryad_S0#8, bst_reach(*((x->left)))), old(_dryad_S1#9, bst_reach(*((x->left)))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node))) ==> F#bst_reach(_dryad_S0#8, $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) == F#bst_reach(_dryad_S1#9, $rd_phys_ptr(_dryad_S1#9, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(*((x->left)))))), ==(old(_dryad_S0#8, bst_keys(*((x->left)))), old(_dryad_S1#9, bst_keys(*((x->left)))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node))) ==> F#bst_keys(_dryad_S0#8, $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) == F#bst_keys(_dryad_S1#9, $rd_phys_ptr(_dryad_S1#9, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(*((x->left)))))), ==(old(_dryad_S0#8, bst_max_key(*((x->left)))), old(_dryad_S1#9, bst_max_key(*((x->left)))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node))) ==> F#bst_max_key(_dryad_S0#8, $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) == F#bst_max_key(_dryad_S1#9, $rd_phys_ptr(_dryad_S1#9, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(*((x->left)))))), ==(old(_dryad_S0#8, bst_min_key(*((x->left)))), old(_dryad_S1#9, bst_min_key(*((x->left)))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node))) ==> F#bst_min_key(_dryad_S0#8, $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) == F#bst_min_key(_dryad_S1#9, $rd_phys_ptr(_dryad_S1#9, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right3)))), ==(old(_dryad_S0#8, bst(right3)), old(_dryad_S1#9, bst(right3)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#right3, ^b_node))) ==> F#bst(_dryad_S0#8, $phys_ptr_cast(SL#right3, ^b_node)) == F#bst(_dryad_S1#9, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right3)))), ==(old(_dryad_S0#8, bst_reach(right3)), old(_dryad_S1#9, bst_reach(right3)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#right3, ^b_node))) ==> F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#right3, ^b_node)) == F#bst_reach(_dryad_S1#9, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right3)))), ==(old(_dryad_S0#8, bst_keys(right3)), old(_dryad_S1#9, bst_keys(right3)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#right3, ^b_node))) ==> F#bst_keys(_dryad_S0#8, $phys_ptr_cast(SL#right3, ^b_node)) == F#bst_keys(_dryad_S1#9, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right3)))), ==(old(_dryad_S0#8, bst_max_key(right3)), old(_dryad_S1#9, bst_max_key(right3)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#right3, ^b_node))) ==> F#bst_max_key(_dryad_S0#8, $phys_ptr_cast(SL#right3, ^b_node)) == F#bst_max_key(_dryad_S1#9, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right3)))), ==(old(_dryad_S0#8, bst_min_key(right3)), old(_dryad_S1#9, bst_min_key(right3)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#right3, ^b_node))) ==> F#bst_min_key(_dryad_S0#8, $phys_ptr_cast(SL#right3, ^b_node)) == F#bst_min_key(_dryad_S1#9, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right2)))), ==(old(_dryad_S0#8, bst(right2)), old(_dryad_S1#9, bst(right2)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#right2, ^b_node))) ==> F#bst(_dryad_S0#8, $phys_ptr_cast(SL#right2, ^b_node)) == F#bst(_dryad_S1#9, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right2)))), ==(old(_dryad_S0#8, bst_reach(right2)), old(_dryad_S1#9, bst_reach(right2)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#right2, ^b_node))) ==> F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#right2, ^b_node)) == F#bst_reach(_dryad_S1#9, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right2)))), ==(old(_dryad_S0#8, bst_keys(right2)), old(_dryad_S1#9, bst_keys(right2)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#right2, ^b_node))) ==> F#bst_keys(_dryad_S0#8, $phys_ptr_cast(SL#right2, ^b_node)) == F#bst_keys(_dryad_S1#9, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right2)))), ==(old(_dryad_S0#8, bst_max_key(right2)), old(_dryad_S1#9, bst_max_key(right2)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#right2, ^b_node))) ==> F#bst_max_key(_dryad_S0#8, $phys_ptr_cast(SL#right2, ^b_node)) == F#bst_max_key(_dryad_S1#9, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right2)))), ==(old(_dryad_S0#8, bst_min_key(right2)), old(_dryad_S1#9, bst_min_key(right2)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#right2, ^b_node))) ==> F#bst_min_key(_dryad_S0#8, $phys_ptr_cast(SL#right2, ^b_node)) == F#bst_min_key(_dryad_S1#9, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(x1)))), ==(old(_dryad_S0#8, bst(x1)), old(_dryad_S1#9, bst(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst(_dryad_S0#8, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst(_dryad_S1#9, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(x1)))), ==(old(_dryad_S0#8, bst_reach(x1)), old(_dryad_S1#9, bst_reach(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_reach(_dryad_S1#9, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(x1)))), ==(old(_dryad_S0#8, bst_keys(x1)), old(_dryad_S1#9, bst_keys(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_keys(_dryad_S0#8, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_keys(_dryad_S1#9, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(x1)))), ==(old(_dryad_S0#8, bst_max_key(x1)), old(_dryad_S1#9, bst_max_key(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_max_key(_dryad_S0#8, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_max_key(_dryad_S1#9, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(x1)))), ==(old(_dryad_S0#8, bst_min_key(x1)), old(_dryad_S1#9, bst_min_key(x1)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_min_key(_dryad_S0#8, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_min_key(_dryad_S1#9, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(x0#7)))), ==(old(_dryad_S0#8, bst(x0#7)), old(_dryad_S1#9, bst(x0#7)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst(_dryad_S0#8, $phys_ptr_cast(x0#7, ^b_node)) == F#bst(_dryad_S1#9, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(x0#7)))), ==(old(_dryad_S0#8, bst_reach(x0#7)), old(_dryad_S1#9, bst_reach(x0#7)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_reach(_dryad_S0#8, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_reach(_dryad_S1#9, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(x0#7)))), ==(old(_dryad_S0#8, bst_keys(x0#7)), old(_dryad_S1#9, bst_keys(x0#7)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_keys(_dryad_S0#8, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_keys(_dryad_S1#9, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(x0#7)))), ==(old(_dryad_S0#8, bst_max_key(x0#7)), old(_dryad_S1#9, bst_max_key(x0#7)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_max_key(_dryad_S0#8, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_max_key(_dryad_S1#9, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(x0#7)))), ==(old(_dryad_S0#8, bst_min_key(x0#7)), old(_dryad_S1#9, bst_min_key(x0#7)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_min_key(_dryad_S0#8, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_min_key(_dryad_S1#9, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right#6)))), ==(old(_dryad_S0#8, bst(right#6)), old(_dryad_S1#9, bst(right#6)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(right#6, ^b_node))) ==> F#bst(_dryad_S0#8, $phys_ptr_cast(right#6, ^b_node)) == F#bst(_dryad_S1#9, $phys_ptr_cast(right#6, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right#6)))), ==(old(_dryad_S0#8, bst_reach(right#6)), old(_dryad_S1#9, bst_reach(right#6)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(right#6, ^b_node))) ==> F#bst_reach(_dryad_S0#8, $phys_ptr_cast(right#6, ^b_node)) == F#bst_reach(_dryad_S1#9, $phys_ptr_cast(right#6, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right#6)))), ==(old(_dryad_S0#8, bst_keys(right#6)), old(_dryad_S1#9, bst_keys(right#6)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(right#6, ^b_node))) ==> F#bst_keys(_dryad_S0#8, $phys_ptr_cast(right#6, ^b_node)) == F#bst_keys(_dryad_S1#9, $phys_ptr_cast(right#6, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right#6)))), ==(old(_dryad_S0#8, bst_max_key(right#6)), old(_dryad_S1#9, bst_max_key(right#6)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(right#6, ^b_node))) ==> F#bst_max_key(_dryad_S0#8, $phys_ptr_cast(right#6, ^b_node)) == F#bst_max_key(_dryad_S1#9, $phys_ptr_cast(right#6, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right#6)))), ==(old(_dryad_S0#8, bst_min_key(right#6)), old(_dryad_S1#9, bst_min_key(right#6)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(right#6, ^b_node))) ==> F#bst_min_key(_dryad_S0#8, $phys_ptr_cast(right#6, ^b_node)) == F#bst_min_key(_dryad_S1#9, $phys_ptr_cast(right#6, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(left#5)))), ==(old(_dryad_S0#8, bst(left#5)), old(_dryad_S1#9, bst(left#5)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(left#5, ^b_node))) ==> F#bst(_dryad_S0#8, $phys_ptr_cast(left#5, ^b_node)) == F#bst(_dryad_S1#9, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(left#5)))), ==(old(_dryad_S0#8, bst_reach(left#5)), old(_dryad_S1#9, bst_reach(left#5)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(left#5, ^b_node))) ==> F#bst_reach(_dryad_S0#8, $phys_ptr_cast(left#5, ^b_node)) == F#bst_reach(_dryad_S1#9, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(left#5)))), ==(old(_dryad_S0#8, bst_keys(left#5)), old(_dryad_S1#9, bst_keys(left#5)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(left#5, ^b_node))) ==> F#bst_keys(_dryad_S0#8, $phys_ptr_cast(left#5, ^b_node)) == F#bst_keys(_dryad_S1#9, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(left#5)))), ==(old(_dryad_S0#8, bst_max_key(left#5)), old(_dryad_S1#9, bst_max_key(left#5)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(left#5, ^b_node))) ==> F#bst_max_key(_dryad_S0#8, $phys_ptr_cast(left#5, ^b_node)) == F#bst_max_key(_dryad_S1#9, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(left#5)))), ==(old(_dryad_S0#8, bst_min_key(left#5)), old(_dryad_S1#9, bst_min_key(left#5)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(left#5, ^b_node))) ==> F#bst_min_key(_dryad_S0#8, $phys_ptr_cast(left#5, ^b_node)) == F#bst_min_key(_dryad_S1#9, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right_left)))), ==(old(_dryad_S0#8, bst(right_left)), old(_dryad_S1#9, bst(right_left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#right_left, ^b_node))) ==> F#bst(_dryad_S0#8, $phys_ptr_cast(L#right_left, ^b_node)) == F#bst(_dryad_S1#9, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right_left)))), ==(old(_dryad_S0#8, bst_reach(right_left)), old(_dryad_S1#9, bst_reach(right_left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#right_left, ^b_node))) ==> F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#right_left, ^b_node)) == F#bst_reach(_dryad_S1#9, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right_left)))), ==(old(_dryad_S0#8, bst_keys(right_left)), old(_dryad_S1#9, bst_keys(right_left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#right_left, ^b_node))) ==> F#bst_keys(_dryad_S0#8, $phys_ptr_cast(L#right_left, ^b_node)) == F#bst_keys(_dryad_S1#9, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right_left)))), ==(old(_dryad_S0#8, bst_max_key(right_left)), old(_dryad_S1#9, bst_max_key(right_left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#right_left, ^b_node))) ==> F#bst_max_key(_dryad_S0#8, $phys_ptr_cast(L#right_left, ^b_node)) == F#bst_max_key(_dryad_S1#9, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right_left)))), ==(old(_dryad_S0#8, bst_min_key(right_left)), old(_dryad_S1#9, bst_min_key(right_left)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#right_left, ^b_node))) ==> F#bst_min_key(_dryad_S0#8, $phys_ptr_cast(L#right_left, ^b_node)) == F#bst_min_key(_dryad_S1#9, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right_right)))), ==(old(_dryad_S0#8, bst(right_right)), old(_dryad_S1#9, bst(right_right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#right_right, ^b_node))) ==> F#bst(_dryad_S0#8, $phys_ptr_cast(L#right_right, ^b_node)) == F#bst(_dryad_S1#9, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right_right)))), ==(old(_dryad_S0#8, bst_reach(right_right)), old(_dryad_S1#9, bst_reach(right_right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#right_right, ^b_node))) ==> F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#right_right, ^b_node)) == F#bst_reach(_dryad_S1#9, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right_right)))), ==(old(_dryad_S0#8, bst_keys(right_right)), old(_dryad_S1#9, bst_keys(right_right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#right_right, ^b_node))) ==> F#bst_keys(_dryad_S0#8, $phys_ptr_cast(L#right_right, ^b_node)) == F#bst_keys(_dryad_S1#9, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right_right)))), ==(old(_dryad_S0#8, bst_max_key(right_right)), old(_dryad_S1#9, bst_max_key(right_right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#right_right, ^b_node))) ==> F#bst_max_key(_dryad_S0#8, $phys_ptr_cast(L#right_right, ^b_node)) == F#bst_max_key(_dryad_S1#9, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(right_right)))), ==(old(_dryad_S0#8, bst_min_key(right_right)), old(_dryad_S1#9, bst_min_key(right_right)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#right_right, ^b_node))) ==> F#bst_min_key(_dryad_S0#8, $phys_ptr_cast(L#right_right, ^b_node)) == F#bst_min_key(_dryad_S1#9, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(tmp)))), ==(old(_dryad_S0#8, bst(tmp)), old(_dryad_S1#9, bst(tmp)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#tmp, ^b_node))) ==> F#bst(_dryad_S0#8, $phys_ptr_cast(L#tmp, ^b_node)) == F#bst(_dryad_S1#9, $phys_ptr_cast(L#tmp, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(tmp)))), ==(old(_dryad_S0#8, bst_reach(tmp)), old(_dryad_S1#9, bst_reach(tmp)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#tmp, ^b_node))) ==> F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#tmp, ^b_node)) == F#bst_reach(_dryad_S1#9, $phys_ptr_cast(L#tmp, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(tmp)))), ==(old(_dryad_S0#8, bst_keys(tmp)), old(_dryad_S1#9, bst_keys(tmp)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#tmp, ^b_node))) ==> F#bst_keys(_dryad_S0#8, $phys_ptr_cast(L#tmp, ^b_node)) == F#bst_keys(_dryad_S1#9, $phys_ptr_cast(L#tmp, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(tmp)))), ==(old(_dryad_S0#8, bst_max_key(tmp)), old(_dryad_S1#9, bst_max_key(tmp)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#tmp, ^b_node))) ==> F#bst_max_key(_dryad_S0#8, $phys_ptr_cast(L#tmp, ^b_node)) == F#bst_max_key(_dryad_S1#9, $phys_ptr_cast(L#tmp, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(x, old(_dryad_S0#8, bst_reach(tmp)))), ==(old(_dryad_S0#8, bst_min_key(tmp)), old(_dryad_S1#9, bst_min_key(tmp)))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(_dryad_S0#8, $phys_ptr_cast(L#tmp, ^b_node))) ==> F#bst_min_key(_dryad_S0#8, $phys_ptr_cast(L#tmp, ^b_node)) == F#bst_min_key(_dryad_S1#9, $phys_ptr_cast(L#tmp, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right3)), @_vcc_ptr_eq_pure(*((right3->left)), old(_dryad_S0#8, *((right3->left))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(SL#right3, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right3)), @_vcc_ptr_eq_pure(*((right3->right)), old(_dryad_S0#8, *((right3->right))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(SL#right3, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right3)), ==(*((right3->key)), old(_dryad_S0#8, *((right3->key))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(SL#right3, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)) == $rd_inv(_dryad_S0#8, b_node.key, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right2)), @_vcc_ptr_eq_pure(*((right2->left)), old(_dryad_S0#8, *((right2->left))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(SL#right2, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right2)), @_vcc_ptr_eq_pure(*((right2->right)), old(_dryad_S0#8, *((right2->right))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(SL#right2, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right2)), ==(*((right2->key)), old(_dryad_S0#8, *((right2->key))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(SL#right2, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)) == $rd_inv(_dryad_S0#8, b_node.key, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), @_vcc_ptr_eq_pure(*((x1->left)), old(_dryad_S0#8, *((x1->left))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(SL#x1, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), @_vcc_ptr_eq_pure(*((x1->right)), old(_dryad_S0#8, *((x1->right))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(SL#x1, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x1)), ==(*((x1->key)), old(_dryad_S0#8, *((x1->key))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(SL#x1, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)) == $rd_inv(_dryad_S0#8, b_node.key, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x0#7)), @_vcc_ptr_eq_pure(*((x0#7->left)), old(_dryad_S0#8, *((x0#7->left))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(x0#7, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x0#7)), @_vcc_ptr_eq_pure(*((x0#7->right)), old(_dryad_S0#8, *((x0#7->right))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(x0#7, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, x0#7)), ==(*((x0#7->key)), old(_dryad_S0#8, *((x0#7->key))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(x0#7, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)) == $rd_inv(_dryad_S0#8, b_node.key, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right#6)), @_vcc_ptr_eq_pure(*((right#6->left)), old(_dryad_S0#8, *((right#6->left))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(right#6, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right#6)), @_vcc_ptr_eq_pure(*((right#6->right)), old(_dryad_S0#8, *((right#6->right))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(right#6, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right#6)), ==(*((right#6->key)), old(_dryad_S0#8, *((right#6->key))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(right#6, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)) == $rd_inv(_dryad_S0#8, b_node.key, $phys_ptr_cast(right#6, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, left#5)), @_vcc_ptr_eq_pure(*((left#5->left)), old(_dryad_S0#8, *((left#5->left))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(left#5, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, left#5)), @_vcc_ptr_eq_pure(*((left#5->right)), old(_dryad_S0#8, *((left#5->right))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(left#5, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, left#5)), ==(*((left#5->key)), old(_dryad_S0#8, *((left#5->key))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(left#5, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)) == $rd_inv(_dryad_S0#8, b_node.key, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right_left)), @_vcc_ptr_eq_pure(*((right_left->left)), old(_dryad_S0#8, *((right_left->left))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#right_left, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right_left)), @_vcc_ptr_eq_pure(*((right_left->right)), old(_dryad_S0#8, *((right_left->right))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#right_left, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right_left)), ==(*((right_left->key)), old(_dryad_S0#8, *((right_left->key))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#right_left, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)) == $rd_inv(_dryad_S0#8, b_node.key, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right_right)), @_vcc_ptr_eq_pure(*((right_right->left)), old(_dryad_S0#8, *((right_right->left))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#right_right, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right_right)), @_vcc_ptr_eq_pure(*((right_right->right)), old(_dryad_S0#8, *((right_right->right))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#right_right, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, right_right)), ==(*((right_right->key)), old(_dryad_S0#8, *((right_right->key))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#right_right, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)) == $rd_inv(_dryad_S0#8, b_node.key, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(x, tmp)), @_vcc_ptr_eq_pure(*((tmp->left)), old(_dryad_S0#8, *((tmp->left))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#tmp, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, tmp)), @_vcc_ptr_eq_pure(*((tmp->right)), old(_dryad_S0#8, *((tmp->right))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#tmp, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node) == $rd_phys_ptr(_dryad_S0#8, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(x, tmp)), ==(*((tmp->key)), old(_dryad_S0#8, *((tmp->key))))); 
                assume !($phys_ptr_cast(P#x, ^b_node) == $phys_ptr_cast(L#tmp, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)) == $rd_inv(_dryad_S0#8, b_node.key, $phys_ptr_cast(L#tmp, ^b_node));
                // assume ==>(@_vcc_ptr_neq_null(right3), ==(bst(right3), &&(&&(&&(&&(&&(&&(&&(bst(*((right3->left))), bst(*((right3->right)))), unchecked!(@_vcc_oset_in(right3, @_vcc_oset_union(bst_reach(*((right3->left))), bst_reach(*((right3->right))))))), unchecked!(@_vcc_intset_in(*((right3->key)), @_vcc_intset_union(bst_keys(*((right3->left))), bst_keys(*((right3->right))))))), @_vcc_oset_disjoint(bst_reach(*((right3->left))), bst_reach(*((right3->right))))), @_vcc_intset_disjoint(bst_keys(*((right3->left))), bst_keys(*((right3->right))))), ==>(@_vcc_ptr_neq_null(*((right3->left))), <(bst_max_key(*((right3->left))), *((right3->key))))), ==>(@_vcc_ptr_neq_null(*((right3->right))), <(*((right3->key)), bst_min_key(*((right3->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right3, ^b_node)) ==> F#bst($s, $phys_ptr_cast(SL#right3, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(SL#right3, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right3), ==(bst_reach(right3), @_vcc_oset_union(@_vcc_oset_singleton(right3), @_vcc_oset_union(bst_reach(*((right3->left))), bst_reach(*((right3->right))))))); 
                assume $non_null($phys_ptr_cast(SL#right3, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(SL#right3, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(SL#right3, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right3), ==(bst_keys(right3), @_vcc_intset_union(@_vcc_intset_singleton(*((right3->key))), @_vcc_intset_union(bst_keys(*((right3->left))), bst_keys(*((right3->right))))))); 
                assume $non_null($phys_ptr_cast(SL#right3, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(SL#right3, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right3), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right3->left))), @_vcc_ptr_neq_null(*((right3->right)))), ==(bst_max_key(right3), @\int_max(*((right3->key)), @\int_max(bst_max_key(*((right3->left))), bst_max_key(*((right3->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right3->left))), @_vcc_ptr_eq_null(*((right3->right)))), ==(bst_max_key(right3), @\int_max(*((right3->key)), bst_max_key(*((right3->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right3->left))), @_vcc_ptr_neq_null(*((right3->right)))), ==(bst_max_key(right3), @\int_max(*((right3->key)), bst_max_key(*((right3->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right3, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right3), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right3->left))), @_vcc_ptr_neq_null(*((right3->right)))), ==(bst_min_key(right3), @\int_min(*((right3->key)), @\int_min(bst_min_key(*((right3->left))), bst_min_key(*((right3->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right3->left))), @_vcc_ptr_eq_null(*((right3->right)))), ==(bst_min_key(right3), @\int_min(*((right3->key)), bst_min_key(*((right3->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right3->left))), @_vcc_ptr_neq_null(*((right3->right)))), ==(bst_min_key(right3), @\int_min(*((right3->key)), bst_min_key(*((right3->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right3, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right2), ==(bst(right2), &&(&&(&&(&&(&&(&&(&&(bst(*((right2->left))), bst(*((right2->right)))), unchecked!(@_vcc_oset_in(right2, @_vcc_oset_union(bst_reach(*((right2->left))), bst_reach(*((right2->right))))))), unchecked!(@_vcc_intset_in(*((right2->key)), @_vcc_intset_union(bst_keys(*((right2->left))), bst_keys(*((right2->right))))))), @_vcc_oset_disjoint(bst_reach(*((right2->left))), bst_reach(*((right2->right))))), @_vcc_intset_disjoint(bst_keys(*((right2->left))), bst_keys(*((right2->right))))), ==>(@_vcc_ptr_neq_null(*((right2->left))), <(bst_max_key(*((right2->left))), *((right2->key))))), ==>(@_vcc_ptr_neq_null(*((right2->right))), <(*((right2->key)), bst_min_key(*((right2->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right2, ^b_node)) ==> F#bst($s, $phys_ptr_cast(SL#right2, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(SL#right2, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right2), ==(bst_reach(right2), @_vcc_oset_union(@_vcc_oset_singleton(right2), @_vcc_oset_union(bst_reach(*((right2->left))), bst_reach(*((right2->right))))))); 
                assume $non_null($phys_ptr_cast(SL#right2, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(SL#right2, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(SL#right2, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right2), ==(bst_keys(right2), @_vcc_intset_union(@_vcc_intset_singleton(*((right2->key))), @_vcc_intset_union(bst_keys(*((right2->left))), bst_keys(*((right2->right))))))); 
                assume $non_null($phys_ptr_cast(SL#right2, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(SL#right2, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right2), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right2->left))), @_vcc_ptr_neq_null(*((right2->right)))), ==(bst_max_key(right2), @\int_max(*((right2->key)), @\int_max(bst_max_key(*((right2->left))), bst_max_key(*((right2->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right2->left))), @_vcc_ptr_eq_null(*((right2->right)))), ==(bst_max_key(right2), @\int_max(*((right2->key)), bst_max_key(*((right2->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right2->left))), @_vcc_ptr_neq_null(*((right2->right)))), ==(bst_max_key(right2), @\int_max(*((right2->key)), bst_max_key(*((right2->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right2, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right2), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right2->left))), @_vcc_ptr_neq_null(*((right2->right)))), ==(bst_min_key(right2), @\int_min(*((right2->key)), @\int_min(bst_min_key(*((right2->left))), bst_min_key(*((right2->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right2->left))), @_vcc_ptr_eq_null(*((right2->right)))), ==(bst_min_key(right2), @\int_min(*((right2->key)), bst_min_key(*((right2->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right2->left))), @_vcc_ptr_neq_null(*((right2->right)))), ==(bst_min_key(right2), @\int_min(*((right2->key)), bst_min_key(*((right2->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right2, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(bst(x1), &&(&&(&&(&&(&&(&&(&&(bst(*((x1->left))), bst(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(bst_reach(*((x1->left))), bst_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(bst_keys(*((x1->left))), bst_keys(*((x1->right))))))), @_vcc_oset_disjoint(bst_reach(*((x1->left))), bst_reach(*((x1->right))))), @_vcc_intset_disjoint(bst_keys(*((x1->left))), bst_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(bst_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), bst_min_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> F#bst($s, $phys_ptr_cast(SL#x1, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(bst_reach(x1), @_vcc_oset_union(@_vcc_oset_singleton(x1), @_vcc_oset_union(bst_reach(*((x1->left))), bst_reach(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(SL#x1, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(SL#x1, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(bst_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(bst_keys(*((x1->left))), bst_keys(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(SL#x1, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_max_key(x1), @\int_max(*((x1->key)), @\int_max(bst_max_key(*((x1->left))), bst_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(bst_max_key(x1), @\int_max(*((x1->key)), bst_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_max_key(x1), @\int_max(*((x1->key)), bst_max_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_min_key(x1), @\int_min(*((x1->key)), @\int_min(bst_min_key(*((x1->left))), bst_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(bst_min_key(x1), @\int_min(*((x1->key)), bst_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_min_key(x1), @\int_min(*((x1->key)), bst_min_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0#7), ==(bst(x0#7), &&(&&(&&(&&(&&(&&(&&(bst(*((x0#7->left))), bst(*((x0#7->right)))), unchecked!(@_vcc_oset_in(x0#7, @_vcc_oset_union(bst_reach(*((x0#7->left))), bst_reach(*((x0#7->right))))))), unchecked!(@_vcc_intset_in(*((x0#7->key)), @_vcc_intset_union(bst_keys(*((x0#7->left))), bst_keys(*((x0#7->right))))))), @_vcc_oset_disjoint(bst_reach(*((x0#7->left))), bst_reach(*((x0#7->right))))), @_vcc_intset_disjoint(bst_keys(*((x0#7->left))), bst_keys(*((x0#7->right))))), ==>(@_vcc_ptr_neq_null(*((x0#7->left))), <(bst_max_key(*((x0#7->left))), *((x0#7->key))))), ==>(@_vcc_ptr_neq_null(*((x0#7->right))), <(*((x0#7->key)), bst_min_key(*((x0#7->right)))))))); 
                assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> F#bst($s, $phys_ptr_cast(x0#7, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(x0#7, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0#7), ==(bst_reach(x0#7), @_vcc_oset_union(@_vcc_oset_singleton(x0#7), @_vcc_oset_union(bst_reach(*((x0#7->left))), bst_reach(*((x0#7->right))))))); 
                assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(x0#7, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(x0#7, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0#7), ==(bst_keys(x0#7), @_vcc_intset_union(@_vcc_intset_singleton(*((x0#7->key))), @_vcc_intset_union(bst_keys(*((x0#7->left))), bst_keys(*((x0#7->right))))))); 
                assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(x0#7, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0#7), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_max_key(x0#7), @\int_max(*((x0#7->key)), @\int_max(bst_max_key(*((x0#7->left))), bst_max_key(*((x0#7->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_eq_null(*((x0#7->right)))), ==(bst_max_key(x0#7), @\int_max(*((x0#7->key)), bst_max_key(*((x0#7->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_max_key(x0#7), @\int_max(*((x0#7->key)), bst_max_key(*((x0#7->right)))))))); 
                assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0#7), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_min_key(x0#7), @\int_min(*((x0#7->key)), @\int_min(bst_min_key(*((x0#7->left))), bst_min_key(*((x0#7->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_eq_null(*((x0#7->right)))), ==(bst_min_key(x0#7), @\int_min(*((x0#7->key)), bst_min_key(*((x0#7->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_min_key(x0#7), @\int_min(*((x0#7->key)), bst_min_key(*((x0#7->right)))))))); 
                assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst(right#6), &&(&&(&&(&&(&&(&&(&&(bst(*((right#6->left))), bst(*((right#6->right)))), unchecked!(@_vcc_oset_in(right#6, @_vcc_oset_union(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))))), unchecked!(@_vcc_intset_in(*((right#6->key)), @_vcc_intset_union(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))))), @_vcc_oset_disjoint(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))), @_vcc_intset_disjoint(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))), ==>(@_vcc_ptr_neq_null(*((right#6->left))), <(bst_max_key(*((right#6->left))), *((right#6->key))))), ==>(@_vcc_ptr_neq_null(*((right#6->right))), <(*((right#6->key)), bst_min_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst($s, $phys_ptr_cast(right#6, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(right#6, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst_reach(right#6), @_vcc_oset_union(@_vcc_oset_singleton(right#6), @_vcc_oset_union(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(right#6, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(right#6, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst_keys(right#6), @_vcc_intset_union(@_vcc_intset_singleton(*((right#6->key))), @_vcc_intset_union(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(right#6, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), @\int_max(bst_max_key(*((right#6->left))), bst_max_key(*((right#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_eq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), bst_max_key(*((right#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), bst_max_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), @\int_min(bst_min_key(*((right#6->left))), bst_min_key(*((right#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_eq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), bst_min_key(*((right#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), bst_min_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), ==(bst(left#5), &&(&&(&&(&&(&&(&&(&&(bst(*((left#5->left))), bst(*((left#5->right)))), unchecked!(@_vcc_oset_in(left#5, @_vcc_oset_union(bst_reach(*((left#5->left))), bst_reach(*((left#5->right))))))), unchecked!(@_vcc_intset_in(*((left#5->key)), @_vcc_intset_union(bst_keys(*((left#5->left))), bst_keys(*((left#5->right))))))), @_vcc_oset_disjoint(bst_reach(*((left#5->left))), bst_reach(*((left#5->right))))), @_vcc_intset_disjoint(bst_keys(*((left#5->left))), bst_keys(*((left#5->right))))), ==>(@_vcc_ptr_neq_null(*((left#5->left))), <(bst_max_key(*((left#5->left))), *((left#5->key))))), ==>(@_vcc_ptr_neq_null(*((left#5->right))), <(*((left#5->key)), bst_min_key(*((left#5->right)))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> F#bst($s, $phys_ptr_cast(left#5, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(left#5, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), ==(bst_reach(left#5), @_vcc_oset_union(@_vcc_oset_singleton(left#5), @_vcc_oset_union(bst_reach(*((left#5->left))), bst_reach(*((left#5->right))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(left#5, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(left#5, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), ==(bst_keys(left#5), @_vcc_intset_union(@_vcc_intset_singleton(*((left#5->key))), @_vcc_intset_union(bst_keys(*((left#5->left))), bst_keys(*((left#5->right))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(left#5, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left#5->left))), @_vcc_ptr_neq_null(*((left#5->right)))), ==(bst_max_key(left#5), @\int_max(*((left#5->key)), @\int_max(bst_max_key(*((left#5->left))), bst_max_key(*((left#5->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left#5->left))), @_vcc_ptr_eq_null(*((left#5->right)))), ==(bst_max_key(left#5), @\int_max(*((left#5->key)), bst_max_key(*((left#5->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left#5->left))), @_vcc_ptr_neq_null(*((left#5->right)))), ==(bst_max_key(left#5), @\int_max(*((left#5->key)), bst_max_key(*((left#5->right)))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left#5->left))), @_vcc_ptr_neq_null(*((left#5->right)))), ==(bst_min_key(left#5), @\int_min(*((left#5->key)), @\int_min(bst_min_key(*((left#5->left))), bst_min_key(*((left#5->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left#5->left))), @_vcc_ptr_eq_null(*((left#5->right)))), ==(bst_min_key(left#5), @\int_min(*((left#5->key)), bst_min_key(*((left#5->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left#5->left))), @_vcc_ptr_neq_null(*((left#5->right)))), ==(bst_min_key(left#5), @\int_min(*((left#5->key)), bst_min_key(*((left#5->right)))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), ==(bst(right_left), &&(&&(&&(&&(&&(&&(&&(bst(*((right_left->left))), bst(*((right_left->right)))), unchecked!(@_vcc_oset_in(right_left, @_vcc_oset_union(bst_reach(*((right_left->left))), bst_reach(*((right_left->right))))))), unchecked!(@_vcc_intset_in(*((right_left->key)), @_vcc_intset_union(bst_keys(*((right_left->left))), bst_keys(*((right_left->right))))))), @_vcc_oset_disjoint(bst_reach(*((right_left->left))), bst_reach(*((right_left->right))))), @_vcc_intset_disjoint(bst_keys(*((right_left->left))), bst_keys(*((right_left->right))))), ==>(@_vcc_ptr_neq_null(*((right_left->left))), <(bst_max_key(*((right_left->left))), *((right_left->key))))), ==>(@_vcc_ptr_neq_null(*((right_left->right))), <(*((right_left->key)), bst_min_key(*((right_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#right_left, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#right_left, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), ==(bst_reach(right_left), @_vcc_oset_union(@_vcc_oset_singleton(right_left), @_vcc_oset_union(bst_reach(*((right_left->left))), bst_reach(*((right_left->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#right_left, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#right_left, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), ==(bst_keys(right_left), @_vcc_intset_union(@_vcc_intset_singleton(*((right_left->key))), @_vcc_intset_union(bst_keys(*((right_left->left))), bst_keys(*((right_left->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#right_left, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_max_key(right_left), @\int_max(*((right_left->key)), @\int_max(bst_max_key(*((right_left->left))), bst_max_key(*((right_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_eq_null(*((right_left->right)))), ==(bst_max_key(right_left), @\int_max(*((right_left->key)), bst_max_key(*((right_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_max_key(right_left), @\int_max(*((right_left->key)), bst_max_key(*((right_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_min_key(right_left), @\int_min(*((right_left->key)), @\int_min(bst_min_key(*((right_left->left))), bst_min_key(*((right_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_eq_null(*((right_left->right)))), ==(bst_min_key(right_left), @\int_min(*((right_left->key)), bst_min_key(*((right_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_min_key(right_left), @\int_min(*((right_left->key)), bst_min_key(*((right_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), ==(bst(right_right), &&(&&(&&(&&(&&(&&(&&(bst(*((right_right->left))), bst(*((right_right->right)))), unchecked!(@_vcc_oset_in(right_right, @_vcc_oset_union(bst_reach(*((right_right->left))), bst_reach(*((right_right->right))))))), unchecked!(@_vcc_intset_in(*((right_right->key)), @_vcc_intset_union(bst_keys(*((right_right->left))), bst_keys(*((right_right->right))))))), @_vcc_oset_disjoint(bst_reach(*((right_right->left))), bst_reach(*((right_right->right))))), @_vcc_intset_disjoint(bst_keys(*((right_right->left))), bst_keys(*((right_right->right))))), ==>(@_vcc_ptr_neq_null(*((right_right->left))), <(bst_max_key(*((right_right->left))), *((right_right->key))))), ==>(@_vcc_ptr_neq_null(*((right_right->right))), <(*((right_right->key)), bst_min_key(*((right_right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#right_right, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#right_right, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), ==(bst_reach(right_right), @_vcc_oset_union(@_vcc_oset_singleton(right_right), @_vcc_oset_union(bst_reach(*((right_right->left))), bst_reach(*((right_right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#right_right, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#right_right, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), ==(bst_keys(right_right), @_vcc_intset_union(@_vcc_intset_singleton(*((right_right->key))), @_vcc_intset_union(bst_keys(*((right_right->left))), bst_keys(*((right_right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#right_right, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_right->left))), @_vcc_ptr_neq_null(*((right_right->right)))), ==(bst_max_key(right_right), @\int_max(*((right_right->key)), @\int_max(bst_max_key(*((right_right->left))), bst_max_key(*((right_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_right->left))), @_vcc_ptr_eq_null(*((right_right->right)))), ==(bst_max_key(right_right), @\int_max(*((right_right->key)), bst_max_key(*((right_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_right->left))), @_vcc_ptr_neq_null(*((right_right->right)))), ==(bst_max_key(right_right), @\int_max(*((right_right->key)), bst_max_key(*((right_right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_right->left))), @_vcc_ptr_neq_null(*((right_right->right)))), ==(bst_min_key(right_right), @\int_min(*((right_right->key)), @\int_min(bst_min_key(*((right_right->left))), bst_min_key(*((right_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_right->left))), @_vcc_ptr_eq_null(*((right_right->right)))), ==(bst_min_key(right_right), @\int_min(*((right_right->key)), bst_min_key(*((right_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_right->left))), @_vcc_ptr_neq_null(*((right_right->right)))), ==(bst_min_key(right_right), @\int_min(*((right_right->key)), bst_min_key(*((right_right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst(tmp), &&(&&(&&(&&(&&(&&(&&(bst(*((tmp->left))), bst(*((tmp->right)))), unchecked!(@_vcc_oset_in(tmp, @_vcc_oset_union(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))))), unchecked!(@_vcc_intset_in(*((tmp->key)), @_vcc_intset_union(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))))), @_vcc_oset_disjoint(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))), @_vcc_intset_disjoint(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))), ==>(@_vcc_ptr_neq_null(*((tmp->left))), <(bst_max_key(*((tmp->left))), *((tmp->key))))), ==>(@_vcc_ptr_neq_null(*((tmp->right))), <(*((tmp->key)), bst_min_key(*((tmp->right)))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#tmp, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst_reach(tmp), @_vcc_oset_union(@_vcc_oset_singleton(tmp), @_vcc_oset_union(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#tmp, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#tmp, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst_keys(tmp), @_vcc_intset_union(@_vcc_intset_singleton(*((tmp->key))), @_vcc_intset_union(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#tmp, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), @\int_max(bst_max_key(*((tmp->left))), bst_max_key(*((tmp->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_eq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), bst_max_key(*((tmp->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), bst_max_key(*((tmp->right)))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), @\int_min(bst_min_key(*((tmp->left))), bst_min_key(*((tmp->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_eq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), bst_min_key(*((tmp->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), bst_min_key(*((tmp->right)))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), ==(bst(right_left), &&(&&(&&(&&(&&(&&(&&(bst(*((right_left->left))), bst(*((right_left->right)))), unchecked!(@_vcc_oset_in(right_left, @_vcc_oset_union(bst_reach(*((right_left->left))), bst_reach(*((right_left->right))))))), unchecked!(@_vcc_intset_in(*((right_left->key)), @_vcc_intset_union(bst_keys(*((right_left->left))), bst_keys(*((right_left->right))))))), @_vcc_oset_disjoint(bst_reach(*((right_left->left))), bst_reach(*((right_left->right))))), @_vcc_intset_disjoint(bst_keys(*((right_left->left))), bst_keys(*((right_left->right))))), ==>(@_vcc_ptr_neq_null(*((right_left->left))), <(bst_max_key(*((right_left->left))), *((right_left->key))))), ==>(@_vcc_ptr_neq_null(*((right_left->right))), <(*((right_left->key)), bst_min_key(*((right_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#right_left, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#right_left, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), ==(bst_reach(right_left), @_vcc_oset_union(@_vcc_oset_singleton(right_left), @_vcc_oset_union(bst_reach(*((right_left->left))), bst_reach(*((right_left->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#right_left, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#right_left, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), ==(bst_keys(right_left), @_vcc_intset_union(@_vcc_intset_singleton(*((right_left->key))), @_vcc_intset_union(bst_keys(*((right_left->left))), bst_keys(*((right_left->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#right_left, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_max_key(right_left), @\int_max(*((right_left->key)), @\int_max(bst_max_key(*((right_left->left))), bst_max_key(*((right_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_eq_null(*((right_left->right)))), ==(bst_max_key(right_left), @\int_max(*((right_left->key)), bst_max_key(*((right_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_max_key(right_left), @\int_max(*((right_left->key)), bst_max_key(*((right_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_min_key(right_left), @\int_min(*((right_left->key)), @\int_min(bst_min_key(*((right_left->left))), bst_min_key(*((right_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_eq_null(*((right_left->right)))), ==(bst_min_key(right_left), @\int_min(*((right_left->key)), bst_min_key(*((right_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_min_key(right_left), @\int_min(*((right_left->key)), bst_min_key(*((right_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // _math \state _dryad_S2; 
                // _dryad_S2 := @_vcc_current_state(@state); 
                SL#_dryad_S2 := $current_state($s);
                // _math \state stmtexpr6#17; 
                // stmtexpr6#17 := _dryad_S2; 
                stmtexpr6#17 := SL#_dryad_S2;
                // non-pure function
                // tmp := bst_remove_root_rec(x); 
                call L#tmp := bst_remove_root_rec($phys_ptr_cast(P#x, ^b_node));
                assume $full_stop_ext(#tok$3^40.19, $s);
                // _math \state _dryad_S3; 
                // _dryad_S3 := @_vcc_current_state(@state); 
                SL#_dryad_S3 := $current_state($s);
                // _math \state stmtexpr7#18; 
                // stmtexpr7#18 := _dryad_S3; 
                stmtexpr7#18 := SL#_dryad_S3;
                // assume @_vcc_oset_disjoint(bst_reach(tmp), @_vcc_oset_diff(_dryad_G1, old(_dryad_S2, bst_reach(x)))); 
                assume $oset_disjoint(F#bst_reach($s, $phys_ptr_cast(L#tmp, ^b_node)), $oset_diff(SL#_dryad_G1, F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))));
                // _math \oset res_bst_reach#2; 
                // res_bst_reach#2 := bst_reach(tmp); 
                call res_bst_reach#2 := bst_reach($phys_ptr_cast(L#tmp, ^b_node));
                assume $full_stop_ext(#tok$4^0.0, $s);
                // _dryad_G1 := @_vcc_oset_union(res_bst_reach#2, @_vcc_oset_diff(_dryad_G1, pure(old(_dryad_S2, bst_reach(x))))); 
                SL#_dryad_G1 := $oset_union(res_bst_reach#2, $oset_diff(SL#_dryad_G1, F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))));
                // _math \oset stmtexpr8#19; 
                // stmtexpr8#19 := _dryad_G1; 
                stmtexpr8#19 := SL#_dryad_G1;
                // assume ==(glob_reach(), _dryad_G1); 
                assume F#glob_reach() == SL#_dryad_G1;
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right3))), ==(old(_dryad_S2, bst(right3)), old(_dryad_S3, bst(right3)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#right3, ^b_node))) ==> F#bst(SL#_dryad_S2, $phys_ptr_cast(SL#right3, ^b_node)) == F#bst(SL#_dryad_S3, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right3))), ==(old(_dryad_S2, bst_reach(right3)), old(_dryad_S3, bst_reach(right3)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#right3, ^b_node))) ==> F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#right3, ^b_node)) == F#bst_reach(SL#_dryad_S3, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right3))), ==(old(_dryad_S2, bst_keys(right3)), old(_dryad_S3, bst_keys(right3)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#right3, ^b_node))) ==> F#bst_keys(SL#_dryad_S2, $phys_ptr_cast(SL#right3, ^b_node)) == F#bst_keys(SL#_dryad_S3, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right3))), ==(old(_dryad_S2, bst_max_key(right3)), old(_dryad_S3, bst_max_key(right3)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#right3, ^b_node))) ==> F#bst_max_key(SL#_dryad_S2, $phys_ptr_cast(SL#right3, ^b_node)) == F#bst_max_key(SL#_dryad_S3, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right3))), ==(old(_dryad_S2, bst_min_key(right3)), old(_dryad_S3, bst_min_key(right3)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#right3, ^b_node))) ==> F#bst_min_key(SL#_dryad_S2, $phys_ptr_cast(SL#right3, ^b_node)) == F#bst_min_key(SL#_dryad_S3, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right2))), ==(old(_dryad_S2, bst(right2)), old(_dryad_S3, bst(right2)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#right2, ^b_node))) ==> F#bst(SL#_dryad_S2, $phys_ptr_cast(SL#right2, ^b_node)) == F#bst(SL#_dryad_S3, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right2))), ==(old(_dryad_S2, bst_reach(right2)), old(_dryad_S3, bst_reach(right2)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#right2, ^b_node))) ==> F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#right2, ^b_node)) == F#bst_reach(SL#_dryad_S3, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right2))), ==(old(_dryad_S2, bst_keys(right2)), old(_dryad_S3, bst_keys(right2)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#right2, ^b_node))) ==> F#bst_keys(SL#_dryad_S2, $phys_ptr_cast(SL#right2, ^b_node)) == F#bst_keys(SL#_dryad_S3, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right2))), ==(old(_dryad_S2, bst_max_key(right2)), old(_dryad_S3, bst_max_key(right2)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#right2, ^b_node))) ==> F#bst_max_key(SL#_dryad_S2, $phys_ptr_cast(SL#right2, ^b_node)) == F#bst_max_key(SL#_dryad_S3, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right2))), ==(old(_dryad_S2, bst_min_key(right2)), old(_dryad_S3, bst_min_key(right2)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#right2, ^b_node))) ==> F#bst_min_key(SL#_dryad_S2, $phys_ptr_cast(SL#right2, ^b_node)) == F#bst_min_key(SL#_dryad_S3, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(x1))), ==(old(_dryad_S2, bst(x1)), old(_dryad_S3, bst(x1)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst(SL#_dryad_S3, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(x1))), ==(old(_dryad_S2, bst_reach(x1)), old(_dryad_S3, bst_reach(x1)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_reach(SL#_dryad_S3, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(x1))), ==(old(_dryad_S2, bst_keys(x1)), old(_dryad_S3, bst_keys(x1)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_keys(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_keys(SL#_dryad_S3, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(x1))), ==(old(_dryad_S2, bst_max_key(x1)), old(_dryad_S3, bst_max_key(x1)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_max_key(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_max_key(SL#_dryad_S3, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(x1))), ==(old(_dryad_S2, bst_min_key(x1)), old(_dryad_S3, bst_min_key(x1)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_min_key(SL#_dryad_S2, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_min_key(SL#_dryad_S3, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(x0#7))), ==(old(_dryad_S2, bst(x0#7)), old(_dryad_S3, bst(x0#7)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst(SL#_dryad_S2, $phys_ptr_cast(x0#7, ^b_node)) == F#bst(SL#_dryad_S3, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(x0#7))), ==(old(_dryad_S2, bst_reach(x0#7)), old(_dryad_S3, bst_reach(x0#7)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_reach(SL#_dryad_S3, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(x0#7))), ==(old(_dryad_S2, bst_keys(x0#7)), old(_dryad_S3, bst_keys(x0#7)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_keys(SL#_dryad_S2, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_keys(SL#_dryad_S3, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(x0#7))), ==(old(_dryad_S2, bst_max_key(x0#7)), old(_dryad_S3, bst_max_key(x0#7)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_max_key(SL#_dryad_S2, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_max_key(SL#_dryad_S3, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(x0#7))), ==(old(_dryad_S2, bst_min_key(x0#7)), old(_dryad_S3, bst_min_key(x0#7)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_min_key(SL#_dryad_S2, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_min_key(SL#_dryad_S3, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right#6))), ==(old(_dryad_S2, bst(right#6)), old(_dryad_S3, bst(right#6)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(right#6, ^b_node))) ==> F#bst(SL#_dryad_S2, $phys_ptr_cast(right#6, ^b_node)) == F#bst(SL#_dryad_S3, $phys_ptr_cast(right#6, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right#6))), ==(old(_dryad_S2, bst_reach(right#6)), old(_dryad_S3, bst_reach(right#6)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(right#6, ^b_node))) ==> F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(right#6, ^b_node)) == F#bst_reach(SL#_dryad_S3, $phys_ptr_cast(right#6, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right#6))), ==(old(_dryad_S2, bst_keys(right#6)), old(_dryad_S3, bst_keys(right#6)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(right#6, ^b_node))) ==> F#bst_keys(SL#_dryad_S2, $phys_ptr_cast(right#6, ^b_node)) == F#bst_keys(SL#_dryad_S3, $phys_ptr_cast(right#6, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right#6))), ==(old(_dryad_S2, bst_max_key(right#6)), old(_dryad_S3, bst_max_key(right#6)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(right#6, ^b_node))) ==> F#bst_max_key(SL#_dryad_S2, $phys_ptr_cast(right#6, ^b_node)) == F#bst_max_key(SL#_dryad_S3, $phys_ptr_cast(right#6, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right#6))), ==(old(_dryad_S2, bst_min_key(right#6)), old(_dryad_S3, bst_min_key(right#6)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(right#6, ^b_node))) ==> F#bst_min_key(SL#_dryad_S2, $phys_ptr_cast(right#6, ^b_node)) == F#bst_min_key(SL#_dryad_S3, $phys_ptr_cast(right#6, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(left#5))), ==(old(_dryad_S2, bst(left#5)), old(_dryad_S3, bst(left#5)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(left#5, ^b_node))) ==> F#bst(SL#_dryad_S2, $phys_ptr_cast(left#5, ^b_node)) == F#bst(SL#_dryad_S3, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(left#5))), ==(old(_dryad_S2, bst_reach(left#5)), old(_dryad_S3, bst_reach(left#5)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(left#5, ^b_node))) ==> F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(left#5, ^b_node)) == F#bst_reach(SL#_dryad_S3, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(left#5))), ==(old(_dryad_S2, bst_keys(left#5)), old(_dryad_S3, bst_keys(left#5)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(left#5, ^b_node))) ==> F#bst_keys(SL#_dryad_S2, $phys_ptr_cast(left#5, ^b_node)) == F#bst_keys(SL#_dryad_S3, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(left#5))), ==(old(_dryad_S2, bst_max_key(left#5)), old(_dryad_S3, bst_max_key(left#5)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(left#5, ^b_node))) ==> F#bst_max_key(SL#_dryad_S2, $phys_ptr_cast(left#5, ^b_node)) == F#bst_max_key(SL#_dryad_S3, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(left#5))), ==(old(_dryad_S2, bst_min_key(left#5)), old(_dryad_S3, bst_min_key(left#5)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(left#5, ^b_node))) ==> F#bst_min_key(SL#_dryad_S2, $phys_ptr_cast(left#5, ^b_node)) == F#bst_min_key(SL#_dryad_S3, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right_left))), ==(old(_dryad_S2, bst(right_left)), old(_dryad_S3, bst(right_left)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(L#right_left, ^b_node))) ==> F#bst(SL#_dryad_S2, $phys_ptr_cast(L#right_left, ^b_node)) == F#bst(SL#_dryad_S3, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right_left))), ==(old(_dryad_S2, bst_reach(right_left)), old(_dryad_S3, bst_reach(right_left)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(L#right_left, ^b_node))) ==> F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(L#right_left, ^b_node)) == F#bst_reach(SL#_dryad_S3, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right_left))), ==(old(_dryad_S2, bst_keys(right_left)), old(_dryad_S3, bst_keys(right_left)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(L#right_left, ^b_node))) ==> F#bst_keys(SL#_dryad_S2, $phys_ptr_cast(L#right_left, ^b_node)) == F#bst_keys(SL#_dryad_S3, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right_left))), ==(old(_dryad_S2, bst_max_key(right_left)), old(_dryad_S3, bst_max_key(right_left)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(L#right_left, ^b_node))) ==> F#bst_max_key(SL#_dryad_S2, $phys_ptr_cast(L#right_left, ^b_node)) == F#bst_max_key(SL#_dryad_S3, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right_left))), ==(old(_dryad_S2, bst_min_key(right_left)), old(_dryad_S3, bst_min_key(right_left)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(L#right_left, ^b_node))) ==> F#bst_min_key(SL#_dryad_S2, $phys_ptr_cast(L#right_left, ^b_node)) == F#bst_min_key(SL#_dryad_S3, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right_right))), ==(old(_dryad_S2, bst(right_right)), old(_dryad_S3, bst(right_right)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(L#right_right, ^b_node))) ==> F#bst(SL#_dryad_S2, $phys_ptr_cast(L#right_right, ^b_node)) == F#bst(SL#_dryad_S3, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right_right))), ==(old(_dryad_S2, bst_reach(right_right)), old(_dryad_S3, bst_reach(right_right)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(L#right_right, ^b_node))) ==> F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(L#right_right, ^b_node)) == F#bst_reach(SL#_dryad_S3, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right_right))), ==(old(_dryad_S2, bst_keys(right_right)), old(_dryad_S3, bst_keys(right_right)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(L#right_right, ^b_node))) ==> F#bst_keys(SL#_dryad_S2, $phys_ptr_cast(L#right_right, ^b_node)) == F#bst_keys(SL#_dryad_S3, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right_right))), ==(old(_dryad_S2, bst_max_key(right_right)), old(_dryad_S3, bst_max_key(right_right)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(L#right_right, ^b_node))) ==> F#bst_max_key(SL#_dryad_S2, $phys_ptr_cast(L#right_right, ^b_node)) == F#bst_max_key(SL#_dryad_S3, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(right_right))), ==(old(_dryad_S2, bst_min_key(right_right)), old(_dryad_S3, bst_min_key(right_right)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(L#right_right, ^b_node))) ==> F#bst_min_key(SL#_dryad_S2, $phys_ptr_cast(L#right_right, ^b_node)) == F#bst_min_key(SL#_dryad_S3, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(x))), ==(old(_dryad_S2, bst(x)), old(_dryad_S3, bst(x)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)) == F#bst(SL#_dryad_S3, $phys_ptr_cast(P#x, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(x))), ==(old(_dryad_S2, bst_reach(x)), old(_dryad_S3, bst_reach(x)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)) == F#bst_reach(SL#_dryad_S3, $phys_ptr_cast(P#x, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(x))), ==(old(_dryad_S2, bst_keys(x)), old(_dryad_S3, bst_keys(x)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_keys(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)) == F#bst_keys(SL#_dryad_S3, $phys_ptr_cast(P#x, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(x))), ==(old(_dryad_S2, bst_max_key(x)), old(_dryad_S3, bst_max_key(x)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_max_key(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)) == F#bst_max_key(SL#_dryad_S3, $phys_ptr_cast(P#x, ^b_node));
                // assume ==>(@_vcc_oset_disjoint(old(_dryad_S2, bst_reach(x)), old(_dryad_S2, bst_reach(x))), ==(old(_dryad_S2, bst_min_key(x)), old(_dryad_S3, bst_min_key(x)))); 
                assume $oset_disjoint(F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_min_key(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node)) == F#bst_min_key(SL#_dryad_S3, $phys_ptr_cast(P#x, ^b_node));
                // assume ==>(@_vcc_ptr_neq_null(right3), ==(bst(right3), &&(&&(&&(&&(&&(&&(&&(bst(*((right3->left))), bst(*((right3->right)))), unchecked!(@_vcc_oset_in(right3, @_vcc_oset_union(bst_reach(*((right3->left))), bst_reach(*((right3->right))))))), unchecked!(@_vcc_intset_in(*((right3->key)), @_vcc_intset_union(bst_keys(*((right3->left))), bst_keys(*((right3->right))))))), @_vcc_oset_disjoint(bst_reach(*((right3->left))), bst_reach(*((right3->right))))), @_vcc_intset_disjoint(bst_keys(*((right3->left))), bst_keys(*((right3->right))))), ==>(@_vcc_ptr_neq_null(*((right3->left))), <(bst_max_key(*((right3->left))), *((right3->key))))), ==>(@_vcc_ptr_neq_null(*((right3->right))), <(*((right3->key)), bst_min_key(*((right3->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right3, ^b_node)) ==> F#bst($s, $phys_ptr_cast(SL#right3, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(SL#right3, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right3), ==(bst_reach(right3), @_vcc_oset_union(@_vcc_oset_singleton(right3), @_vcc_oset_union(bst_reach(*((right3->left))), bst_reach(*((right3->right))))))); 
                assume $non_null($phys_ptr_cast(SL#right3, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(SL#right3, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(SL#right3, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right3), ==(bst_keys(right3), @_vcc_intset_union(@_vcc_intset_singleton(*((right3->key))), @_vcc_intset_union(bst_keys(*((right3->left))), bst_keys(*((right3->right))))))); 
                assume $non_null($phys_ptr_cast(SL#right3, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(SL#right3, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right3), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right3->left))), @_vcc_ptr_neq_null(*((right3->right)))), ==(bst_max_key(right3), @\int_max(*((right3->key)), @\int_max(bst_max_key(*((right3->left))), bst_max_key(*((right3->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right3->left))), @_vcc_ptr_eq_null(*((right3->right)))), ==(bst_max_key(right3), @\int_max(*((right3->key)), bst_max_key(*((right3->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right3->left))), @_vcc_ptr_neq_null(*((right3->right)))), ==(bst_max_key(right3), @\int_max(*((right3->key)), bst_max_key(*((right3->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right3, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right3), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right3->left))), @_vcc_ptr_neq_null(*((right3->right)))), ==(bst_min_key(right3), @\int_min(*((right3->key)), @\int_min(bst_min_key(*((right3->left))), bst_min_key(*((right3->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right3->left))), @_vcc_ptr_eq_null(*((right3->right)))), ==(bst_min_key(right3), @\int_min(*((right3->key)), bst_min_key(*((right3->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right3->left))), @_vcc_ptr_neq_null(*((right3->right)))), ==(bst_min_key(right3), @\int_min(*((right3->key)), bst_min_key(*((right3->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right3, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right2), ==(bst(right2), &&(&&(&&(&&(&&(&&(&&(bst(*((right2->left))), bst(*((right2->right)))), unchecked!(@_vcc_oset_in(right2, @_vcc_oset_union(bst_reach(*((right2->left))), bst_reach(*((right2->right))))))), unchecked!(@_vcc_intset_in(*((right2->key)), @_vcc_intset_union(bst_keys(*((right2->left))), bst_keys(*((right2->right))))))), @_vcc_oset_disjoint(bst_reach(*((right2->left))), bst_reach(*((right2->right))))), @_vcc_intset_disjoint(bst_keys(*((right2->left))), bst_keys(*((right2->right))))), ==>(@_vcc_ptr_neq_null(*((right2->left))), <(bst_max_key(*((right2->left))), *((right2->key))))), ==>(@_vcc_ptr_neq_null(*((right2->right))), <(*((right2->key)), bst_min_key(*((right2->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right2, ^b_node)) ==> F#bst($s, $phys_ptr_cast(SL#right2, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(SL#right2, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right2), ==(bst_reach(right2), @_vcc_oset_union(@_vcc_oset_singleton(right2), @_vcc_oset_union(bst_reach(*((right2->left))), bst_reach(*((right2->right))))))); 
                assume $non_null($phys_ptr_cast(SL#right2, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(SL#right2, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(SL#right2, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right2), ==(bst_keys(right2), @_vcc_intset_union(@_vcc_intset_singleton(*((right2->key))), @_vcc_intset_union(bst_keys(*((right2->left))), bst_keys(*((right2->right))))))); 
                assume $non_null($phys_ptr_cast(SL#right2, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(SL#right2, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right2), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right2->left))), @_vcc_ptr_neq_null(*((right2->right)))), ==(bst_max_key(right2), @\int_max(*((right2->key)), @\int_max(bst_max_key(*((right2->left))), bst_max_key(*((right2->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right2->left))), @_vcc_ptr_eq_null(*((right2->right)))), ==(bst_max_key(right2), @\int_max(*((right2->key)), bst_max_key(*((right2->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right2->left))), @_vcc_ptr_neq_null(*((right2->right)))), ==(bst_max_key(right2), @\int_max(*((right2->key)), bst_max_key(*((right2->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right2, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right2), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right2->left))), @_vcc_ptr_neq_null(*((right2->right)))), ==(bst_min_key(right2), @\int_min(*((right2->key)), @\int_min(bst_min_key(*((right2->left))), bst_min_key(*((right2->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right2->left))), @_vcc_ptr_eq_null(*((right2->right)))), ==(bst_min_key(right2), @\int_min(*((right2->key)), bst_min_key(*((right2->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right2->left))), @_vcc_ptr_neq_null(*((right2->right)))), ==(bst_min_key(right2), @\int_min(*((right2->key)), bst_min_key(*((right2->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right2, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(bst(x1), &&(&&(&&(&&(&&(&&(&&(bst(*((x1->left))), bst(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(bst_reach(*((x1->left))), bst_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(bst_keys(*((x1->left))), bst_keys(*((x1->right))))))), @_vcc_oset_disjoint(bst_reach(*((x1->left))), bst_reach(*((x1->right))))), @_vcc_intset_disjoint(bst_keys(*((x1->left))), bst_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(bst_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), bst_min_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> F#bst($s, $phys_ptr_cast(SL#x1, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(bst_reach(x1), @_vcc_oset_union(@_vcc_oset_singleton(x1), @_vcc_oset_union(bst_reach(*((x1->left))), bst_reach(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(SL#x1, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(SL#x1, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(bst_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(bst_keys(*((x1->left))), bst_keys(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(SL#x1, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_max_key(x1), @\int_max(*((x1->key)), @\int_max(bst_max_key(*((x1->left))), bst_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(bst_max_key(x1), @\int_max(*((x1->key)), bst_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_max_key(x1), @\int_max(*((x1->key)), bst_max_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_min_key(x1), @\int_min(*((x1->key)), @\int_min(bst_min_key(*((x1->left))), bst_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(bst_min_key(x1), @\int_min(*((x1->key)), bst_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_min_key(x1), @\int_min(*((x1->key)), bst_min_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0#7), ==(bst(x0#7), &&(&&(&&(&&(&&(&&(&&(bst(*((x0#7->left))), bst(*((x0#7->right)))), unchecked!(@_vcc_oset_in(x0#7, @_vcc_oset_union(bst_reach(*((x0#7->left))), bst_reach(*((x0#7->right))))))), unchecked!(@_vcc_intset_in(*((x0#7->key)), @_vcc_intset_union(bst_keys(*((x0#7->left))), bst_keys(*((x0#7->right))))))), @_vcc_oset_disjoint(bst_reach(*((x0#7->left))), bst_reach(*((x0#7->right))))), @_vcc_intset_disjoint(bst_keys(*((x0#7->left))), bst_keys(*((x0#7->right))))), ==>(@_vcc_ptr_neq_null(*((x0#7->left))), <(bst_max_key(*((x0#7->left))), *((x0#7->key))))), ==>(@_vcc_ptr_neq_null(*((x0#7->right))), <(*((x0#7->key)), bst_min_key(*((x0#7->right)))))))); 
                assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> F#bst($s, $phys_ptr_cast(x0#7, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(x0#7, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0#7), ==(bst_reach(x0#7), @_vcc_oset_union(@_vcc_oset_singleton(x0#7), @_vcc_oset_union(bst_reach(*((x0#7->left))), bst_reach(*((x0#7->right))))))); 
                assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(x0#7, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(x0#7, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0#7), ==(bst_keys(x0#7), @_vcc_intset_union(@_vcc_intset_singleton(*((x0#7->key))), @_vcc_intset_union(bst_keys(*((x0#7->left))), bst_keys(*((x0#7->right))))))); 
                assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(x0#7, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0#7), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_max_key(x0#7), @\int_max(*((x0#7->key)), @\int_max(bst_max_key(*((x0#7->left))), bst_max_key(*((x0#7->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_eq_null(*((x0#7->right)))), ==(bst_max_key(x0#7), @\int_max(*((x0#7->key)), bst_max_key(*((x0#7->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_max_key(x0#7), @\int_max(*((x0#7->key)), bst_max_key(*((x0#7->right)))))))); 
                assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0#7), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_min_key(x0#7), @\int_min(*((x0#7->key)), @\int_min(bst_min_key(*((x0#7->left))), bst_min_key(*((x0#7->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_eq_null(*((x0#7->right)))), ==(bst_min_key(x0#7), @\int_min(*((x0#7->key)), bst_min_key(*((x0#7->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_min_key(x0#7), @\int_min(*((x0#7->key)), bst_min_key(*((x0#7->right)))))))); 
                assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst(right#6), &&(&&(&&(&&(&&(&&(&&(bst(*((right#6->left))), bst(*((right#6->right)))), unchecked!(@_vcc_oset_in(right#6, @_vcc_oset_union(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))))), unchecked!(@_vcc_intset_in(*((right#6->key)), @_vcc_intset_union(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))))), @_vcc_oset_disjoint(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))), @_vcc_intset_disjoint(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))), ==>(@_vcc_ptr_neq_null(*((right#6->left))), <(bst_max_key(*((right#6->left))), *((right#6->key))))), ==>(@_vcc_ptr_neq_null(*((right#6->right))), <(*((right#6->key)), bst_min_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst($s, $phys_ptr_cast(right#6, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(right#6, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst_reach(right#6), @_vcc_oset_union(@_vcc_oset_singleton(right#6), @_vcc_oset_union(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(right#6, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(right#6, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst_keys(right#6), @_vcc_intset_union(@_vcc_intset_singleton(*((right#6->key))), @_vcc_intset_union(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(right#6, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), @\int_max(bst_max_key(*((right#6->left))), bst_max_key(*((right#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_eq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), bst_max_key(*((right#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), bst_max_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), @\int_min(bst_min_key(*((right#6->left))), bst_min_key(*((right#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_eq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), bst_min_key(*((right#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), bst_min_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), ==(bst(left#5), &&(&&(&&(&&(&&(&&(&&(bst(*((left#5->left))), bst(*((left#5->right)))), unchecked!(@_vcc_oset_in(left#5, @_vcc_oset_union(bst_reach(*((left#5->left))), bst_reach(*((left#5->right))))))), unchecked!(@_vcc_intset_in(*((left#5->key)), @_vcc_intset_union(bst_keys(*((left#5->left))), bst_keys(*((left#5->right))))))), @_vcc_oset_disjoint(bst_reach(*((left#5->left))), bst_reach(*((left#5->right))))), @_vcc_intset_disjoint(bst_keys(*((left#5->left))), bst_keys(*((left#5->right))))), ==>(@_vcc_ptr_neq_null(*((left#5->left))), <(bst_max_key(*((left#5->left))), *((left#5->key))))), ==>(@_vcc_ptr_neq_null(*((left#5->right))), <(*((left#5->key)), bst_min_key(*((left#5->right)))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> F#bst($s, $phys_ptr_cast(left#5, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(left#5, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), ==(bst_reach(left#5), @_vcc_oset_union(@_vcc_oset_singleton(left#5), @_vcc_oset_union(bst_reach(*((left#5->left))), bst_reach(*((left#5->right))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(left#5, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(left#5, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), ==(bst_keys(left#5), @_vcc_intset_union(@_vcc_intset_singleton(*((left#5->key))), @_vcc_intset_union(bst_keys(*((left#5->left))), bst_keys(*((left#5->right))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(left#5, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left#5->left))), @_vcc_ptr_neq_null(*((left#5->right)))), ==(bst_max_key(left#5), @\int_max(*((left#5->key)), @\int_max(bst_max_key(*((left#5->left))), bst_max_key(*((left#5->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left#5->left))), @_vcc_ptr_eq_null(*((left#5->right)))), ==(bst_max_key(left#5), @\int_max(*((left#5->key)), bst_max_key(*((left#5->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left#5->left))), @_vcc_ptr_neq_null(*((left#5->right)))), ==(bst_max_key(left#5), @\int_max(*((left#5->key)), bst_max_key(*((left#5->right)))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left#5->left))), @_vcc_ptr_neq_null(*((left#5->right)))), ==(bst_min_key(left#5), @\int_min(*((left#5->key)), @\int_min(bst_min_key(*((left#5->left))), bst_min_key(*((left#5->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left#5->left))), @_vcc_ptr_eq_null(*((left#5->right)))), ==(bst_min_key(left#5), @\int_min(*((left#5->key)), bst_min_key(*((left#5->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left#5->left))), @_vcc_ptr_neq_null(*((left#5->right)))), ==(bst_min_key(left#5), @\int_min(*((left#5->key)), bst_min_key(*((left#5->right)))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), ==(bst(right_left), &&(&&(&&(&&(&&(&&(&&(bst(*((right_left->left))), bst(*((right_left->right)))), unchecked!(@_vcc_oset_in(right_left, @_vcc_oset_union(bst_reach(*((right_left->left))), bst_reach(*((right_left->right))))))), unchecked!(@_vcc_intset_in(*((right_left->key)), @_vcc_intset_union(bst_keys(*((right_left->left))), bst_keys(*((right_left->right))))))), @_vcc_oset_disjoint(bst_reach(*((right_left->left))), bst_reach(*((right_left->right))))), @_vcc_intset_disjoint(bst_keys(*((right_left->left))), bst_keys(*((right_left->right))))), ==>(@_vcc_ptr_neq_null(*((right_left->left))), <(bst_max_key(*((right_left->left))), *((right_left->key))))), ==>(@_vcc_ptr_neq_null(*((right_left->right))), <(*((right_left->key)), bst_min_key(*((right_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#right_left, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#right_left, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), ==(bst_reach(right_left), @_vcc_oset_union(@_vcc_oset_singleton(right_left), @_vcc_oset_union(bst_reach(*((right_left->left))), bst_reach(*((right_left->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#right_left, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#right_left, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), ==(bst_keys(right_left), @_vcc_intset_union(@_vcc_intset_singleton(*((right_left->key))), @_vcc_intset_union(bst_keys(*((right_left->left))), bst_keys(*((right_left->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#right_left, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_max_key(right_left), @\int_max(*((right_left->key)), @\int_max(bst_max_key(*((right_left->left))), bst_max_key(*((right_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_eq_null(*((right_left->right)))), ==(bst_max_key(right_left), @\int_max(*((right_left->key)), bst_max_key(*((right_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_max_key(right_left), @\int_max(*((right_left->key)), bst_max_key(*((right_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_min_key(right_left), @\int_min(*((right_left->key)), @\int_min(bst_min_key(*((right_left->left))), bst_min_key(*((right_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_eq_null(*((right_left->right)))), ==(bst_min_key(right_left), @\int_min(*((right_left->key)), bst_min_key(*((right_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_min_key(right_left), @\int_min(*((right_left->key)), bst_min_key(*((right_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), ==(bst(right_right), &&(&&(&&(&&(&&(&&(&&(bst(*((right_right->left))), bst(*((right_right->right)))), unchecked!(@_vcc_oset_in(right_right, @_vcc_oset_union(bst_reach(*((right_right->left))), bst_reach(*((right_right->right))))))), unchecked!(@_vcc_intset_in(*((right_right->key)), @_vcc_intset_union(bst_keys(*((right_right->left))), bst_keys(*((right_right->right))))))), @_vcc_oset_disjoint(bst_reach(*((right_right->left))), bst_reach(*((right_right->right))))), @_vcc_intset_disjoint(bst_keys(*((right_right->left))), bst_keys(*((right_right->right))))), ==>(@_vcc_ptr_neq_null(*((right_right->left))), <(bst_max_key(*((right_right->left))), *((right_right->key))))), ==>(@_vcc_ptr_neq_null(*((right_right->right))), <(*((right_right->key)), bst_min_key(*((right_right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#right_right, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#right_right, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), ==(bst_reach(right_right), @_vcc_oset_union(@_vcc_oset_singleton(right_right), @_vcc_oset_union(bst_reach(*((right_right->left))), bst_reach(*((right_right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#right_right, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#right_right, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), ==(bst_keys(right_right), @_vcc_intset_union(@_vcc_intset_singleton(*((right_right->key))), @_vcc_intset_union(bst_keys(*((right_right->left))), bst_keys(*((right_right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#right_right, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_right->left))), @_vcc_ptr_neq_null(*((right_right->right)))), ==(bst_max_key(right_right), @\int_max(*((right_right->key)), @\int_max(bst_max_key(*((right_right->left))), bst_max_key(*((right_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_right->left))), @_vcc_ptr_eq_null(*((right_right->right)))), ==(bst_max_key(right_right), @\int_max(*((right_right->key)), bst_max_key(*((right_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_right->left))), @_vcc_ptr_neq_null(*((right_right->right)))), ==(bst_max_key(right_right), @\int_max(*((right_right->key)), bst_max_key(*((right_right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_right->left))), @_vcc_ptr_neq_null(*((right_right->right)))), ==(bst_min_key(right_right), @\int_min(*((right_right->key)), @\int_min(bst_min_key(*((right_right->left))), bst_min_key(*((right_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_right->left))), @_vcc_ptr_eq_null(*((right_right->right)))), ==(bst_min_key(right_right), @\int_min(*((right_right->key)), bst_min_key(*((right_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_right->left))), @_vcc_ptr_neq_null(*((right_right->right)))), ==(bst_min_key(right_right), @\int_min(*((right_right->key)), bst_min_key(*((right_right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst(tmp), &&(&&(&&(&&(&&(&&(&&(bst(*((tmp->left))), bst(*((tmp->right)))), unchecked!(@_vcc_oset_in(tmp, @_vcc_oset_union(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))))), unchecked!(@_vcc_intset_in(*((tmp->key)), @_vcc_intset_union(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))))), @_vcc_oset_disjoint(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))), @_vcc_intset_disjoint(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))), ==>(@_vcc_ptr_neq_null(*((tmp->left))), <(bst_max_key(*((tmp->left))), *((tmp->key))))), ==>(@_vcc_ptr_neq_null(*((tmp->right))), <(*((tmp->key)), bst_min_key(*((tmp->right)))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#tmp, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst_reach(tmp), @_vcc_oset_union(@_vcc_oset_singleton(tmp), @_vcc_oset_union(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#tmp, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#tmp, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst_keys(tmp), @_vcc_intset_union(@_vcc_intset_singleton(*((tmp->key))), @_vcc_intset_union(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#tmp, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), @\int_max(bst_max_key(*((tmp->left))), bst_max_key(*((tmp->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_eq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), bst_max_key(*((tmp->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), bst_max_key(*((tmp->right)))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), @\int_min(bst_min_key(*((tmp->left))), bst_min_key(*((tmp->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_eq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), bst_min_key(*((tmp->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), bst_min_key(*((tmp->right)))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(!(@_vcc_oset_in(right3, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((right3->left)), old(_dryad_S2, *((right3->left))))); 
                assume !$oset_in($phys_ptr_cast(SL#right3, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(right3, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((right3->right)), old(_dryad_S2, *((right3->right))))); 
                assume !$oset_in($phys_ptr_cast(SL#right3, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(right3, old(_dryad_S2, bst_reach(x)))), ==(*((right3->key)), old(_dryad_S2, *((right3->key))))); 
                assume !$oset_in($phys_ptr_cast(SL#right3, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)) == $rd_inv(SL#_dryad_S2, b_node.key, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(!(@_vcc_oset_in(right2, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((right2->left)), old(_dryad_S2, *((right2->left))))); 
                assume !$oset_in($phys_ptr_cast(SL#right2, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(right2, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((right2->right)), old(_dryad_S2, *((right2->right))))); 
                assume !$oset_in($phys_ptr_cast(SL#right2, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(right2, old(_dryad_S2, bst_reach(x)))), ==(*((right2->key)), old(_dryad_S2, *((right2->key))))); 
                assume !$oset_in($phys_ptr_cast(SL#right2, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)) == $rd_inv(SL#_dryad_S2, b_node.key, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((x1->left)), old(_dryad_S2, *((x1->left))))); 
                assume !$oset_in($phys_ptr_cast(SL#x1, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((x1->right)), old(_dryad_S2, *((x1->right))))); 
                assume !$oset_in($phys_ptr_cast(SL#x1, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(x1, old(_dryad_S2, bst_reach(x)))), ==(*((x1->key)), old(_dryad_S2, *((x1->key))))); 
                assume !$oset_in($phys_ptr_cast(SL#x1, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)) == $rd_inv(SL#_dryad_S2, b_node.key, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(!(@_vcc_oset_in(x0#7, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((x0#7->left)), old(_dryad_S2, *((x0#7->left))))); 
                assume !$oset_in($phys_ptr_cast(x0#7, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(x0#7, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((x0#7->right)), old(_dryad_S2, *((x0#7->right))))); 
                assume !$oset_in($phys_ptr_cast(x0#7, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(x0#7, old(_dryad_S2, bst_reach(x)))), ==(*((x0#7->key)), old(_dryad_S2, *((x0#7->key))))); 
                assume !$oset_in($phys_ptr_cast(x0#7, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)) == $rd_inv(SL#_dryad_S2, b_node.key, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(!(@_vcc_oset_in(right#6, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((right#6->left)), old(_dryad_S2, *((right#6->left))))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(right#6, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((right#6->right)), old(_dryad_S2, *((right#6->right))))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(right#6, old(_dryad_S2, bst_reach(x)))), ==(*((right#6->key)), old(_dryad_S2, *((right#6->key))))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)) == $rd_inv(SL#_dryad_S2, b_node.key, $phys_ptr_cast(right#6, ^b_node));
                // assume ==>(!(@_vcc_oset_in(left#5, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((left#5->left)), old(_dryad_S2, *((left#5->left))))); 
                assume !$oset_in($phys_ptr_cast(left#5, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(left#5, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((left#5->right)), old(_dryad_S2, *((left#5->right))))); 
                assume !$oset_in($phys_ptr_cast(left#5, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(left#5, old(_dryad_S2, bst_reach(x)))), ==(*((left#5->key)), old(_dryad_S2, *((left#5->key))))); 
                assume !$oset_in($phys_ptr_cast(left#5, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)) == $rd_inv(SL#_dryad_S2, b_node.key, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(!(@_vcc_oset_in(right_left, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((right_left->left)), old(_dryad_S2, *((right_left->left))))); 
                assume !$oset_in($phys_ptr_cast(L#right_left, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(right_left, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((right_left->right)), old(_dryad_S2, *((right_left->right))))); 
                assume !$oset_in($phys_ptr_cast(L#right_left, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(right_left, old(_dryad_S2, bst_reach(x)))), ==(*((right_left->key)), old(_dryad_S2, *((right_left->key))))); 
                assume !$oset_in($phys_ptr_cast(L#right_left, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)) == $rd_inv(SL#_dryad_S2, b_node.key, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(!(@_vcc_oset_in(right_right, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((right_right->left)), old(_dryad_S2, *((right_right->left))))); 
                assume !$oset_in($phys_ptr_cast(L#right_right, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(right_right, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((right_right->right)), old(_dryad_S2, *((right_right->right))))); 
                assume !$oset_in($phys_ptr_cast(L#right_right, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(right_right, old(_dryad_S2, bst_reach(x)))), ==(*((right_right->key)), old(_dryad_S2, *((right_right->key))))); 
                assume !$oset_in($phys_ptr_cast(L#right_right, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)) == $rd_inv(SL#_dryad_S2, b_node.key, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((x->left)), old(_dryad_S2, *((x->left))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S2, bst_reach(x)))), @_vcc_ptr_eq_pure(*((x->right)), old(_dryad_S2, *((x->right))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S2, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_oset_in(x, old(_dryad_S2, bst_reach(x)))), ==(*((x->key)), old(_dryad_S2, *((x->key))))); 
                assume !$oset_in($phys_ptr_cast(P#x, ^b_node), F#bst_reach(SL#_dryad_S2, $phys_ptr_cast(P#x, ^b_node))) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) == $rd_inv(SL#_dryad_S2, b_node.key, $phys_ptr_cast(P#x, ^b_node));
                // _math \state _dryad_S4; 
                // _dryad_S4 := @_vcc_current_state(@state); 
                SL#_dryad_S4 := $current_state($s);
                // _math \state stmtexpr9#20; 
                // stmtexpr9#20 := _dryad_S4; 
                stmtexpr9#20 := SL#_dryad_S4;
                // assert @prim_writes_check((right#6->left)); 
                assert $writable_prim($s, #wrTime$3^5.3, $dot($phys_ptr_cast(right#6, ^b_node), b_node.left));
                // *(right#6->left) := tmp; 
                call $write_int(b_node.left, $phys_ptr_cast(right#6, ^b_node), $ptr_to_int($phys_ptr_cast(L#tmp, ^b_node)));
                assume $full_stop_ext(#tok$3^42.5, $s);
                // _math \state _dryad_S5; 
                // _dryad_S5 := @_vcc_current_state(@state); 
                SL#_dryad_S5 := $current_state($s);
                // _math \state stmtexpr10#21; 
                // stmtexpr10#21 := _dryad_S5; 
                stmtexpr10#21 := SL#_dryad_S5;
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(*((right#6->right)))))), ==(old(_dryad_S4, bst(*((right#6->right)))), old(_dryad_S5, bst(*((right#6->right)))))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) ==> F#bst(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) == F#bst(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(*((right#6->right)))))), ==(old(_dryad_S4, bst_reach(*((right#6->right)))), old(_dryad_S5, bst_reach(*((right#6->right)))))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) ==> F#bst_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) == F#bst_reach(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(*((right#6->right)))))), ==(old(_dryad_S4, bst_keys(*((right#6->right)))), old(_dryad_S5, bst_keys(*((right#6->right)))))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) ==> F#bst_keys(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) == F#bst_keys(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(*((right#6->right)))))), ==(old(_dryad_S4, bst_max_key(*((right#6->right)))), old(_dryad_S5, bst_max_key(*((right#6->right)))))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) ==> F#bst_max_key(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) == F#bst_max_key(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(*((right#6->right)))))), ==(old(_dryad_S4, bst_min_key(*((right#6->right)))), old(_dryad_S5, bst_min_key(*((right#6->right)))))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) ==> F#bst_min_key(SL#_dryad_S4, $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) == F#bst_min_key(SL#_dryad_S5, $rd_phys_ptr(SL#_dryad_S5, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right3)))), ==(old(_dryad_S4, bst(right3)), old(_dryad_S5, bst(right3)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#right3, ^b_node))) ==> F#bst(SL#_dryad_S4, $phys_ptr_cast(SL#right3, ^b_node)) == F#bst(SL#_dryad_S5, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right3)))), ==(old(_dryad_S4, bst_reach(right3)), old(_dryad_S5, bst_reach(right3)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#right3, ^b_node))) ==> F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#right3, ^b_node)) == F#bst_reach(SL#_dryad_S5, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right3)))), ==(old(_dryad_S4, bst_keys(right3)), old(_dryad_S5, bst_keys(right3)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#right3, ^b_node))) ==> F#bst_keys(SL#_dryad_S4, $phys_ptr_cast(SL#right3, ^b_node)) == F#bst_keys(SL#_dryad_S5, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right3)))), ==(old(_dryad_S4, bst_max_key(right3)), old(_dryad_S5, bst_max_key(right3)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#right3, ^b_node))) ==> F#bst_max_key(SL#_dryad_S4, $phys_ptr_cast(SL#right3, ^b_node)) == F#bst_max_key(SL#_dryad_S5, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right3)))), ==(old(_dryad_S4, bst_min_key(right3)), old(_dryad_S5, bst_min_key(right3)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#right3, ^b_node))) ==> F#bst_min_key(SL#_dryad_S4, $phys_ptr_cast(SL#right3, ^b_node)) == F#bst_min_key(SL#_dryad_S5, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right2)))), ==(old(_dryad_S4, bst(right2)), old(_dryad_S5, bst(right2)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#right2, ^b_node))) ==> F#bst(SL#_dryad_S4, $phys_ptr_cast(SL#right2, ^b_node)) == F#bst(SL#_dryad_S5, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right2)))), ==(old(_dryad_S4, bst_reach(right2)), old(_dryad_S5, bst_reach(right2)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#right2, ^b_node))) ==> F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#right2, ^b_node)) == F#bst_reach(SL#_dryad_S5, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right2)))), ==(old(_dryad_S4, bst_keys(right2)), old(_dryad_S5, bst_keys(right2)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#right2, ^b_node))) ==> F#bst_keys(SL#_dryad_S4, $phys_ptr_cast(SL#right2, ^b_node)) == F#bst_keys(SL#_dryad_S5, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right2)))), ==(old(_dryad_S4, bst_max_key(right2)), old(_dryad_S5, bst_max_key(right2)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#right2, ^b_node))) ==> F#bst_max_key(SL#_dryad_S4, $phys_ptr_cast(SL#right2, ^b_node)) == F#bst_max_key(SL#_dryad_S5, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right2)))), ==(old(_dryad_S4, bst_min_key(right2)), old(_dryad_S5, bst_min_key(right2)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#right2, ^b_node))) ==> F#bst_min_key(SL#_dryad_S4, $phys_ptr_cast(SL#right2, ^b_node)) == F#bst_min_key(SL#_dryad_S5, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(x1)))), ==(old(_dryad_S4, bst(x1)), old(_dryad_S5, bst(x1)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst(SL#_dryad_S5, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(x1)))), ==(old(_dryad_S4, bst_reach(x1)), old(_dryad_S5, bst_reach(x1)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_reach(SL#_dryad_S5, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(x1)))), ==(old(_dryad_S4, bst_keys(x1)), old(_dryad_S5, bst_keys(x1)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_keys(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_keys(SL#_dryad_S5, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(x1)))), ==(old(_dryad_S4, bst_max_key(x1)), old(_dryad_S5, bst_max_key(x1)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_max_key(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_max_key(SL#_dryad_S5, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(x1)))), ==(old(_dryad_S4, bst_min_key(x1)), old(_dryad_S5, bst_min_key(x1)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^b_node))) ==> F#bst_min_key(SL#_dryad_S4, $phys_ptr_cast(SL#x1, ^b_node)) == F#bst_min_key(SL#_dryad_S5, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(x0#7)))), ==(old(_dryad_S4, bst(x0#7)), old(_dryad_S5, bst(x0#7)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst(SL#_dryad_S4, $phys_ptr_cast(x0#7, ^b_node)) == F#bst(SL#_dryad_S5, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(x0#7)))), ==(old(_dryad_S4, bst_reach(x0#7)), old(_dryad_S5, bst_reach(x0#7)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_reach(SL#_dryad_S5, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(x0#7)))), ==(old(_dryad_S4, bst_keys(x0#7)), old(_dryad_S5, bst_keys(x0#7)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_keys(SL#_dryad_S4, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_keys(SL#_dryad_S5, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(x0#7)))), ==(old(_dryad_S4, bst_max_key(x0#7)), old(_dryad_S5, bst_max_key(x0#7)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_max_key(SL#_dryad_S4, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_max_key(SL#_dryad_S5, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(x0#7)))), ==(old(_dryad_S4, bst_min_key(x0#7)), old(_dryad_S5, bst_min_key(x0#7)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(x0#7, ^b_node))) ==> F#bst_min_key(SL#_dryad_S4, $phys_ptr_cast(x0#7, ^b_node)) == F#bst_min_key(SL#_dryad_S5, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(left#5)))), ==(old(_dryad_S4, bst(left#5)), old(_dryad_S5, bst(left#5)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(left#5, ^b_node))) ==> F#bst(SL#_dryad_S4, $phys_ptr_cast(left#5, ^b_node)) == F#bst(SL#_dryad_S5, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(left#5)))), ==(old(_dryad_S4, bst_reach(left#5)), old(_dryad_S5, bst_reach(left#5)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(left#5, ^b_node))) ==> F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(left#5, ^b_node)) == F#bst_reach(SL#_dryad_S5, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(left#5)))), ==(old(_dryad_S4, bst_keys(left#5)), old(_dryad_S5, bst_keys(left#5)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(left#5, ^b_node))) ==> F#bst_keys(SL#_dryad_S4, $phys_ptr_cast(left#5, ^b_node)) == F#bst_keys(SL#_dryad_S5, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(left#5)))), ==(old(_dryad_S4, bst_max_key(left#5)), old(_dryad_S5, bst_max_key(left#5)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(left#5, ^b_node))) ==> F#bst_max_key(SL#_dryad_S4, $phys_ptr_cast(left#5, ^b_node)) == F#bst_max_key(SL#_dryad_S5, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(left#5)))), ==(old(_dryad_S4, bst_min_key(left#5)), old(_dryad_S5, bst_min_key(left#5)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(left#5, ^b_node))) ==> F#bst_min_key(SL#_dryad_S4, $phys_ptr_cast(left#5, ^b_node)) == F#bst_min_key(SL#_dryad_S5, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right_left)))), ==(old(_dryad_S4, bst(right_left)), old(_dryad_S5, bst(right_left)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#right_left, ^b_node))) ==> F#bst(SL#_dryad_S4, $phys_ptr_cast(L#right_left, ^b_node)) == F#bst(SL#_dryad_S5, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right_left)))), ==(old(_dryad_S4, bst_reach(right_left)), old(_dryad_S5, bst_reach(right_left)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#right_left, ^b_node))) ==> F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#right_left, ^b_node)) == F#bst_reach(SL#_dryad_S5, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right_left)))), ==(old(_dryad_S4, bst_keys(right_left)), old(_dryad_S5, bst_keys(right_left)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#right_left, ^b_node))) ==> F#bst_keys(SL#_dryad_S4, $phys_ptr_cast(L#right_left, ^b_node)) == F#bst_keys(SL#_dryad_S5, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right_left)))), ==(old(_dryad_S4, bst_max_key(right_left)), old(_dryad_S5, bst_max_key(right_left)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#right_left, ^b_node))) ==> F#bst_max_key(SL#_dryad_S4, $phys_ptr_cast(L#right_left, ^b_node)) == F#bst_max_key(SL#_dryad_S5, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right_left)))), ==(old(_dryad_S4, bst_min_key(right_left)), old(_dryad_S5, bst_min_key(right_left)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#right_left, ^b_node))) ==> F#bst_min_key(SL#_dryad_S4, $phys_ptr_cast(L#right_left, ^b_node)) == F#bst_min_key(SL#_dryad_S5, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right_right)))), ==(old(_dryad_S4, bst(right_right)), old(_dryad_S5, bst(right_right)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#right_right, ^b_node))) ==> F#bst(SL#_dryad_S4, $phys_ptr_cast(L#right_right, ^b_node)) == F#bst(SL#_dryad_S5, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right_right)))), ==(old(_dryad_S4, bst_reach(right_right)), old(_dryad_S5, bst_reach(right_right)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#right_right, ^b_node))) ==> F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#right_right, ^b_node)) == F#bst_reach(SL#_dryad_S5, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right_right)))), ==(old(_dryad_S4, bst_keys(right_right)), old(_dryad_S5, bst_keys(right_right)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#right_right, ^b_node))) ==> F#bst_keys(SL#_dryad_S4, $phys_ptr_cast(L#right_right, ^b_node)) == F#bst_keys(SL#_dryad_S5, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right_right)))), ==(old(_dryad_S4, bst_max_key(right_right)), old(_dryad_S5, bst_max_key(right_right)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#right_right, ^b_node))) ==> F#bst_max_key(SL#_dryad_S4, $phys_ptr_cast(L#right_right, ^b_node)) == F#bst_max_key(SL#_dryad_S5, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(right_right)))), ==(old(_dryad_S4, bst_min_key(right_right)), old(_dryad_S5, bst_min_key(right_right)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#right_right, ^b_node))) ==> F#bst_min_key(SL#_dryad_S4, $phys_ptr_cast(L#right_right, ^b_node)) == F#bst_min_key(SL#_dryad_S5, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(tmp)))), ==(old(_dryad_S4, bst(tmp)), old(_dryad_S5, bst(tmp)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^b_node))) ==> F#bst(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^b_node)) == F#bst(SL#_dryad_S5, $phys_ptr_cast(L#tmp, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(tmp)))), ==(old(_dryad_S4, bst_reach(tmp)), old(_dryad_S5, bst_reach(tmp)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^b_node))) ==> F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^b_node)) == F#bst_reach(SL#_dryad_S5, $phys_ptr_cast(L#tmp, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(tmp)))), ==(old(_dryad_S4, bst_keys(tmp)), old(_dryad_S5, bst_keys(tmp)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^b_node))) ==> F#bst_keys(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^b_node)) == F#bst_keys(SL#_dryad_S5, $phys_ptr_cast(L#tmp, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(tmp)))), ==(old(_dryad_S4, bst_max_key(tmp)), old(_dryad_S5, bst_max_key(tmp)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^b_node))) ==> F#bst_max_key(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^b_node)) == F#bst_max_key(SL#_dryad_S5, $phys_ptr_cast(L#tmp, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(tmp)))), ==(old(_dryad_S4, bst_min_key(tmp)), old(_dryad_S5, bst_min_key(tmp)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^b_node))) ==> F#bst_min_key(SL#_dryad_S4, $phys_ptr_cast(L#tmp, ^b_node)) == F#bst_min_key(SL#_dryad_S5, $phys_ptr_cast(L#tmp, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(x)))), ==(old(_dryad_S4, bst(x)), old(_dryad_S5, bst(x)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node)) == F#bst(SL#_dryad_S5, $phys_ptr_cast(P#x, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(x)))), ==(old(_dryad_S4, bst_reach(x)), old(_dryad_S5, bst_reach(x)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node)) == F#bst_reach(SL#_dryad_S5, $phys_ptr_cast(P#x, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(x)))), ==(old(_dryad_S4, bst_keys(x)), old(_dryad_S5, bst_keys(x)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_keys(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node)) == F#bst_keys(SL#_dryad_S5, $phys_ptr_cast(P#x, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(x)))), ==(old(_dryad_S4, bst_max_key(x)), old(_dryad_S5, bst_max_key(x)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_max_key(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node)) == F#bst_max_key(SL#_dryad_S5, $phys_ptr_cast(P#x, ^b_node));
                // assume ==>(unchecked!(@_vcc_oset_in(right#6, old(_dryad_S4, bst_reach(x)))), ==(old(_dryad_S4, bst_min_key(x)), old(_dryad_S5, bst_min_key(x)))); 
                assume !$oset_in($phys_ptr_cast(right#6, ^b_node), F#bst_reach(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node))) ==> F#bst_min_key(SL#_dryad_S4, $phys_ptr_cast(P#x, ^b_node)) == F#bst_min_key(SL#_dryad_S5, $phys_ptr_cast(P#x, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, right3)), @_vcc_ptr_eq_pure(*((right3->left)), old(_dryad_S4, *((right3->left))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(SL#right3, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, right3)), @_vcc_ptr_eq_pure(*((right3->right)), old(_dryad_S4, *((right3->right))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(SL#right3, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, right3)), ==(*((right3->key)), old(_dryad_S4, *((right3->key))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(SL#right3, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)) == $rd_inv(SL#_dryad_S4, b_node.key, $phys_ptr_cast(SL#right3, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, right2)), @_vcc_ptr_eq_pure(*((right2->left)), old(_dryad_S4, *((right2->left))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(SL#right2, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, right2)), @_vcc_ptr_eq_pure(*((right2->right)), old(_dryad_S4, *((right2->right))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(SL#right2, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, right2)), ==(*((right2->key)), old(_dryad_S4, *((right2->key))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(SL#right2, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)) == $rd_inv(SL#_dryad_S4, b_node.key, $phys_ptr_cast(SL#right2, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, x1)), @_vcc_ptr_eq_pure(*((x1->left)), old(_dryad_S4, *((x1->left))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(SL#x1, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, x1)), @_vcc_ptr_eq_pure(*((x1->right)), old(_dryad_S4, *((x1->right))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(SL#x1, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, x1)), ==(*((x1->key)), old(_dryad_S4, *((x1->key))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(SL#x1, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)) == $rd_inv(SL#_dryad_S4, b_node.key, $phys_ptr_cast(SL#x1, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, x0#7)), @_vcc_ptr_eq_pure(*((x0#7->left)), old(_dryad_S4, *((x0#7->left))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(x0#7, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, x0#7)), @_vcc_ptr_eq_pure(*((x0#7->right)), old(_dryad_S4, *((x0#7->right))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(x0#7, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, x0#7)), ==(*((x0#7->key)), old(_dryad_S4, *((x0#7->key))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(x0#7, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)) == $rd_inv(SL#_dryad_S4, b_node.key, $phys_ptr_cast(x0#7, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, left#5)), @_vcc_ptr_eq_pure(*((left#5->left)), old(_dryad_S4, *((left#5->left))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(left#5, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, left#5)), @_vcc_ptr_eq_pure(*((left#5->right)), old(_dryad_S4, *((left#5->right))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(left#5, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, left#5)), ==(*((left#5->key)), old(_dryad_S4, *((left#5->key))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(left#5, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)) == $rd_inv(SL#_dryad_S4, b_node.key, $phys_ptr_cast(left#5, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, right_left)), @_vcc_ptr_eq_pure(*((right_left->left)), old(_dryad_S4, *((right_left->left))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(L#right_left, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, right_left)), @_vcc_ptr_eq_pure(*((right_left->right)), old(_dryad_S4, *((right_left->right))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(L#right_left, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, right_left)), ==(*((right_left->key)), old(_dryad_S4, *((right_left->key))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(L#right_left, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)) == $rd_inv(SL#_dryad_S4, b_node.key, $phys_ptr_cast(L#right_left, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, right_right)), @_vcc_ptr_eq_pure(*((right_right->left)), old(_dryad_S4, *((right_right->left))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(L#right_right, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, right_right)), @_vcc_ptr_eq_pure(*((right_right->right)), old(_dryad_S4, *((right_right->right))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(L#right_right, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, right_right)), ==(*((right_right->key)), old(_dryad_S4, *((right_right->key))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(L#right_right, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)) == $rd_inv(SL#_dryad_S4, b_node.key, $phys_ptr_cast(L#right_right, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, tmp)), @_vcc_ptr_eq_pure(*((tmp->left)), old(_dryad_S4, *((tmp->left))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(L#tmp, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, tmp)), @_vcc_ptr_eq_pure(*((tmp->right)), old(_dryad_S4, *((tmp->right))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(L#tmp, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, tmp)), ==(*((tmp->key)), old(_dryad_S4, *((tmp->key))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(L#tmp, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)) == $rd_inv(SL#_dryad_S4, b_node.key, $phys_ptr_cast(L#tmp, ^b_node));
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, x)), @_vcc_ptr_eq_pure(*((x->left)), old(_dryad_S4, *((x->left))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(P#x, ^b_node)) ==> $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, x)), @_vcc_ptr_eq_pure(*((x->right)), old(_dryad_S4, *((x->right))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(P#x, ^b_node)) ==> $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node) == $rd_phys_ptr(SL#_dryad_S4, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node);
                // assume ==>(!(@_vcc_ptr_eq_pure(right#6, x)), ==(*((x->key)), old(_dryad_S4, *((x->key))))); 
                assume !($phys_ptr_cast(right#6, ^b_node) == $phys_ptr_cast(P#x, ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) == $rd_inv(SL#_dryad_S4, b_node.key, $phys_ptr_cast(P#x, ^b_node));
                // assume ==>(@_vcc_ptr_neq_null(right3), ==(bst(right3), &&(&&(&&(&&(&&(&&(&&(bst(*((right3->left))), bst(*((right3->right)))), unchecked!(@_vcc_oset_in(right3, @_vcc_oset_union(bst_reach(*((right3->left))), bst_reach(*((right3->right))))))), unchecked!(@_vcc_intset_in(*((right3->key)), @_vcc_intset_union(bst_keys(*((right3->left))), bst_keys(*((right3->right))))))), @_vcc_oset_disjoint(bst_reach(*((right3->left))), bst_reach(*((right3->right))))), @_vcc_intset_disjoint(bst_keys(*((right3->left))), bst_keys(*((right3->right))))), ==>(@_vcc_ptr_neq_null(*((right3->left))), <(bst_max_key(*((right3->left))), *((right3->key))))), ==>(@_vcc_ptr_neq_null(*((right3->right))), <(*((right3->key)), bst_min_key(*((right3->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right3, ^b_node)) ==> F#bst($s, $phys_ptr_cast(SL#right3, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(SL#right3, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right3), ==(bst_reach(right3), @_vcc_oset_union(@_vcc_oset_singleton(right3), @_vcc_oset_union(bst_reach(*((right3->left))), bst_reach(*((right3->right))))))); 
                assume $non_null($phys_ptr_cast(SL#right3, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(SL#right3, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(SL#right3, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right3), ==(bst_keys(right3), @_vcc_intset_union(@_vcc_intset_singleton(*((right3->key))), @_vcc_intset_union(bst_keys(*((right3->left))), bst_keys(*((right3->right))))))); 
                assume $non_null($phys_ptr_cast(SL#right3, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(SL#right3, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right3), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right3->left))), @_vcc_ptr_neq_null(*((right3->right)))), ==(bst_max_key(right3), @\int_max(*((right3->key)), @\int_max(bst_max_key(*((right3->left))), bst_max_key(*((right3->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right3->left))), @_vcc_ptr_eq_null(*((right3->right)))), ==(bst_max_key(right3), @\int_max(*((right3->key)), bst_max_key(*((right3->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right3->left))), @_vcc_ptr_neq_null(*((right3->right)))), ==(bst_max_key(right3), @\int_max(*((right3->key)), bst_max_key(*((right3->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right3, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right3), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right3->left))), @_vcc_ptr_neq_null(*((right3->right)))), ==(bst_min_key(right3), @\int_min(*((right3->key)), @\int_min(bst_min_key(*((right3->left))), bst_min_key(*((right3->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right3->left))), @_vcc_ptr_eq_null(*((right3->right)))), ==(bst_min_key(right3), @\int_min(*((right3->key)), bst_min_key(*((right3->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right3->left))), @_vcc_ptr_neq_null(*((right3->right)))), ==(bst_min_key(right3), @\int_min(*((right3->key)), bst_min_key(*((right3->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right3, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right3, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right3, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right3, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right2), ==(bst(right2), &&(&&(&&(&&(&&(&&(&&(bst(*((right2->left))), bst(*((right2->right)))), unchecked!(@_vcc_oset_in(right2, @_vcc_oset_union(bst_reach(*((right2->left))), bst_reach(*((right2->right))))))), unchecked!(@_vcc_intset_in(*((right2->key)), @_vcc_intset_union(bst_keys(*((right2->left))), bst_keys(*((right2->right))))))), @_vcc_oset_disjoint(bst_reach(*((right2->left))), bst_reach(*((right2->right))))), @_vcc_intset_disjoint(bst_keys(*((right2->left))), bst_keys(*((right2->right))))), ==>(@_vcc_ptr_neq_null(*((right2->left))), <(bst_max_key(*((right2->left))), *((right2->key))))), ==>(@_vcc_ptr_neq_null(*((right2->right))), <(*((right2->key)), bst_min_key(*((right2->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right2, ^b_node)) ==> F#bst($s, $phys_ptr_cast(SL#right2, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(SL#right2, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right2), ==(bst_reach(right2), @_vcc_oset_union(@_vcc_oset_singleton(right2), @_vcc_oset_union(bst_reach(*((right2->left))), bst_reach(*((right2->right))))))); 
                assume $non_null($phys_ptr_cast(SL#right2, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(SL#right2, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(SL#right2, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right2), ==(bst_keys(right2), @_vcc_intset_union(@_vcc_intset_singleton(*((right2->key))), @_vcc_intset_union(bst_keys(*((right2->left))), bst_keys(*((right2->right))))))); 
                assume $non_null($phys_ptr_cast(SL#right2, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(SL#right2, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right2), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right2->left))), @_vcc_ptr_neq_null(*((right2->right)))), ==(bst_max_key(right2), @\int_max(*((right2->key)), @\int_max(bst_max_key(*((right2->left))), bst_max_key(*((right2->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right2->left))), @_vcc_ptr_eq_null(*((right2->right)))), ==(bst_max_key(right2), @\int_max(*((right2->key)), bst_max_key(*((right2->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right2->left))), @_vcc_ptr_neq_null(*((right2->right)))), ==(bst_max_key(right2), @\int_max(*((right2->key)), bst_max_key(*((right2->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right2, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right2), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right2->left))), @_vcc_ptr_neq_null(*((right2->right)))), ==(bst_min_key(right2), @\int_min(*((right2->key)), @\int_min(bst_min_key(*((right2->left))), bst_min_key(*((right2->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right2->left))), @_vcc_ptr_eq_null(*((right2->right)))), ==(bst_min_key(right2), @\int_min(*((right2->key)), bst_min_key(*((right2->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right2->left))), @_vcc_ptr_neq_null(*((right2->right)))), ==(bst_min_key(right2), @\int_min(*((right2->key)), bst_min_key(*((right2->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#right2, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#right2, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#right2, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#right2, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(bst(x1), &&(&&(&&(&&(&&(&&(&&(bst(*((x1->left))), bst(*((x1->right)))), unchecked!(@_vcc_oset_in(x1, @_vcc_oset_union(bst_reach(*((x1->left))), bst_reach(*((x1->right))))))), unchecked!(@_vcc_intset_in(*((x1->key)), @_vcc_intset_union(bst_keys(*((x1->left))), bst_keys(*((x1->right))))))), @_vcc_oset_disjoint(bst_reach(*((x1->left))), bst_reach(*((x1->right))))), @_vcc_intset_disjoint(bst_keys(*((x1->left))), bst_keys(*((x1->right))))), ==>(@_vcc_ptr_neq_null(*((x1->left))), <(bst_max_key(*((x1->left))), *((x1->key))))), ==>(@_vcc_ptr_neq_null(*((x1->right))), <(*((x1->key)), bst_min_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> F#bst($s, $phys_ptr_cast(SL#x1, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(SL#x1, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(bst_reach(x1), @_vcc_oset_union(@_vcc_oset_singleton(x1), @_vcc_oset_union(bst_reach(*((x1->left))), bst_reach(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(SL#x1, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(SL#x1, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), ==(bst_keys(x1), @_vcc_intset_union(@_vcc_intset_singleton(*((x1->key))), @_vcc_intset_union(bst_keys(*((x1->left))), bst_keys(*((x1->right))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(SL#x1, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_max_key(x1), @\int_max(*((x1->key)), @\int_max(bst_max_key(*((x1->left))), bst_max_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(bst_max_key(x1), @\int_max(*((x1->key)), bst_max_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_max_key(x1), @\int_max(*((x1->key)), bst_max_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x1), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_min_key(x1), @\int_min(*((x1->key)), @\int_min(bst_min_key(*((x1->left))), bst_min_key(*((x1->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x1->left))), @_vcc_ptr_eq_null(*((x1->right)))), ==(bst_min_key(x1), @\int_min(*((x1->key)), bst_min_key(*((x1->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x1->left))), @_vcc_ptr_neq_null(*((x1->right)))), ==(bst_min_key(x1), @\int_min(*((x1->key)), bst_min_key(*((x1->right)))))))); 
                assume $non_null($phys_ptr_cast(SL#x1, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(SL#x1, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(SL#x1, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(SL#x1, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0#7), ==(bst(x0#7), &&(&&(&&(&&(&&(&&(&&(bst(*((x0#7->left))), bst(*((x0#7->right)))), unchecked!(@_vcc_oset_in(x0#7, @_vcc_oset_union(bst_reach(*((x0#7->left))), bst_reach(*((x0#7->right))))))), unchecked!(@_vcc_intset_in(*((x0#7->key)), @_vcc_intset_union(bst_keys(*((x0#7->left))), bst_keys(*((x0#7->right))))))), @_vcc_oset_disjoint(bst_reach(*((x0#7->left))), bst_reach(*((x0#7->right))))), @_vcc_intset_disjoint(bst_keys(*((x0#7->left))), bst_keys(*((x0#7->right))))), ==>(@_vcc_ptr_neq_null(*((x0#7->left))), <(bst_max_key(*((x0#7->left))), *((x0#7->key))))), ==>(@_vcc_ptr_neq_null(*((x0#7->right))), <(*((x0#7->key)), bst_min_key(*((x0#7->right)))))))); 
                assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> F#bst($s, $phys_ptr_cast(x0#7, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(x0#7, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0#7), ==(bst_reach(x0#7), @_vcc_oset_union(@_vcc_oset_singleton(x0#7), @_vcc_oset_union(bst_reach(*((x0#7->left))), bst_reach(*((x0#7->right))))))); 
                assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(x0#7, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(x0#7, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0#7), ==(bst_keys(x0#7), @_vcc_intset_union(@_vcc_intset_singleton(*((x0#7->key))), @_vcc_intset_union(bst_keys(*((x0#7->left))), bst_keys(*((x0#7->right))))))); 
                assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(x0#7, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0#7), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_max_key(x0#7), @\int_max(*((x0#7->key)), @\int_max(bst_max_key(*((x0#7->left))), bst_max_key(*((x0#7->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_eq_null(*((x0#7->right)))), ==(bst_max_key(x0#7), @\int_max(*((x0#7->key)), bst_max_key(*((x0#7->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_max_key(x0#7), @\int_max(*((x0#7->key)), bst_max_key(*((x0#7->right)))))))); 
                assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x0#7), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_min_key(x0#7), @\int_min(*((x0#7->key)), @\int_min(bst_min_key(*((x0#7->left))), bst_min_key(*((x0#7->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x0#7->left))), @_vcc_ptr_eq_null(*((x0#7->right)))), ==(bst_min_key(x0#7), @\int_min(*((x0#7->key)), bst_min_key(*((x0#7->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x0#7->left))), @_vcc_ptr_neq_null(*((x0#7->right)))), ==(bst_min_key(x0#7), @\int_min(*((x0#7->key)), bst_min_key(*((x0#7->right)))))))); 
                assume $non_null($phys_ptr_cast(x0#7, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(x0#7, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(x0#7, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(x0#7, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), ==(bst(left#5), &&(&&(&&(&&(&&(&&(&&(bst(*((left#5->left))), bst(*((left#5->right)))), unchecked!(@_vcc_oset_in(left#5, @_vcc_oset_union(bst_reach(*((left#5->left))), bst_reach(*((left#5->right))))))), unchecked!(@_vcc_intset_in(*((left#5->key)), @_vcc_intset_union(bst_keys(*((left#5->left))), bst_keys(*((left#5->right))))))), @_vcc_oset_disjoint(bst_reach(*((left#5->left))), bst_reach(*((left#5->right))))), @_vcc_intset_disjoint(bst_keys(*((left#5->left))), bst_keys(*((left#5->right))))), ==>(@_vcc_ptr_neq_null(*((left#5->left))), <(bst_max_key(*((left#5->left))), *((left#5->key))))), ==>(@_vcc_ptr_neq_null(*((left#5->right))), <(*((left#5->key)), bst_min_key(*((left#5->right)))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> F#bst($s, $phys_ptr_cast(left#5, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(left#5, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), ==(bst_reach(left#5), @_vcc_oset_union(@_vcc_oset_singleton(left#5), @_vcc_oset_union(bst_reach(*((left#5->left))), bst_reach(*((left#5->right))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(left#5, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(left#5, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), ==(bst_keys(left#5), @_vcc_intset_union(@_vcc_intset_singleton(*((left#5->key))), @_vcc_intset_union(bst_keys(*((left#5->left))), bst_keys(*((left#5->right))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(left#5, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left#5->left))), @_vcc_ptr_neq_null(*((left#5->right)))), ==(bst_max_key(left#5), @\int_max(*((left#5->key)), @\int_max(bst_max_key(*((left#5->left))), bst_max_key(*((left#5->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left#5->left))), @_vcc_ptr_eq_null(*((left#5->right)))), ==(bst_max_key(left#5), @\int_max(*((left#5->key)), bst_max_key(*((left#5->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left#5->left))), @_vcc_ptr_neq_null(*((left#5->right)))), ==(bst_max_key(left#5), @\int_max(*((left#5->key)), bst_max_key(*((left#5->right)))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(left#5), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((left#5->left))), @_vcc_ptr_neq_null(*((left#5->right)))), ==(bst_min_key(left#5), @\int_min(*((left#5->key)), @\int_min(bst_min_key(*((left#5->left))), bst_min_key(*((left#5->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((left#5->left))), @_vcc_ptr_eq_null(*((left#5->right)))), ==(bst_min_key(left#5), @\int_min(*((left#5->key)), bst_min_key(*((left#5->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((left#5->left))), @_vcc_ptr_neq_null(*((left#5->right)))), ==(bst_min_key(left#5), @\int_min(*((left#5->key)), bst_min_key(*((left#5->right)))))))); 
                assume $non_null($phys_ptr_cast(left#5, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(left#5, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(left#5, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(left#5, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(left#5, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), ==(bst(right_left), &&(&&(&&(&&(&&(&&(&&(bst(*((right_left->left))), bst(*((right_left->right)))), unchecked!(@_vcc_oset_in(right_left, @_vcc_oset_union(bst_reach(*((right_left->left))), bst_reach(*((right_left->right))))))), unchecked!(@_vcc_intset_in(*((right_left->key)), @_vcc_intset_union(bst_keys(*((right_left->left))), bst_keys(*((right_left->right))))))), @_vcc_oset_disjoint(bst_reach(*((right_left->left))), bst_reach(*((right_left->right))))), @_vcc_intset_disjoint(bst_keys(*((right_left->left))), bst_keys(*((right_left->right))))), ==>(@_vcc_ptr_neq_null(*((right_left->left))), <(bst_max_key(*((right_left->left))), *((right_left->key))))), ==>(@_vcc_ptr_neq_null(*((right_left->right))), <(*((right_left->key)), bst_min_key(*((right_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#right_left, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#right_left, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), ==(bst_reach(right_left), @_vcc_oset_union(@_vcc_oset_singleton(right_left), @_vcc_oset_union(bst_reach(*((right_left->left))), bst_reach(*((right_left->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#right_left, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#right_left, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), ==(bst_keys(right_left), @_vcc_intset_union(@_vcc_intset_singleton(*((right_left->key))), @_vcc_intset_union(bst_keys(*((right_left->left))), bst_keys(*((right_left->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#right_left, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_max_key(right_left), @\int_max(*((right_left->key)), @\int_max(bst_max_key(*((right_left->left))), bst_max_key(*((right_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_eq_null(*((right_left->right)))), ==(bst_max_key(right_left), @\int_max(*((right_left->key)), bst_max_key(*((right_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_max_key(right_left), @\int_max(*((right_left->key)), bst_max_key(*((right_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_left), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_min_key(right_left), @\int_min(*((right_left->key)), @\int_min(bst_min_key(*((right_left->left))), bst_min_key(*((right_left->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_left->left))), @_vcc_ptr_eq_null(*((right_left->right)))), ==(bst_min_key(right_left), @\int_min(*((right_left->key)), bst_min_key(*((right_left->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_left->left))), @_vcc_ptr_neq_null(*((right_left->right)))), ==(bst_min_key(right_left), @\int_min(*((right_left->key)), bst_min_key(*((right_left->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_left, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_left, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_left, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_left, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), ==(bst(right_right), &&(&&(&&(&&(&&(&&(&&(bst(*((right_right->left))), bst(*((right_right->right)))), unchecked!(@_vcc_oset_in(right_right, @_vcc_oset_union(bst_reach(*((right_right->left))), bst_reach(*((right_right->right))))))), unchecked!(@_vcc_intset_in(*((right_right->key)), @_vcc_intset_union(bst_keys(*((right_right->left))), bst_keys(*((right_right->right))))))), @_vcc_oset_disjoint(bst_reach(*((right_right->left))), bst_reach(*((right_right->right))))), @_vcc_intset_disjoint(bst_keys(*((right_right->left))), bst_keys(*((right_right->right))))), ==>(@_vcc_ptr_neq_null(*((right_right->left))), <(bst_max_key(*((right_right->left))), *((right_right->key))))), ==>(@_vcc_ptr_neq_null(*((right_right->right))), <(*((right_right->key)), bst_min_key(*((right_right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#right_right, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#right_right, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), ==(bst_reach(right_right), @_vcc_oset_union(@_vcc_oset_singleton(right_right), @_vcc_oset_union(bst_reach(*((right_right->left))), bst_reach(*((right_right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#right_right, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#right_right, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), ==(bst_keys(right_right), @_vcc_intset_union(@_vcc_intset_singleton(*((right_right->key))), @_vcc_intset_union(bst_keys(*((right_right->left))), bst_keys(*((right_right->right))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#right_right, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_right->left))), @_vcc_ptr_neq_null(*((right_right->right)))), ==(bst_max_key(right_right), @\int_max(*((right_right->key)), @\int_max(bst_max_key(*((right_right->left))), bst_max_key(*((right_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_right->left))), @_vcc_ptr_eq_null(*((right_right->right)))), ==(bst_max_key(right_right), @\int_max(*((right_right->key)), bst_max_key(*((right_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_right->left))), @_vcc_ptr_neq_null(*((right_right->right)))), ==(bst_max_key(right_right), @\int_max(*((right_right->key)), bst_max_key(*((right_right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right_right), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right_right->left))), @_vcc_ptr_neq_null(*((right_right->right)))), ==(bst_min_key(right_right), @\int_min(*((right_right->key)), @\int_min(bst_min_key(*((right_right->left))), bst_min_key(*((right_right->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right_right->left))), @_vcc_ptr_eq_null(*((right_right->right)))), ==(bst_min_key(right_right), @\int_min(*((right_right->key)), bst_min_key(*((right_right->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right_right->left))), @_vcc_ptr_neq_null(*((right_right->right)))), ==(bst_min_key(right_right), @\int_min(*((right_right->key)), bst_min_key(*((right_right->right)))))))); 
                assume $non_null($phys_ptr_cast(L#right_right, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#right_right, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#right_right, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#right_right, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst(tmp), &&(&&(&&(&&(&&(&&(&&(bst(*((tmp->left))), bst(*((tmp->right)))), unchecked!(@_vcc_oset_in(tmp, @_vcc_oset_union(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))))), unchecked!(@_vcc_intset_in(*((tmp->key)), @_vcc_intset_union(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))))), @_vcc_oset_disjoint(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))), @_vcc_intset_disjoint(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))), ==>(@_vcc_ptr_neq_null(*((tmp->left))), <(bst_max_key(*((tmp->left))), *((tmp->key))))), ==>(@_vcc_ptr_neq_null(*((tmp->right))), <(*((tmp->key)), bst_min_key(*((tmp->right)))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#tmp, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst_reach(tmp), @_vcc_oset_union(@_vcc_oset_singleton(tmp), @_vcc_oset_union(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#tmp, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#tmp, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst_keys(tmp), @_vcc_intset_union(@_vcc_intset_singleton(*((tmp->key))), @_vcc_intset_union(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#tmp, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), @\int_max(bst_max_key(*((tmp->left))), bst_max_key(*((tmp->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_eq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), bst_max_key(*((tmp->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), bst_max_key(*((tmp->right)))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), @\int_min(bst_min_key(*((tmp->left))), bst_min_key(*((tmp->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_eq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), bst_min_key(*((tmp->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), bst_min_key(*((tmp->right)))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst(x), &&(&&(&&(&&(&&(&&(&&(bst(*((x->left))), bst(*((x->right)))), unchecked!(@_vcc_oset_in(x, @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))), unchecked!(@_vcc_intset_in(*((x->key)), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))), @_vcc_oset_disjoint(bst_reach(*((x->left))), bst_reach(*((x->right))))), @_vcc_intset_disjoint(bst_keys(*((x->left))), bst_keys(*((x->right))))), ==>(@_vcc_ptr_neq_null(*((x->left))), <(bst_max_key(*((x->left))), *((x->key))))), ==>(@_vcc_ptr_neq_null(*((x->right))), <(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst($s, $phys_ptr_cast(P#x, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(P#x, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_reach(x), @_vcc_oset_union(@_vcc_oset_singleton(x), @_vcc_oset_union(bst_reach(*((x->left))), bst_reach(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(P#x, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(P#x, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), ==(bst_keys(x), @_vcc_intset_union(@_vcc_intset_singleton(*((x->key))), @_vcc_intset_union(bst_keys(*((x->left))), bst_keys(*((x->right))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(P#x, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), @\int_max(bst_max_key(*((x->left))), bst_max_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_max_key(x), @\int_max(*((x->key)), bst_max_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(x), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), @\int_min(bst_min_key(*((x->left))), bst_min_key(*((x->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((x->left))), @_vcc_ptr_eq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((x->left))), @_vcc_ptr_neq_null(*((x->right)))), ==(bst_min_key(x), @\int_min(*((x->key)), bst_min_key(*((x->right)))))))); 
                assume $non_null($phys_ptr_cast(P#x, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(P#x, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(P#x, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(P#x, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(P#x, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst(right#6), &&(&&(&&(&&(&&(&&(&&(bst(*((right#6->left))), bst(*((right#6->right)))), unchecked!(@_vcc_oset_in(right#6, @_vcc_oset_union(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))))), unchecked!(@_vcc_intset_in(*((right#6->key)), @_vcc_intset_union(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))))), @_vcc_oset_disjoint(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))), @_vcc_intset_disjoint(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))), ==>(@_vcc_ptr_neq_null(*((right#6->left))), <(bst_max_key(*((right#6->left))), *((right#6->key))))), ==>(@_vcc_ptr_neq_null(*((right#6->right))), <(*((right#6->key)), bst_min_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst($s, $phys_ptr_cast(right#6, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(right#6, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst_reach(right#6), @_vcc_oset_union(@_vcc_oset_singleton(right#6), @_vcc_oset_union(bst_reach(*((right#6->left))), bst_reach(*((right#6->right))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(right#6, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(right#6, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), ==(bst_keys(right#6), @_vcc_intset_union(@_vcc_intset_singleton(*((right#6->key))), @_vcc_intset_union(bst_keys(*((right#6->left))), bst_keys(*((right#6->right))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(right#6, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), @\int_max(bst_max_key(*((right#6->left))), bst_max_key(*((right#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_eq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), bst_max_key(*((right#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_max_key(right#6), @\int_max(*((right#6->key)), bst_max_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(right#6), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), @\int_min(bst_min_key(*((right#6->left))), bst_min_key(*((right#6->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((right#6->left))), @_vcc_ptr_eq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), bst_min_key(*((right#6->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((right#6->left))), @_vcc_ptr_neq_null(*((right#6->right)))), ==(bst_min_key(right#6), @\int_min(*((right#6->key)), bst_min_key(*((right#6->right)))))))); 
                assume $non_null($phys_ptr_cast(right#6, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(right#6, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(right#6, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(right#6, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(right#6, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst(tmp), &&(&&(&&(&&(&&(&&(&&(bst(*((tmp->left))), bst(*((tmp->right)))), unchecked!(@_vcc_oset_in(tmp, @_vcc_oset_union(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))))), unchecked!(@_vcc_intset_in(*((tmp->key)), @_vcc_intset_union(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))))), @_vcc_oset_disjoint(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))), @_vcc_intset_disjoint(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))), ==>(@_vcc_ptr_neq_null(*((tmp->left))), <(bst_max_key(*((tmp->left))), *((tmp->key))))), ==>(@_vcc_ptr_neq_null(*((tmp->right))), <(*((tmp->key)), bst_min_key(*((tmp->right)))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst($s, $phys_ptr_cast(L#tmp, ^b_node)) == (F#bst($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && F#bst($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && !$oset_in($phys_ptr_cast(L#tmp, ^b_node), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && !$intset_in($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && $oset_disjoint(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))) && $intset_disjoint(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) < $rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node))) && ($non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> $rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)) < F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst_reach(tmp), @_vcc_oset_union(@_vcc_oset_singleton(tmp), @_vcc_oset_union(bst_reach(*((tmp->left))), bst_reach(*((tmp->right))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst_reach($s, $phys_ptr_cast(L#tmp, ^b_node)) == $oset_union($oset_singleton($phys_ptr_cast(L#tmp, ^b_node)), $oset_union(F#bst_reach($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_reach($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), ==(bst_keys(tmp), @_vcc_intset_union(@_vcc_intset_singleton(*((tmp->key))), @_vcc_intset_union(bst_keys(*((tmp->left))), bst_keys(*((tmp->right))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> F#bst_keys($s, $phys_ptr_cast(L#tmp, ^b_node)) == $intset_union($intset_singleton($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node))), $intset_union(F#bst_keys($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_keys($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), @\int_max(bst_max_key(*((tmp->left))), bst_max_key(*((tmp->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_eq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), bst_max_key(*((tmp->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_max_key(tmp), @\int_max(*((tmp->key)), bst_max_key(*((tmp->right)))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $int_max(F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_max_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_max($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_max_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // assume ==>(@_vcc_ptr_neq_null(tmp), &&(&&(==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), @\int_min(bst_min_key(*((tmp->left))), bst_min_key(*((tmp->right))))))), ==>(&&(@_vcc_ptr_neq_null(*((tmp->left))), @_vcc_ptr_eq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), bst_min_key(*((tmp->left))))))), ==>(&&(@_vcc_ptr_eq_null(*((tmp->left))), @_vcc_ptr_neq_null(*((tmp->right)))), ==(bst_min_key(tmp), @\int_min(*((tmp->key)), bst_min_key(*((tmp->right)))))))); 
                assume $non_null($phys_ptr_cast(L#tmp, ^b_node)) ==> ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), $int_min(F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))))) && ($non_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $is_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)))) && ($is_null($rd_phys_ptr($s, b_node.left, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) && $non_null($rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node)) ==> F#bst_min_key($s, $phys_ptr_cast(L#tmp, ^b_node)) == $int_min($rd_inv($s, b_node.key, $phys_ptr_cast(L#tmp, ^b_node)), F#bst_min_key($s, $rd_phys_ptr($s, b_node.right, $phys_ptr_cast(L#tmp, ^b_node), ^b_node))));
                // return right#6; 
                $result := $phys_ptr_cast(right#6, ^b_node);
                assume true;
                assert $position_marker();
                goto #exit;
            }
        }
    }

  anon11:
    // skip

  #exit:
}



axiom (forall Q#__vcc_state$2^166.9#tc3#1357: $state, Q#x$2^166.9#dt1#1292: $ptr, Q#i$2^166.9#tc1#1293: int :: {:weight 10} { $intset_in(Q#i$2^166.9#tc1#1293, F#bst_keys(Q#__vcc_state$2^166.9#tc3#1357, $phys_ptr_cast(Q#x$2^166.9#dt1#1292, ^b_node))) } $good_state(Q#__vcc_state$2^166.9#tc3#1357) && $in_range_i4(Q#i$2^166.9#tc1#1293) ==> Q#i$2^166.9#tc1#1293 < F#bst_min_key(Q#__vcc_state$2^166.9#tc3#1357, $phys_ptr_cast(Q#x$2^166.9#dt1#1292, ^b_node)) ==> !$intset_in(Q#i$2^166.9#tc1#1293, F#bst_keys(Q#__vcc_state$2^166.9#tc3#1357, $phys_ptr_cast(Q#x$2^166.9#dt1#1292, ^b_node))));

axiom (forall Q#__vcc_state$2^167.9#tc3#1358: $state, Q#x$2^167.9#dt1#1294: $ptr, Q#i$2^167.9#tc1#1295: int :: {:weight 10} { $intset_in(Q#i$2^167.9#tc1#1295, F#bst_keys(Q#__vcc_state$2^167.9#tc3#1358, $phys_ptr_cast(Q#x$2^167.9#dt1#1294, ^b_node))) } $good_state(Q#__vcc_state$2^167.9#tc3#1358) && $in_range_i4(Q#i$2^167.9#tc1#1295) ==> Q#i$2^167.9#tc1#1295 > F#bst_max_key(Q#__vcc_state$2^167.9#tc3#1358, $phys_ptr_cast(Q#x$2^167.9#dt1#1294, ^b_node)) ==> !$intset_in(Q#i$2^167.9#tc1#1295, F#bst_keys(Q#__vcc_state$2^167.9#tc3#1358, $phys_ptr_cast(Q#x$2^167.9#dt1#1294, ^b_node))));

const unique l#public: $label;

axiom $type_code_is(3, ^$#state_t);

axiom $type_code_is(1, ^^i4);

const unique #tok$3^42.5: $token;

const unique #tok$3^40.19: $token;

const unique #tok$3^38.5: $token;

const unique #tok$3^28.5: $token;

const unique #tok$3^24.5: $token;

const unique #tok$3^20.5: $token;

const unique #tok$4^0.0: $token;

const unique #file^?3Cno?20file?3E: $token;

axiom $file_name_is(4, #file^?3Cno?20file?3E);

const unique #tok$3^5.3: $token;

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cbst?5Cbst?2Dremove?2Droot?2Drec.c: $token;

axiom $file_name_is(3, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?5Cvcc?5CHost?5Cbin?5CTests?5Cbst?5Cbst?2Dremove?2Droot?2Drec.c);

const unique #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cbst?5Cdryad_bst.h: $token;

axiom $file_name_is(2, #file^z?3A?5Cinvariantsynthesis?5Cvcdryad?5Cvcc?5Chost?5Cbin?5Ctests?5Cbst?5Cdryad_bst.h);

const unique #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h: $token;

axiom $file_name_is(1, #file^Z?3A?5CInvariantSynthesis?5CVCDryad?2Dbin?5CHeaders?5Cvccp.h);

const unique #distTp1: $ctype;

axiom #distTp1 == $ptr_to(^b_node);
